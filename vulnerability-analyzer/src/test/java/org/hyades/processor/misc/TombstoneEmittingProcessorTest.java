package org.hyades.processor.misc;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.streams.TestInputTopic;
import org.apache.kafka.streams.TestOutputTopic;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.test.TestRecord;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

class TombstoneEmittingProcessorTest {

    private TopologyTestDriver testDriver;
    private TestInputTopic<String, String> inputTopic;
    private TestOutputTopic<String, String> outputTopic;

    @BeforeEach
    void beforeEach() {
        final var processorSupplier = new TombstoneEmittingProcessorSupplier<String, String>(
                "emitter-processor-store", Serdes.String(), Duration.ofSeconds(5), Duration.ofSeconds(30), () -> null);

        final var topology = new Topology();
        topology.addSource("sourceProcessor", new StringDeserializer(),
                new StringDeserializer(), "input-topic");
        topology.addProcessor("emitterProcessor", processorSupplier, "sourceProcessor");
        topology.addSink("sinkProcessor", "output-topic",
                new StringSerializer(), new StringSerializer(), "emitterProcessor");

        testDriver = new TopologyTestDriver(topology);
        inputTopic = testDriver.createInputTopic("input-topic", new StringSerializer(), new StringSerializer());
        outputTopic = testDriver.createOutputTopic("output-topic", new StringDeserializer(), new StringDeserializer());
    }

    @AfterEach
    void afterEach() {
        testDriver.close();
    }

    @Test
    void test() {
        inputTopic.pipeInput(new TestRecord<>("foo", "bar", Instant.now()));
        inputTopic.pipeInput(new TestRecord<>("foo", "baz", Instant.now().plusSeconds(15)));

        assertThat(outputTopic.readRecordsToList()).satisfiesExactly(
                record -> assertThat(record.value()).isEqualTo("bar"),
                record -> assertThat(record.value()).isEqualTo("baz")
        );

        inputTopic.pipeInput(new TestRecord<>("qux", "quux", Instant.now().plusSeconds(45)));

        assertThat(outputTopic.readRecordsToList()).satisfiesExactly(
                record -> {
                    assertThat(record.key()).isEqualTo("qux");
                    assertThat(record.value()).isEqualTo("quux");
                },
                record -> {
                    assertThat(record.key()).isEqualTo("foo");
                    assertThat(record.value()).isNull();
                }
        );
    }

}