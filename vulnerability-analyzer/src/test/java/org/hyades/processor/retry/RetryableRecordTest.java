package org.hyades.processor.retry;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;

import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static net.javacrumbs.jsonunit.assertj.JsonAssertions.json;
import static org.assertj.core.api.Assertions.assertThat;

class RetryableRecordTest {

    @Test
    void testJsonSerialization() throws Exception {
        final var record = new RetryableRecord<>("foo", "bar", 123456789,
                new RecordHeaders()
                        .add("foo", "bar".getBytes(StandardCharsets.UTF_8))
                        .add("baz", "qux".getBytes(StandardCharsets.UTF_8)),
                123, 3);

        assertThatJson(new ObjectMapper().writeValueAsString(record))
                .isEqualTo(json("""
                        {
                            "key": "foo",
                            "value": "bar",
                            "timestamp": 123456789,
                            "headers": [
                                {
                                    "key": "foo",
                                    "value": "bar"
                                },
                                {
                                    "key": "baz",
                                    "value": "qux"
                                }
                            ],
                            "nextRetryAt": 123,
                            "retryAttempts": 3
                        }
                        """));
    }

    @Test
    void testJsonDeserialization() throws Exception {
        final var record = new ObjectMapper().readValue("""
                {
                    "key": "foo",
                    "value": "bar",
                    "timestamp": 123456789,
                    "headers": [
                        {
                            "key": "foo",
                            "value": "bar"
                        },
                        {
                            "key": "baz",
                            "value": "qux"
                        }
                    ],
                    "nextRetryAt": 123,
                    "retryAttempts": 3
                }
                """, new TypeReference<RetryableRecord<String, String>>() {
        });

        assertThat(record.key()).isEqualTo("foo");
        assertThat(record.value()).isEqualTo("bar");
        assertThat(record.timestamp()).isEqualTo(123456789);
        assertThat(record.headers()).hasSize(2);
        assertThat(record.headers().lastHeader("foo").value()).isEqualTo("bar".getBytes(StandardCharsets.UTF_8));
        assertThat(record.headers().lastHeader("baz").value()).isEqualTo("qux".getBytes(StandardCharsets.UTF_8));
        assertThat(record.nextRetryAt()).isEqualTo(123);
        assertThat(record.retryAttempts()).isEqualTo(3);
    }

}