package org.hyades.client.snyk;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.common.ResourceArg;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import org.hyades.util.WireMockTestResource;
import org.hyades.util.WireMockTestResource.InjectWireMock;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import javax.inject.Inject;
import javax.ws.rs.WebApplicationException;
import java.io.IOException;
import java.io.InputStream;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.anyUrl;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.matching;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static com.github.tomakehurst.wiremock.http.Body.fromJsonBytes;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;

@QuarkusTest
@TestProfile(SnykClientTest.TestProfile.class)
@QuarkusTestResource(
        value = WireMockTestResource.class,
        initArgs = @ResourceArg(name = "serverUrlProperty", value = "scanner.snyk.api.base-url")
)
class SnykClientTest {

    public static class TestProfile implements QuarkusTestProfile {
        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "scanner.snyk.enabled", "true",
                    "scanner.snyk.api.org-id", "test-org-id",
                    "scanner.snyk.api.tokens", "token-1,token-2"
            );
        }
    }

    @InjectWireMock
    WireMockServer wireMockServer;

    @Inject
    SnykClient snykClient;

    @AfterEach
    void afterEach() {
        wireMockServer.resetAll();
    }

    @Test
    void testGetIssues() throws Exception {
        // Have the Snyk API return one issue for the provided PURL
        wireMockServer.stubFor(get(urlPathMatching("/rest/orgs/[^/]+/packages/[^/]+/issues"))
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_OK)
                        .withResponseBody(fromJsonBytes(getSnykResponseTestData("one-issue-response.json")))));

        final Page<Issue> issuePage = snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");

        // Verify that we sent the request in the correct format
        wireMockServer.verify(getRequestedFor(urlPathMatching("/rest/orgs/test-org-id/packages/pkg%3Amaven%2Fcom.fasterxml.woodstox%2Fwoodstox-core%405.0.0/issues"))
                .withQueryParam("version", matching("\\d{4}-\\d{2}-\\d{2}"))
                .withHeader(HttpHeaders.AUTHORIZATION, matching("token token-\\d"))
                .withHeader(HttpHeaders.ACCEPT, equalTo("application/vnd.api+json")));

        // Verify that the response data is deserialized correctly
        assertThat(issuePage).isNotNull();
        assertThat(issuePage.data()).hasSize(1);
        assertThat(issuePage.meta()).isNotNull();

        final PageData<Issue> pageData = issuePage.data().get(0);
        assertThat(pageData.type()).isEqualTo("issue");
        assertThat(pageData.id()).isEqualTo("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135");

        final Issue issue = pageData.attributes();
        assertThat(issue).isNotNull();
        assertThat(issue.key()).isEqualTo("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135");
        assertThat(issue.type()).isEqualTo("package_vulnerability");
        assertThat(issue.createdAt()).isEqualTo("2022-10-31T11:25:51.137662Z");
        assertThat(issue.updatedAt()).isEqualTo("2022-11-26T01:10:27.643959Z");

        assertThat(issue.problems()).hasSize(11);

        assertThat(issue.severities()).satisfiesExactly(
                severity -> {
                    assertThat(severity.level()).isEqualTo("medium");
                    assertThat(severity.score()).isEqualTo(5.3f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.SNYK);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.NVD);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.UNKNOWN);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                }
        );

        assertThat(issue.slots()).isNotNull();
        assertThat(issue.slots().references()).satisfiesExactly(
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/issues/157");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/x-stream/xstream/issues/304%23issuecomment-1254647926");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub PR");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/pull/159");
                }
        );

        final PageMeta meta = issuePage.meta();
        assertThat(meta.pkg()).isNotNull();
        assertThat(meta.pkg().name()).isEqualTo("woodstox-core");
        assertThat(meta.pkg().type()).isEqualTo("maven");
        assertThat(meta.pkg().url()).isEqualTo("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");
        assertThat(meta.pkg().version()).isEqualTo("5.0.0");
    }

    @ParameterizedTest
    @ValueSource(ints = {
            HttpStatus.SC_NOT_MODIFIED,
            HttpStatus.SC_BAD_REQUEST,
            HttpStatus.SC_NOT_FOUND,
            HttpStatus.SC_TOO_MANY_REQUESTS,
            HttpStatus.SC_INTERNAL_SERVER_ERROR
    })
    void testGetIssuesWithUnexpectedResponse(final int responseCode) {
        wireMockServer.stubFor(get(urlPathMatching("/rest/orgs/[^/]+/packages/[^/]+/issues"))
                .willReturn(aResponse()
                        .withStatus(responseCode)));

        assertThatExceptionOfType(WebApplicationException.class)
                .isThrownBy(() -> snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"))
                .satisfies(exception -> {
                    assertThat(exception.getResponse()).isNotNull();
                    assertThat(exception.getResponse().getStatus()).isEqualTo(responseCode);
                });
    }

    @Test
    void testGetIssuesWhenTimingOut() {
        wireMockServer.stubFor(get(anyUrl())
                .willReturn(aResponse()
                        .withFixedDelay(5_000)));

        assertThatExceptionOfType(SocketTimeoutException.class)
                .isThrownBy(() -> snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"));

        // There should be no automatic retries.
        wireMockServer.verify(1, getRequestedFor(anyUrl()));
    }

    @Test
    void testGetIssuesWithMultipleTokens() throws Exception {
        wireMockServer.stubFor(get(anyUrl())
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_NOT_FOUND)));

        final var executor = Executors.newFixedThreadPool(10);
        final var countDownLatch = new CountDownLatch(100);
        try {
            for (int i = 0; i < 100; i++) {
                executor.submit(() -> {
                    try {
                        snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");
                    } catch (IOException e) {
                        Assertions.fail(e);
                    } finally {
                        countDownLatch.countDown();
                    }
                });
            }

            assertThat(countDownLatch.await(15, TimeUnit.SECONDS)).isTrue();
        } finally {
            executor.shutdown();
        }

        // There should be an even distribution of token usage across all requests.
        wireMockServer.verify(50, getRequestedFor(anyUrl())
                .withHeader(HttpHeaders.AUTHORIZATION, WireMock.equalTo("token token-1")));
        wireMockServer.verify(50, getRequestedFor(anyUrl())
                .withHeader(HttpHeaders.AUTHORIZATION, WireMock.equalTo("token token-2")));
    }

    private byte[] getSnykResponseTestData(final String name) throws IOException {
        final URL resourceUrl = getClass().getClassLoader().getResource(Paths.get("snyk", name).toString());
        assertThat(resourceUrl).isNotNull();

        try (final InputStream inputStream = resourceUrl.openStream()) {
            return inputStream.readAllBytes();
        }
    }

}