package org.hyades.client.ossindex;

import org.hyades.proto.vuln.v1.Vulnerability;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hyades.client.ossindex.ModelConverter.convert;
import static org.hyades.proto.vuln.v1.ScoreMethod.SCORE_METHOD_CVSSV2;
import static org.hyades.proto.vuln.v1.ScoreMethod.SCORE_METHOD_CVSSV3;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_CRITICAL;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_HIGH;
import static org.hyades.proto.vuln.v1.Source.SOURCE_NVD;
import static org.hyades.proto.vuln.v1.Source.SOURCE_OSSINDEX;

public class ModelConverterTest {

    @Test
    void testConvert() {
        var componentReportVulnerability = new ComponentReportVulnerability(
                "CVE-2020-7471",
                "CVE-2020-7471",
                "[CVE-2020-7471] CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                """
                        Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows
                        SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django
                        applications that offer downloads of data as a series of rows with a user-specified
                        column delimiter). By passing a suitably crafted delimiter to a
                        contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping
                        and inject malicious SQL.
                        """,
                9.8f,
                "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                "CWE-89",
                "CVE-2020-7471",
                "https://ossindex.sonatype.org/vulnerability/CVE-2020-7471?component-type=pypi&component-name=django",
                List.of(
                        "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2020-7471",
                        "https://www.djangoproject.com/weblog/2020/feb/03/security-releases/",
                        "https://www.openwall.com/lists/oss-security/2020/02/03/1"
                )
        );

        Vulnerability vulnerability = convert(componentReportVulnerability, false);
        assertThat(vulnerability).isNotNull();
        assertThat(vulnerability.getId()).isEqualTo("CVE-2020-7471");
        assertThat(vulnerability.getSource()).isEqualTo(SOURCE_NVD);
        assertThat(vulnerability.getTitle()).startsWith("[CVE-2020-7471] CWE-89: Improper").hasSize(108);
        assertThat(vulnerability.getDescription()).startsWith("Django 1.11 before 1.11.28").hasSize(413);
        assertThat(vulnerability.getCwesList()).containsOnly(89);
        assertThat(vulnerability.getRatingsList()).satisfiesExactly(
                rating -> {
                    assertThat(rating.getSource()).isEqualTo(SOURCE_OSSINDEX);
                    assertThat(rating.getMethod()).isEqualTo(SCORE_METHOD_CVSSV3);
                    assertThat(rating.getScore()).isEqualTo(9.8);
                    assertThat(rating.getVector()).isEqualTo("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H");
                    assertThat(rating.getSeverity()).isEqualTo(SEVERITY_CRITICAL);
                }
        );
        assertThat(vulnerability.getReferencesList()).satisfiesExactly(
                reference -> {
                    assertThat(reference.getUrl()).isEqualTo("https://ossindex.sonatype.org/vulnerability/CVE-2020-7471?component-type=pypi&component-name=django");
                    assertThat(reference.hasDisplayName()).isFalse();
                },
                reference -> {
                    assertThat(reference.getUrl()).isEqualTo("http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2020-7471");
                    assertThat(reference.hasDisplayName()).isFalse();
                },
                reference -> {
                    assertThat(reference.getUrl()).isEqualTo("https://www.djangoproject.com/weblog/2020/feb/03/security-releases/");
                    assertThat(reference.hasDisplayName()).isFalse();
                },
                reference -> {
                    assertThat(reference.getUrl()).isEqualTo("https://www.openwall.com/lists/oss-security/2020/02/03/1");
                    assertThat(reference.hasDisplayName()).isFalse();
                }
        );
    }

    @Test
    void testConvertWithAlias() {
        var componentReportVulnerability = new ComponentReportVulnerability(
                "sonatype-123",
                "sonatype-123",
                "title",
                "description",
                7.8f,
                "(AV:N/AC:L/Au:N/C:N/I:N/A:C)",
                "CWE-666",
                "cve-123",
                "reference",
                Collections.emptyList()
        );

        Vulnerability vulnerability = convert(componentReportVulnerability, false);
        assertThat(vulnerability).isNotNull();
        assertThat(vulnerability.getId()).isEqualTo("sonatype-123");
        assertThat(vulnerability.getSource()).isEqualTo(SOURCE_OSSINDEX);
        assertThat(vulnerability.getAliasesList()).satisfiesExactly(
                alias -> {
                    assertThat(alias.getId()).isEqualTo("cve-123");
                    assertThat(alias.getSource()).isEqualTo(SOURCE_NVD);
                }
        );
    }

    @Test
    void testConvertWithCvssV2() {
        var componentReportVulnerability = new ComponentReportVulnerability(
                "cve",
                "cve",
                "title",
                "description",
                7.8f,
                "(AV:N/AC:L/Au:N/C:N/I:N/A:C)",
                "CWE-666",
                "cve",
                "reference",
                Collections.emptyList()
        );

        Vulnerability vulnerability = convert(componentReportVulnerability, false);
        assertThat(vulnerability).isNotNull();
        assertThat(vulnerability.getRatingsList()).satisfiesExactly(
                rating -> {
                    assertThat(rating.getSource()).isEqualTo(SOURCE_OSSINDEX);
                    assertThat(rating.getMethod()).isEqualTo(SCORE_METHOD_CVSSV2);
                    assertThat(rating.getScore()).isEqualTo(7.8);
                    assertThat(rating.getVector()).isEqualTo("(AV:N/AC:L/Au:N/C:N/I:N/A:C)");
                    assertThat(rating.getSeverity()).isEqualTo(SEVERITY_HIGH);
                }
        );
    }

    @Test
    void testConvertWithoutCvss() {
        var componentReportVulnerability = new ComponentReportVulnerability(
                "cve",
                "cve",
                "title",
                "description",
                null,
                null,
                "CWE-666",
                "cve",
                "reference",
                Collections.emptyList()
        );

        Vulnerability vulnerability = convert(componentReportVulnerability, false);
        assertThat(vulnerability).isNotNull();
        assertThat(vulnerability.getRatingsCount()).isZero();
    }

}
