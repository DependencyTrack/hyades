package org.hyades.client.ossindex;

import org.hyades.config.CircuitBreakerConfig;
import org.hyades.config.OssIndexConfig;
import org.hyades.config.RetryConfig;
import org.hibernate.validator.constraints.URL;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import javax.ws.rs.core.MultivaluedMap;
import java.time.Duration;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

class AuthorizationClientHeaderFactoryTest {

    @ParameterizedTest
    @CsvSource({
            "false, false, false",
            "true, false, false",
            "false, true, false",
            "true, true, true"
    })
    void testUpdate(final boolean isUsernameSet, final boolean isTokenSet, final boolean expectHeader) {
        final var config = new OssIndexConfig() {
            @Override
            public boolean enabled() {
                return false;
            }

            @Override
            public ApiConfig api() {
                return new ApiConfig() {
                    @Override
                    public Optional<@URL String> baseUrl() {
                        return Optional.empty();
                    }

                    @Override
                    public Optional<String> username() {
                        if (isUsernameSet) {
                            return Optional.of("foo@example.com");
                        } else {
                            return Optional.empty();
                        }
                    }

                    @Override
                    public Optional<String> token() {
                        if (isTokenSet) {
                            return Optional.of("token666");
                        } else {
                            return Optional.empty();
                        }
                    }
                };
            }

            @Override
            public Duration batchInterval() {
                return null;
            }

            @Override
            public CircuitBreakerConfig circuitBreaker() {
                return null;
            }

            @Override
            public RetryConfig retry() {
                return null;
            }
        };

        final MultivaluedMap<String, String> headers = new AuthorizationClientHeaderFactory(config).update(null, null);

        if (expectHeader) {
            assertThat(headers).hasSize(1)
                    .hasEntrySatisfying("Authorization", value ->
                            assertThat(value).containsOnly("Basic Zm9vQGV4YW1wbGUuY29tOnRva2VuNjY2"));
        } else {
            assertThat(headers).isEmpty();
        }
    }

}