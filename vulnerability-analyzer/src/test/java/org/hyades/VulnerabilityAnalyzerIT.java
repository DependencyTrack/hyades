package org.hyades;

import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusIntegrationTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.hyades.common.KafkaTopic;
import org.hyades.proto.KafkaProtobufSerde;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanCommand;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.ScanStatus;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@QuarkusIntegrationTest
@QuarkusTestResource(KafkaCompanionResource.class)
@TestProfile(VulnerabilityAnalyzerIT.TestProfile.class)
class VulnerabilityAnalyzerIT {

    public static class TestProfile implements QuarkusTestProfile {

        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "scanner.internal.enabled", "true",
                    "scanner.ossindex.enabled", "false",
                    "scanner.snyk.enabled", "false",
                    "quarkus.flyway.migrate-at-start", "true",
                    "quarkus.kafka.snappy.enabled", "true"
            );
        }
    }

    @InjectKafkaCompanion
    KafkaCompanion kafkaCompanion;

    @Test
    void test() {
        final var component = Component.newBuilder()
                .setUuid(UUID.randomUUID().toString())
                .setCpe("cpe:/a:acme:application:9.1.1")
                .setPurl("pkg:maven/acme/a@9.1.1")
                .build();
        final var scanCommand = ScanCommand.newBuilder()
                .setComponent(component)
                .build();
        final var scanKey = ScanKey.newBuilder()
                .setScanToken(UUID.randomUUID().toString())
                .setComponentUuid(component.getUuid())
                .build();

        kafkaCompanion
                .produce(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanCommand.parser()))
                .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, scanCommand));

        final List<ConsumerRecord<ScanKey, ScanResult>> results = kafkaCompanion
                .consume(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanResult.parser()))
                .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(5))
                .awaitCompletion()
                .getRecords();

        assertThat(results).satisfiesExactlyInAnyOrder(
                record -> {
                    assertThat(record.key()).isEqualTo(scanKey);
                    assertThat(record.value().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                    assertThat(record.value().getScanner()).isEqualTo(Scanner.SCANNER_INTERNAL);
                    assertThat(record.value().getVulnerabilitiesCount()).isZero();
                    assertThat(record.value().hasFailureReason()).isFalse();
                }
        );

    }

}
