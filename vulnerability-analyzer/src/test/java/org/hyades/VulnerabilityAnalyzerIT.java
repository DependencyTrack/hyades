package org.hyades;

import io.quarkus.kafka.client.serialization.ObjectMapperSerde;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusIntegrationTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.hyades.common.KafkaTopic;
import org.hyades.model.AnalyzerIdentity;
import org.hyades.model.Component;
import org.hyades.model.VulnerabilityScanKey;
import org.hyades.model.VulnerabilityScanResult;
import org.hyades.model.VulnerabilityScanStatus;
import org.hyades.serializers.ScanKeySerde;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@QuarkusIntegrationTest
@QuarkusTestResource(KafkaCompanionResource.class)
@TestProfile(VulnerabilityAnalyzerIT.TestProfile.class)
class VulnerabilityAnalyzerIT {

    public static class TestProfile implements QuarkusTestProfile {

        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "scanner.internal.enabled", "true",
                    "scanner.ossindex.enabled", "false",
                    "scanner.snyk.enabled", "false",
                    "quarkus.flyway.migrate-at-start", "true"
            );
        }
    }

    @InjectKafkaCompanion
    KafkaCompanion kafkaCompanion;

    @Test
    void test() {
        final var component = new Component();
        component.setUuid(UUID.randomUUID());
        component.setCpe("cpe:/a:acme:application:9.1.1");
        component.setPurl("pkg:maven/acme/a@9.1.1");
        final var scanKey = new VulnerabilityScanKey(UUID.randomUUID().toString(), component.getUuid());

        kafkaCompanion
                .produce(new ScanKeySerde(), new ObjectMapperSerde<>(Component.class))
                .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, component));

        final List<ConsumerRecord<VulnerabilityScanKey, VulnerabilityScanResult>> results = kafkaCompanion
                .consume(new ScanKeySerde(), new ObjectMapperSerde<>(VulnerabilityScanResult.class))
                .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(5))
                .awaitCompletion()
                .getRecords();

        assertThat(results).satisfiesExactlyInAnyOrder(
                record -> {
                    assertThat(record.key()).isEqualTo(scanKey);
                    assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.SUCCESSFUL);
                    assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.INTERNAL_ANALYZER);
                    assertThat(record.value().vulnerabilities()).isEmpty();
                    assertThat(record.value().failureReason()).isNull();
                }
        );

    }

}
