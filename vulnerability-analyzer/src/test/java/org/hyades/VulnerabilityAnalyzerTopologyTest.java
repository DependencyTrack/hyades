package org.hyades;

import io.quarkus.kafka.client.serialization.ObjectMapperSerde;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusMock;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.hyades.common.KafkaTopic;
import org.hyades.model.*;
import org.hyades.processor.internal.InternalScannerProcessorSupplier;
import org.hyades.processor.ossindex.OssIndexProcessorSupplier;
import org.hyades.processor.snyk.SnykProcessorSupplier;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.Record;
import org.hyades.serializers.ScanKeySerde;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.platform.suite.api.SelectClasses;
import org.junit.platform.suite.api.Suite;

import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.function.Function;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@Suite
@SelectClasses(value = {
        VulnerabilityAnalyzerTopologyTest.MultipleCapableScannersTest.class,
        VulnerabilityAnalyzerTopologyTest.NoCapableScannerTest.class,
        VulnerabilityAnalyzerTopologyTest.AllScannersDisabledTest.class
})
class VulnerabilityAnalyzerTopologyTest {

    @QuarkusTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @TestProfile(MultipleCapableScannersTest.TestProfile.class)
    static class MultipleCapableScannersTest {

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "true",
                        "scanner.ossindex.enabled", "true",
                        "scanner.snyk.enabled", "true"
                );
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        @BeforeAll
        static void beforeAll() {
            final var internalScannerProcessorSupplierMock = mock(InternalScannerProcessorSupplier.class);
            when(internalScannerProcessorSupplierMock.get()).thenAnswer(invocation ->
                    new MockScannerProcessor(scanTask -> VulnerabilityScanResult
                            .builder(scanTask.vulnerabilityScanKey(), AnalyzerIdentity.INTERNAL_ANALYZER)
                            .withStatus(VulnerabilityScanStatus.SUCCESSFUL)
                            .withVulnerabilities(Collections.emptyList())
                            .build()));

            final var ossIndexProcessorSupplierMock = mock(OssIndexProcessorSupplier.class);
            when(ossIndexProcessorSupplierMock.get()).thenAnswer(invocation ->
                    new MockScannerProcessor(scanTask -> VulnerabilityScanResult
                            .builder(scanTask.vulnerabilityScanKey(), AnalyzerIdentity.OSSINDEX_ANALYZER)
                            .withStatus(VulnerabilityScanStatus.FAILED)
                            .withFailureReason("some failure")
                            .build()));

            final var snykProcessorSupplierMock = mock(SnykProcessorSupplier.class);
            when(snykProcessorSupplierMock.get()).thenAnswer(invocation ->
                    new MockScannerProcessor(scanTask -> VulnerabilityScanResult
                            .builder(scanTask.vulnerabilityScanKey(), AnalyzerIdentity.SNYK_ANALYZER)
                            .withStatus(VulnerabilityScanStatus.SUCCESSFUL)
                            .withVulnerabilities(Collections.emptyList())
                            .build()));

            QuarkusMock.installMockForType(internalScannerProcessorSupplierMock, InternalScannerProcessorSupplier.class);
            QuarkusMock.installMockForType(ossIndexProcessorSupplierMock, OssIndexProcessorSupplier.class);
            QuarkusMock.installMockForType(snykProcessorSupplierMock, SnykProcessorSupplier.class);
        }

        @Test
        void test() {
            final var component = new Component();
            component.setUuid(UUID.randomUUID());
            component.setCpe("cpe:/a:acme:application:9.1.1");
            component.setPurl("pkg:maven/acme/a@9.1.1");
            final var scanKey = new VulnerabilityScanKey(UUID.randomUUID().toString(), component.getUuid());

            kafkaCompanion
                    .produce(new ScanKeySerde(), new ObjectMapperSerde<>(Component.class))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, component));

            final List<ConsumerRecord<VulnerabilityScanKey, VulnerabilityScanResult>> results = kafkaCompanion
                    .consume(new ScanKeySerde(), new ObjectMapperSerde<>(VulnerabilityScanResult.class))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 4, Duration.ofSeconds(5))
                    .awaitCompletion()
                    .getRecords();

            assertThat(results).satisfiesExactlyInAnyOrder(
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.SUCCESSFUL);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.INTERNAL_ANALYZER);
                    },
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.FAILED);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.OSSINDEX_ANALYZER);
                    },
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.SUCCESSFUL);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.SNYK_ANALYZER);
                    },
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.COMPLETE);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.NONE);
                    }
            );
        }

    }

    @QuarkusTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @TestProfile(NoCapableScannerTest.TestProfile.class)
    static class NoCapableScannerTest {

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "true",
                        "scanner.ossindex.enabled", "true",
                        "scanner.snyk.enabled", "true"
                );
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        @Test
        void test() {
            final var component = new Component();
            component.setUuid(UUID.randomUUID());
            final var scanKey = new VulnerabilityScanKey(UUID.randomUUID().toString(), component.getUuid());

            kafkaCompanion
                    .produce(new ScanKeySerde(), new ObjectMapperSerde<>(Component.class))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, component));

            final List<ConsumerRecord<VulnerabilityScanKey, VulnerabilityScanResult>> results = kafkaCompanion
                    .consume(new ScanKeySerde(), new ObjectMapperSerde<>(VulnerabilityScanResult.class))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(5))
                    .awaitCompletion()
                    .getRecords();

            assertThat(results).satisfiesExactly(
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.COMPLETE);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.NONE);
                    }
            );
        }

    }

    @QuarkusTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @TestProfile(AllScannersDisabledTest.TestProfile.class)
    static class AllScannersDisabledTest {

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "false",
                        "scanner.ossindex.enabled", "false",
                        "scanner.snyk.enabled", "false"
                );
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        @Test
        void test() throws Exception {
            final var component = new Component();
            component.setUuid(UUID.randomUUID());
            component.setCpe("cpe:/a:acme:application:9.1.1");
            component.setPurl("pkg:maven/acme/a@9.1.1");
            final var scanKey = new VulnerabilityScanKey(UUID.randomUUID().toString(), component.getUuid());

            kafkaCompanion
                    .produce(new ScanKeySerde(), new ObjectMapperSerde<>(Component.class))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, component));

            final List<ConsumerRecord<VulnerabilityScanKey, VulnerabilityScanResult>> results = kafkaCompanion
                    .consume(new ScanKeySerde(), new ObjectMapperSerde<>(VulnerabilityScanResult.class))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(5))
                    .awaitCompletion()
                    .getRecords();

            assertThat(results).satisfiesExactly(
                    record -> {
                        assertThat(record.key()).isEqualTo(scanKey);
                        assertThat(record.value().key()).isEqualTo(scanKey);
                        assertThat(record.value().status()).isEqualTo(VulnerabilityScanStatus.COMPLETE);
                        assertThat(record.value().scanner()).isEqualTo(AnalyzerIdentity.NONE);
                    }
            );
        }

    }

    private static class MockScannerProcessor extends ContextualProcessor<String, ScanTask, String, VulnerabilityScanResult> {

        private final Function<ScanTask, VulnerabilityScanResult> processorFunction;

        private MockScannerProcessor(final Function<ScanTask, VulnerabilityScanResult> processorFunction) {
            this.processorFunction = processorFunction;
        }

        @Override
        public void process(final Record<String, ScanTask> record) {
            context().forward(record.withValue(processorFunction.apply(record.value())));
        }

    }

}