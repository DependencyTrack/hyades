/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.util;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.assertj.core.api.Assertions.assertThat;

class PurlUtilsTest {

    @Test
    void testParsePurlWithValidPurl() {
        assertThat(PurlUtils.parsePurl("pkg:maven/foo/bar@1.2.3")).hasValueSatisfying(
                purl -> {
                    assertThat(purl.getType()).isEqualTo("maven");
                    assertThat(purl.getNamespace()).isEqualTo("foo");
                    assertThat(purl.getName()).isEqualTo("bar");
                    assertThat(purl.getVersion()).isEqualTo("1.2.3");
                }
        );
    }

    @Test
    void testParsePurlWithInvalidPurl() {
        assertThat(PurlUtils.parsePurl("invalid")).isEmpty();
    }

    @ParameterizedTest
    @CsvSource(value = {
            "bitbucket, true",
            "cargo, true",
            "composer, true",
            "deb, true",
            "docker, true",
            "gem, true",
            "generic, true",
            "github, true",
            "golang, true",
            "hex, true",
            "maven, true",
            "npm, true",
            "nuget, true",
            "pypi, true",
            "rpm, true",
            "swift, false"
    })
    void testIsStandardPurlType(final String value, final boolean expectedResult) {
        assertThat(PurlUtils.isStandardPackageUrlType(value)).isEqualTo(expectedResult);

    }
}