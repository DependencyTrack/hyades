/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.ossindex;

import jakarta.ws.rs.core.MultivaluedMap;
import org.dependencytrack.vulnanalyzer.config.OssIndexConfig;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.mockito.Mockito;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class AuthorizationClientHeaderFactoryTest {

    @ParameterizedTest
    @CsvSource({
            "false, false, false",
            "true, false, false",
            "false, true, false",
            "true, true, true"
    })
    void testUpdate(final boolean isUsernameSet, final boolean isTokenSet, final boolean expectHeader) {
        final var configMock = Mockito.mock(OssIndexConfig.class);
        final var apiConfigMock = mock(OssIndexConfig.ApiConfig.class);
        when(apiConfigMock.username()).thenAnswer(invocation -> {
            if (isUsernameSet) {
                return Optional.of("foo@example.com");
            } else {
                return Optional.empty();
            }
        });
        when(apiConfigMock.token()).thenAnswer(invocation -> {
            if (isTokenSet) {
                return Optional.of("token666");
            } else {
                return Optional.empty();
            }
        });
        when(configMock.api()).thenReturn(apiConfigMock);

        final MultivaluedMap<String, String> headers = new AuthorizationClientHeaderFactory(configMock).update(null, null);

        if (expectHeader) {
            assertThat(headers).hasSize(1)
                    .hasEntrySatisfying("Authorization", value ->
                            assertThat(value).containsOnly("Basic Zm9vQGV4YW1wbGUuY29tOnRva2VuNjY2"));
        } else {
            assertThat(headers).isEmpty();
        }
    }

}