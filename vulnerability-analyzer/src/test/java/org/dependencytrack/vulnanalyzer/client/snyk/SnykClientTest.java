/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.snyk;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.common.ResourceArg;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import jakarta.inject.Inject;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.MediaType;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.dependencytrack.vulnanalyzer.util.WireMockTestResource;
import org.dependencytrack.vulnanalyzer.util.WireMockTestResource.InjectWireMock;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.anyUrl;
import static com.github.tomakehurst.wiremock.client.WireMock.containing;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;
import static com.github.tomakehurst.wiremock.client.WireMock.matching;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static com.github.tomakehurst.wiremock.http.Body.fromJsonBytes;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.junit.Assert.assertThrows;


@QuarkusTest
@TestProfile(SnykClientTest.TestProfile.class)
@QuarkusTestResource(
        value = WireMockTestResource.class,
        initArgs = @ResourceArg(name = "serverUrlProperty", value = "scanner.snyk.api.baseurl")
)
class SnykClientTest {

    public static class TestProfile implements QuarkusTestProfile {
        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "scanner.snyk.enabled", "true",
                    "scanner.snyk.api.org-id", "test-org-id",
                    "scanner.snyk.api.tokens", "token-1,token-2",
                    "quarkus.kafka.snappy.enabled", "false"
            );
        }
    }

    @InjectWireMock
    WireMockServer wireMockServer;

    @Inject
    @RestClient
    SnykClient snykClient;

    @AfterEach
    void afterEach() {
        wireMockServer.resetAll();
    }

    @Test
    void testGetIssuesUsingBatchApi() throws Exception {
        // Have the Snyk API return one issue for the provided PURL
        wireMockServer.stubFor(post(urlPathMatching("/rest/orgs/[^/]+/packages/issues"))
                .withRequestBody(equalToJson("{\"data\":{\"attributes\":" +
                        "{\"purls\":[\"pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0\"," +
                        "\"pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4\"]}}}"))
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_OK)
                        .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                        .withResponseBody(fromJsonBytes(getSnykResponseTestData("multiple-issues-batch-response.json")))));

        final Page<Issue> issuePage = snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0",
                "pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4")));

        // Verify that we sent the request in the correct format
        wireMockServer.verify(postRequestedFor(urlPathMatching("/rest/orgs/test-org-id/packages/issues"))
                .withQueryParam("version", matching("\\d{4}-\\d{2}-\\d{2}~experimental"))
                .withHeader(HttpHeaders.AUTHORIZATION, matching("token token-\\d"))
                .withHeader(HttpHeaders.ACCEPT, equalTo("application/vnd.api+json"))
                .withHeader(HttpHeaders.USER_AGENT, containing(System.getProperty("os.arch") + "; ")));

        // Verify that the response data is deserialized correctly
        assertThat(issuePage).isNotNull();
        assertThat(issuePage.data()).hasSize(3);
        assertThat(issuePage.meta()).isNull();

        assertFirstIssueInPage(issuePage);
        assertSecondIssueInPage(issuePage);
        assertThirdIssueInPage(issuePage);
    }

    @Test
    void testGetIssuesUsingBatchApiWillReturn500WhenPurlInBatchExceedLimit() throws Exception {
        // Have the Snyk API return one issue for the provided PURL
        wireMockServer.stubFor(post(urlPathMatching("/rest/orgs/[^/]+/packages/issues"))
                .withRequestBody(equalToJson("{\"data\":{\"attributes\":" +
                        "{\"purls\":[\"pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0\"," +
                        "\"pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4\"]}}}"))
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR)
                        .withHeader(HttpHeaders.CONTENT_TYPE, "application/vnd.api+json; charset=utf-8")
                        .withHeader("snyk-request-id", "snykRequestId666")
                        .withResponseBody(fromJsonBytes(getSnykResponseTestData("error-response-500.json")))));

        WebApplicationException thrown = assertThrows(
                WebApplicationException.class,
                () -> snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0",
                        "pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4")))
        );

        // Verify that we sent the request in the correct format
        wireMockServer.verify(postRequestedFor(urlPathMatching("/rest/orgs/test-org-id/packages/issues"))
                .withQueryParam("version", matching("\\d{4}-\\d{2}-\\d{2}~experimental"))
                .withHeader(HttpHeaders.AUTHORIZATION, matching("token token-\\d"))
                .withHeader(HttpHeaders.ACCEPT, equalTo("application/vnd.api+json"))
                .withHeader(HttpHeaders.USER_AGENT, containing(System.getProperty("os.arch") + "; ")));

        assertThat(thrown)
                .hasMessageContaining("requestId=snykRequestId666")
                .hasMessageContaining("""
                        {
                          "jsonapi": {
                            "version": "1.0"
                          },
                          "errors": [
                            {
                              "id": "0d7d9f37-b729-4dab-8356-1fd22520fdcc",
                              "detail": "An unknown error was encountered while handling your request. Please contact support.",
                              "status": "500"
                            }
                          ]
                        }""");
    }

    @Test
    void testGetIssuesUsingBatchApiWillReturn400WhenPurlIsInvalid() throws Exception {
        // Have the Snyk API return one issue for the provided PURL
        wireMockServer.stubFor(post(urlPathMatching("/rest/orgs/[^/]+/packages/issues"))
                .withRequestBody(equalToJson("{\"data\":{\"attributes\":" +
                        "{\"purls\":[\":npm/negotiator@0.6.3\"]}}}"))
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_BAD_REQUEST)
                        .withHeader(HttpHeaders.CONTENT_TYPE, "application/vnd.api+json; charset=utf-8")
                        .withHeader("snyk-request-id", "snykRequestId666")
                        .withResponseBody(fromJsonBytes(getSnykResponseTestData("error-response-400.json")))));

        WebApplicationException thrown = assertThrows(
                WebApplicationException.class,
                () -> snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of(":npm/negotiator@0.6.3")))
        );

        // Verify that we sent the request in the correct format
        wireMockServer.verify(postRequestedFor(urlPathMatching("/rest/orgs/test-org-id/packages/issues"))
                .withQueryParam("version", matching("\\d{4}-\\d{2}-\\d{2}~experimental"))
                .withHeader(HttpHeaders.AUTHORIZATION, matching("token token-\\d"))
                .withHeader(HttpHeaders.ACCEPT, equalTo("application/vnd.api+json"))
                .withHeader(HttpHeaders.USER_AGENT, containing(System.getProperty("os.arch") + "; ")));

        assertThat(thrown)
                .hasMessageContaining("requestId=snykRequestId666")
                .hasMessageContaining("""
                {
                  "jsonapi": {
                    "version": "1.0"
                  },
                  "errors": [
                    {
                      "id": "54858a1a-5bc1-40d8-bc3b-8fbee5cfe538",
                      "links": {
                        "about": "https://docs.snyk.io/more-info/error-catalog#snyk-ossi-2010"
                      },
                      "status": "400",
                      "code": "SNYK-OSSI-2010",
                      "title": "Invalid PURL has been provided",
                      "detail": ":npm/negotiator@0.6.3 is not a valid purl.",
                      "meta": {
                        "links": [
                          "https://github.com/package-url/purl-spec/blob/master/PURL-SPECIFICATION.rst"
                        ],
                        "purl": ":npm/negotiator@0.6.3"
                      }
                    }
                  ]
                }""");
    }

    @ParameterizedTest
    @ValueSource(ints = {
            HttpStatus.SC_NOT_MODIFIED,
            HttpStatus.SC_BAD_REQUEST,
            HttpStatus.SC_NOT_FOUND,
            HttpStatus.SC_TOO_MANY_REQUESTS,
            HttpStatus.SC_INTERNAL_SERVER_ERROR
    })
    void testGetIssuesWithUnexpectedResponse(final int responseCode) {
        wireMockServer.stubFor(post(urlPathMatching("/rest/orgs/[^/]+/packages/issues"))
                .willReturn(aResponse()
                        .withHeader(HttpHeaders.CONTENT_TYPE, "application/vnd.api+json; charset=utf-8")
                        .withStatus(responseCode)));

        assertThatExceptionOfType(WebApplicationException.class)
                .isThrownBy(() -> snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"))))
                .satisfies(exception -> {
                    assertThat(exception.getResponse()).isNotNull();
                    assertThat(exception.getResponse().getStatus()).isEqualTo(responseCode);
                });
    }

    @Test
    void testGetIssuesWhenTimingOut() {
        wireMockServer.stubFor(post(anyUrl())
                .willReturn(aResponse()
                        .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                        .withFixedDelay(5_000)));

        Exception exception = assertThrows(ProcessingException.class,
                () -> snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"))));

        assertThat(exception.getMessage()).contains("java.net.SocketTimeoutException: Read timed out");
        // There should be no automatic retries.
        wireMockServer.verify(1, postRequestedFor(anyUrl()));
    }

    @Test
    void testGetIssuesWithMultipleTokens() throws Exception {

        wireMockServer.stubFor(post(anyUrl())
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_NOT_FOUND)));

        final var executor = Executors.newFixedThreadPool(5);
        final var countDownLatch = new CountDownLatch(20);
        try {
            for (int i = 0; i < 20; i++) {
                executor.submit(() -> {
                    try {
                        snykClient.getIssues("test-org-id", "2023-01-04~experimental", createRequest(List.of("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0")));
                    } catch (Exception e) {
                        Assertions.fail(e);
                    } finally {
                        countDownLatch.countDown();
                    }
                });
            }
            assertThat(countDownLatch.await(15, TimeUnit.SECONDS)).isTrue();
        } finally {
            executor.shutdown();
        }

        // There should be an even distribution of token usage across all requests.
        wireMockServer.verify(10, postRequestedFor(anyUrl())
                .withHeader(HttpHeaders.AUTHORIZATION, WireMock.equalTo("token token-1")));
        wireMockServer.verify(10, postRequestedFor(anyUrl())
                .withHeader(HttpHeaders.AUTHORIZATION, WireMock.equalTo("token token-2")));
    }

    private static void assertFirstIssueInPage(Page<Issue> issuePage) {
        final PageData<Issue> pageData = issuePage.data().get(0);
        assertThat(pageData.type()).isEqualTo("issue");
        assertThat(pageData.id()).isEqualTo("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135");

        final Issue issue = pageData.attributes();
        assertThat(issue).isNotNull();
        assertThat(issue.type()).isEqualTo("package_vulnerability");
        assertThat(issue.createdAt()).isEqualTo("2022-10-31T11:25:51.137662Z");
        assertThat(issue.updatedAt()).isEqualTo("2022-12-04T10:33:09.280719Z");

        assertThat(issue.problems()).hasSize(7);

        assertThat(issue.severities()).satisfiesExactly(
                severity -> {
                    assertThat(severity.level()).isEqualTo("medium");
                    assertThat(severity.score()).isEqualTo(5.3f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.SNYK);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.NVD);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.REDHAT);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                }
        );

        assertThat(issue.coordinates()).isNotNull();
        assertThat(issue.coordinates()).satisfiesExactly(
                coordinate -> {
                    assertThat(coordinate.representations()).isNotNull();
                    assertThat(coordinate.representations()).hasSize(2);
                    assertThat(coordinate.representations().get(0).resourcePath()).isEqualTo("[,5.0.4),[6.0.0.pr1,6.0.4)");

                    Package pkg = coordinate.representations().get(1).pkg();
                    assertThat(pkg.name()).isEqualTo("woodstox-core");
                    assertThat(pkg.type()).isEqualTo("maven");
                    assertThat(pkg.url()).isEqualTo("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");
                    assertThat(pkg.version()).isEqualTo("5.0.0");
                });

        assertThat(issue.slots()).isNotNull();
        assertThat(issue.slots().references()).satisfiesExactly(
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/issues/157");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/x-stream/xstream/issues/304%23issuecomment-1254647926");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub PR");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/pull/159");
                }
        );
    }

    private static void assertSecondIssueInPage(Page<Issue> issuePage) {
        final PageData<Issue> pageData = issuePage.data().get(1);
        assertThat(pageData.type()).isEqualTo("issue");
        assertThat(pageData.id()).isEqualTo("SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038426");

        final Issue issue = pageData.attributes();
        assertThat(issue).isNotNull();
        assertThat(issue.type()).isEqualTo("package_vulnerability");
        assertThat(issue.createdAt()).isEqualTo("2022-10-02T09:41:44.046865Z");
        assertThat(issue.updatedAt()).isEqualTo("2022-11-28T01:11:01.289734Z");

        assertThat(issue.problems()).hasSize(2);

        assertThat(issue.severities()).satisfiesExactly(
                severity -> {
                    assertThat(severity.level()).isEqualTo("medium");
                    assertThat(severity.score()).isEqualTo(5.9f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.SNYK);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.NVD);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.REDHAT);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                },
                severity -> {
                    assertThat(severity.level()).isEqualTo("high");
                    assertThat(severity.score()).isEqualTo(7.5f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.SUSE);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                }
        );

        assertThat(issue.coordinates()).isNotNull();
        assertThat(issue.coordinates()).satisfiesExactly(
                coordinate -> {
                    assertThat(coordinate.representations()).isNotNull();
                    assertThat(coordinate.representations()).hasSize(2);
                    assertThat(coordinate.representations().get(0).resourcePath()).isEqualTo("[,2.12.7.1),[2.13.0,2.13.4.2)");

                    Package pkg = coordinate.representations().get(1).pkg();
                    assertThat(pkg.name()).isEqualTo("jackson-databind");
                    assertThat(pkg.type()).isEqualTo("maven");
                    assertThat(pkg.url()).isEqualTo("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4");
                    assertThat(pkg.version()).isEqualTo("2.13.4");
                });

        assertThat(issue.slots()).isNotNull();
        assertThat(issue.slots().references()).satisfiesExactly(
                reference -> {
                    assertThat(reference.title()).isEqualTo("Chromium Bugs");
                    assertThat(reference.url()).isEqualTo("https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("Documentation");
                    assertThat(reference.url()).isEqualTo("https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/DeserializationFeature.html%23UNWRAP_SINGLE_VALUE_ARRAYS");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Commit");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Commit");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/jackson-databind/issues/3590");
                }
        );
    }

    private static void assertThirdIssueInPage(Page<Issue> issuePage) {
        final PageData<Issue> pageData = issuePage.data().get(2);
        assertThat(pageData.type()).isEqualTo("issue");
        assertThat(pageData.id()).isEqualTo("SNYK-JAVA-COMFASTERXMLWOODSTOX-2928754");

        final Issue issue = pageData.attributes();
        assertThat(issue).isNotNull();
        assertThat(issue.type()).isEqualTo("package_vulnerability");
        assertThat(issue.createdAt()).isEqualTo("2022-06-16T13:55:07.780271Z");
        assertThat(issue.updatedAt()).isEqualTo("2022-06-16T14:00:24.320943Z");

        assertThat(issue.problems()).hasSize(1);

        assertThat(issue.severities()).satisfiesExactly(
                severity -> {
                    assertThat(severity.level()).isEqualTo("critical");
                    assertThat(severity.score()).isEqualTo(9.4f);
                    assertThat(severity.source()).isEqualTo(SeveritySource.SNYK);
                    assertThat(severity.vector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L");
                }
        );

        assertThat(issue.coordinates()).isNotNull();
        assertThat(issue.coordinates()).satisfiesExactly(
                coordinate -> {
                    assertThat(coordinate.representations()).isNotNull();
                    assertThat(coordinate.representations()).hasSize(2);
                    assertThat(coordinate.representations().get(0).resourcePath()).isEqualTo("[,5.3.0)");

                    Package pkg = coordinate.representations().get(1).pkg();
                    assertThat(pkg.name()).isEqualTo("woodstox-core");
                    assertThat(pkg.type()).isEqualTo("maven");
                    assertThat(pkg.url()).isEqualTo("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");
                    assertThat(pkg.version()).isEqualTo("5.0.0");
                });

        assertThat(issue.slots()).isNotNull();
        assertThat(issue.slots().references()).satisfiesExactly(
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Commit");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/commit/7937f97c638ef8afd385ebf4a675a9b096ccdd57");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/issues/50");
                },
                reference -> {
                    assertThat(reference.title()).isEqualTo("GitHub Issue");
                    assertThat(reference.url()).isEqualTo("https://github.com/FasterXML/woodstox/issues/61");
                }
        );
    }

    private byte[] getSnykResponseTestData(final String name) throws IOException {
        final URL resourceUrl = getClass().getClassLoader().getResource(Paths.get("snyk", name).toString());
        assertThat(resourceUrl).isNotNull();

        try (final InputStream inputStream = resourceUrl.openStream()) {
            return inputStream.readAllBytes();
        }
    }

    private ReportRequest createRequest(Collection<String> purls) {
        var attributes = Map.of("purls", purls);
        PageData data = new PageData(null, null, attributes);
        return new ReportRequest(data);
    }
}
