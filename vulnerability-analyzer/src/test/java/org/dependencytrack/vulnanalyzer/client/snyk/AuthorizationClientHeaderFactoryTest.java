package org.dependencytrack.vulnanalyzer.client.snyk;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedMap;
import org.junit.jupiter.api.Test;

import java.util.Map;
import java.util.function.Supplier;

import static org.assertj.core.api.Assertions.assertThat;

@QuarkusTest
@TestProfile(AuthorizationClientHeaderFactoryTest.TestProfile.class)
class AuthorizationClientHeaderFactoryTest {


    public static class TestProfile implements QuarkusTestProfile {
        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "quarkus.application.name", "test application",
                    "quarkus.application.version", "1"
            );
        }
    }

    @Test
    void testUpdate() {

        Supplier<String> apiTokenSupplier = () -> "some-token-1";

        MultivaluedMap<String, String> headers = new AuthorizationClientHeaderFactory(apiTokenSupplier).update(null, null);

        assertThat(headers).hasSize(4)
                .hasEntrySatisfying("Authorization", value ->
                        assertThat(value).containsOnly("token some-token-1"))
                .hasEntrySatisfying("Accept", value ->
                        assertThat(value).containsOnly("application/vnd.api+json"))
                .hasEntrySatisfying("Content-Type", value ->
                        assertThat(value).containsOnly("application/vnd.api+json"))
                .hasEntrySatisfying(HttpHeaders.USER_AGENT, value -> assertThat(value.get(0)).contains("QuarkusHttpClient/"));

    }
}
