/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer;

import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.http.Body;
import com.github.tomakehurst.wiremock.http.ContentTypeHeader;
import io.quarkiverse.wiremock.devservice.ConnectWireMock;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusIntegrationTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import jakarta.ws.rs.core.MediaType;
import org.apache.http.HttpHeaders;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.cyclonedx.proto.v1_6.ScoreMethod;
import org.cyclonedx.proto.v1_6.Severity;
import org.dependencytrack.common.KafkaTopic;
import org.dependencytrack.proto.KafkaProtobufSerde;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanCommand;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.ScanResult;
import org.dependencytrack.proto.vulnanalysis.v1.ScanStatus;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.junit.jupiter.api.Test;
import org.junit.platform.suite.api.SelectClasses;
import org.junit.platform.suite.api.Suite;

import java.io.IOException;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.delete;
import static com.github.tomakehurst.wiremock.client.WireMock.post;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static org.apache.commons.io.IOUtils.resourceToByteArray;
import static org.assertj.core.api.Assertions.assertThat;

@Suite
@SelectClasses(value = {
        VulnerabilityAnalyzerIT.ScannerInternal.class,
        VulnerabilityAnalyzerIT.ScannerOssindex.class,
        VulnerabilityAnalyzerIT.ScannerSnyk.class,
        VulnerabilityAnalyzerIT.ScannerTrivy.class
})
class VulnerabilityAnalyzerIT {

    @QuarkusIntegrationTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @TestProfile(ScannerInternal.TestProfile.class)
    static class ScannerInternal {
        public static class TestProfile implements QuarkusTestProfile {

            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "true",
                        "scanner.ossindex.enabled", "false",
                        "scanner.trivy.enabled", "false",
                        "scanner.snyk.enabled", "false",
                        "quarkus.kafka.snappy.enabled", "true"
                );
            }

            @Override
            public List<TestResourceEntry> testResources() {
                return List.of(
                        new TestResourceEntry(KafkaCompanionResource.class));
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        @Test
        void test() {
            final var component = Component.newBuilder()
                    .setUuid(UUID.randomUUID().toString())
                    .setPurl("pkg:maven/org.yaml/snakeyaml@1.33")
                    .build();
            final var scanCommand = ScanCommand.newBuilder()
                    .setComponent(component)
                    .build();
            final var scanKey = ScanKey.newBuilder()
                    .setScanToken(UUID.randomUUID().toString())
                    .setComponentUuid(component.getUuid())
                    .build();

            kafkaCompanion
                    .produce(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanCommand.parser()))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, scanCommand));

            final ConsumerRecord<ScanKey, ScanResult> result = kafkaCompanion
                    .consume(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanResult.parser()))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(5))
                    .awaitCompletion()
                    .getFirstRecord();

            assertThat(result.key()).isEqualTo(scanKey);
            assertThat(result.value().getKey()).isEqualTo(scanKey);
            assertThat(result.value().getScannerResultsList()).satisfiesExactly(
                    scannerResult -> {
                        assertThat(scannerResult.getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                        assertThat(scannerResult.getScanner()).isEqualTo(Scanner.SCANNER_INTERNAL);
                        assertThat(scannerResult.getBom().getVulnerabilitiesCount()).isZero();
                        assertThat(scannerResult.hasFailureReason()).isFalse();
                    }
            );
        }
    }

    @QuarkusIntegrationTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @ConnectWireMock
    @TestProfile(ScannerOssindex.TestProfile.class)
    static class ScannerOssindex {
        public static class TestProfile implements QuarkusTestProfile {

            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "false",
                        "scanner.ossindex.enabled", "true",
                        "scanner.snyk.enabled", "false",
                        "scanner.trivy.enabled", "false",
                        "quarkus.kafka.snappy.enabled", "true",
                        "scanner.ossindex.batch-size", "1",
                        "scanner.ossindex.api.baseurl", "http://localhost:${quarkus.wiremock.devservices.port}"
                );
            }

            @Override
            public List<TestResourceEntry> testResources() {
                return List.of(
                        new TestResourceEntry(KafkaCompanionResource.class));
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        WireMock wireMock;

        @Test
        void test() throws IOException {
            final var component = Component.newBuilder()
                    .setUuid(UUID.randomUUID().toString())
                    .setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.1")
                    .build();
            final var scanCommand = ScanCommand.newBuilder()
                    .setComponent(component)
                    .build();
            final var scanKey = ScanKey.newBuilder()
                    .setScanToken(UUID.randomUUID().toString())
                    .setComponentUuid(component.getUuid())
                    .build();

            wireMock.register(post(urlPathMatching("/.*"))
                    .willReturn(aResponse()
                            .withStatus(200)
                            .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                            .withResponseBody(Body.ofBinaryOrText(resourceToByteArray("/ossindex/one-component-one-issue-response.json"), new ContentTypeHeader(MediaType.APPLICATION_OCTET_STREAM)))));

            kafkaCompanion
                    .produce(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanCommand.parser()))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, scanCommand));

            final ConsumerRecord<ScanKey, ScanResult> result = kafkaCompanion
                    .consume(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanResult.parser()))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(15))
                    .awaitCompletion()
                    .getFirstRecord();

            assertThat(result.key()).isEqualTo(scanKey);
            assertThat(result.value().getKey()).isEqualTo(scanKey);
            assertThat(result.value().getScannerResultsList()).satisfiesExactly(
                    scannerResult -> {
                        assertThat(scannerResult.getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                        assertThat(scannerResult.getScanner()).isEqualTo(Scanner.SCANNER_OSSINDEX);
                        assertThat(scannerResult.getBom().getVulnerabilitiesCount()).isEqualTo(1);
                        assertThat(scannerResult.hasFailureReason()).isFalse();
                        var vuln = scannerResult.getBom().getVulnerabilities(0);
                        assertThat(vuln.getId()).isEqualTo("CVE-2020-36518");
                        assertThat(vuln.getSource().getName()).isEqualTo("NVD");
                        assertThat(vuln.getProperties(0).getName()).isEqualTo("dependency-track:vuln:title");
                        assertThat(vuln.getProperties(0).getValue()).isEqualTo("[CVE-2020-36518] CWE-787: Out-of-bounds Write");
                        assertThat(vuln.getDescription()).startsWith("jackson-databind");
                        var rating = vuln.getRatings(0);
                        assertThat(rating.getSource().getName()).isEqualTo("OSSINDEX");
                        assertThat(rating.getScore()).isEqualTo(7.5);
                        assertThat(rating.getMethod()).isEqualTo(ScoreMethod.SCORE_METHOD_CVSSV31);
                        assertThat(rating.getVector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                        assertThat(rating.getSeverity()).isEqualTo(Severity.SEVERITY_HIGH);
                        assertThat(vuln.getCwes(0)).isEqualTo(787);
                        assertThat(vuln.getAdvisoriesCount()).isEqualTo(3);
                    }
            );
        }
    }

    @QuarkusIntegrationTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @ConnectWireMock
    @TestProfile(ScannerSnyk.TestProfile.class)
    static class ScannerSnyk {
        public static class TestProfile implements QuarkusTestProfile {

            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "false",
                        "scanner.ossindex.enabled", "false",
                        "scanner.trivy.enabled", "false",
                        "scanner.snyk.enabled", "true",
                        "quarkus.kafka.snappy.enabled", "true",
                        "scanner.snyk.api.org-id", "org-id",
                        "scanner.snyk.api.tokens", "api-token",
                        "scanner.snyk.alias-sync-enabled", "true",
                        "scanner.snyk.api.baseurl", "http://localhost:${quarkus.wiremock.devservices.port}"
                );
            }

            @Override
            public List<TestResourceEntry> testResources() {
                return List.of(
                        new TestResourceEntry(KafkaCompanionResource.class));
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        WireMock wireMock;

        @Test
        void test() throws IOException {
            final var component = Component.newBuilder()
                    .setUuid(UUID.randomUUID().toString())
                    .setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.4")
                    .build();
            final var scanCommand = ScanCommand.newBuilder()
                    .setComponent(component)
                    .build();
            final var scanKey = ScanKey.newBuilder()
                    .setScanToken(UUID.randomUUID().toString())
                    .setComponentUuid(component.getUuid())
                    .build();

            wireMock.register(post(urlPathMatching("/.*"))
                    .willReturn(aResponse()
                            .withStatus(200)
                            .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                            .withResponseBody(Body.ofBinaryOrText(resourceToByteArray("/snyk/one-issue-response.json"), new ContentTypeHeader(MediaType.APPLICATION_OCTET_STREAM)))));

            kafkaCompanion
                    .produce(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanCommand.parser()))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, scanCommand));

            final ConsumerRecord<ScanKey, ScanResult> result = kafkaCompanion
                    .consume(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanResult.parser()))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(15))
                    .awaitCompletion()
                    .getFirstRecord();

            assertThat(result.key()).isEqualTo(scanKey);
            assertThat(result.value().getKey()).isEqualTo(scanKey);
            assertThat(result.value().getScannerResultsList()).satisfiesExactly(
                    scannerResult -> {
                        assertThat(scannerResult.getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                        assertThat(scannerResult.getScanner()).isEqualTo(Scanner.SCANNER_SNYK);
                        assertThat(scannerResult.getBom().getVulnerabilitiesCount()).isEqualTo(1);
                        assertThat(scannerResult.hasFailureReason()).isFalse();
                        var vuln = scannerResult.getBom().getVulnerabilities(0);
                        assertThat(vuln.getId()).isEqualTo("SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038426");
                        assertThat(vuln.getSource().getName()).isEqualTo("SNYK");
                        assertThat(vuln.getProperties(0).getName()).isEqualTo("dependency-track:vuln:title");
                        assertThat(vuln.getProperties(0).getValue()).isEqualTo("Denial of Service (DoS)");
                        assertThat(vuln.getDescription()).startsWith("## Overview");
                        var rating = vuln.getRatings(0);
                        assertThat(rating.getSource().getName()).isEqualTo("NVD");
                        assertThat(rating.getScore()).isEqualTo(7.5);
                        assertThat(rating.getSeverity()).isEqualTo(Severity.SEVERITY_HIGH);
                        assertThat(rating.getMethod()).isEqualTo(ScoreMethod.SCORE_METHOD_CVSSV31);
                        assertThat(rating.getVector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H");
                        assertThat(vuln.getCwes(0)).isEqualTo(400);
                        assertThat(vuln.getAdvisoriesCount()).isEqualTo(5);
                        assertThat(vuln.getReferences(0).getId()).isEqualTo("CVE-2022-42003");
                        assertThat(vuln.getReferences(0).getSource().getName()).isEqualTo("NVD");
                        assertThat(vuln.getRecommendation()).isEqualTo("Upgrade the package version to 2.12.7.1,2.13.4.2 to fix this vulnerability");
                    }
            );
        }
    }

    @QuarkusIntegrationTest
    @QuarkusTestResource(KafkaCompanionResource.class)
    @ConnectWireMock
    @TestProfile(ScannerTrivy.TestProfile.class)
    static class ScannerTrivy {
        public static class TestProfile implements QuarkusTestProfile {

            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "false",
                        "scanner.ossindex.enabled", "false",
                        "scanner.trivy.enabled", "true",
                        "scanner.snyk.enabled", "false",
                        "quarkus.kafka.snappy.enabled", "true",
                        "scanner.trivy.api.token", "api-token",
                        "scanner.trivy.api.baseurl", "http://localhost:${quarkus.wiremock.devservices.port}"
                );
            }

            @Override
            public List<TestResourceEntry> testResources() {
                return List.of(
                        new TestResourceEntry(KafkaCompanionResource.class));
            }
        }

        @InjectKafkaCompanion
        KafkaCompanion kafkaCompanion;

        WireMock wireMock;

        @Test
        void test() throws IOException {
            final var component = Component.newBuilder()
                    .setUuid(UUID.randomUUID().toString())
                    .setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0")
                    .build();
            final var scanCommand = ScanCommand.newBuilder()
                    .setComponent(component)
                    .build();
            final var scanKey = ScanKey.newBuilder()
                    .setScanToken(UUID.randomUUID().toString())
                    .setComponentUuid(component.getUuid())
                    .build();

            wireMock.register(post(urlPathMatching("/twirp/trivy.scanner.v1.Scanner/Scan"))
                    .willReturn(aResponse()
                            .withStatus(200)
                            .withHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                            .withResponseBody(Body.ofBinaryOrText(resourceToByteArray("/trivy/single-result.json"), new ContentTypeHeader(MediaType.APPLICATION_OCTET_STREAM)))));

            wireMock.register(post(urlPathMatching("/twirp/trivy.cache.v1.Cache/PutBlob"))
                    .willReturn(aResponse()
                            .withStatus(200)));

            wireMock.register(delete(urlPathMatching("/twirp/trivy.cache.v1.Cache/DeleteBlobs"))
                    .willReturn(aResponse()
                            .withStatus(200)));

            kafkaCompanion
                    .produce(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanCommand.parser()))
                    .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), scanKey, scanCommand));

            final ConsumerRecord<ScanKey, ScanResult> result = kafkaCompanion
                    .consume(new KafkaProtobufSerde<>(ScanKey.parser()), new KafkaProtobufSerde<>(ScanResult.parser()))
                    .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1, Duration.ofSeconds(15))
                    .awaitCompletion()
                    .getFirstRecord();

            assertThat(result.key()).isEqualTo(scanKey);
            assertThat(result.value().getKey()).isEqualTo(scanKey);
            assertThat(result.value().getScannerResultsList()).satisfiesExactly(
                    scannerResult -> {
                        assertThat(scannerResult.getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                        assertThat(scannerResult.getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
                        assertThat(scannerResult.getBom().getVulnerabilitiesCount()).isEqualTo(1);
                        assertThat(scannerResult.hasFailureReason()).isFalse();
                        var vuln = scannerResult.getBom().getVulnerabilities(0);
                        assertThat(vuln.getId()).isEqualTo("CVE-2022-40152");
                        assertThat(vuln.getSource().getName()).isEqualTo("NVD");
                        assertThat(vuln.getProperties(0).getName()).isEqualTo("dependency-track:vuln:title");
                        assertThat(vuln.getProperties(0).getValue()).isEqualTo("woodstox-core: woodstox to serialise XML data was vulnerable to Denial of Service attacks");
                        assertThat(vuln.getDescription()).startsWith("Those using Woodstox");
                        var rating = vuln.getRatings(0);
                        assertThat(rating.getSource().getName()).isEqualTo("GITHUB");
                        assertThat(rating.getScore()).isEqualTo(6.5);
                        assertThat(rating.getSeverity()).isEqualTo(Severity.SEVERITY_MEDIUM);
                        assertThat(rating.getMethod()).isEqualTo(ScoreMethod.SCORE_METHOD_CVSSV3);
                        assertThat(rating.getVector()).isEqualTo("CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H");
                        assertThat(vuln.getCwesCount()).isEqualTo(2);
                        assertThat(vuln.getPublished()).isNotNull();
                        assertThat(vuln.getUpdated()).isNotNull();
                        assertThat(vuln.getAdvisoriesCount()).isEqualTo(10);
                        assertThat(vuln.getReferencesCount()).isZero();
                        assertThat(vuln.getRecommendation()).isEqualTo("Fixed version : 6.4.0, 5.4.0");
                    }
            );
        }
    }
}
