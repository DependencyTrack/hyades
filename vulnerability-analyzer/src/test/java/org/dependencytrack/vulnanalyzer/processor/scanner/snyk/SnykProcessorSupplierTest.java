package org.dependencytrack.vulnanalyzer.processor.scanner.snyk;

import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.vulnanalyzer.processor.scanner.snyk.SnykProcessorSupplier;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.Optional;
import java.util.Set;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

class SnykProcessorSupplierTest {

    private SnykProcessorSupplier processorSupplier;

    @BeforeEach
    void beforeEach() {
        processorSupplier = new SnykProcessorSupplier(null, null, null, null,
                null, null, null, null, Set.of("golang",
                "cargo",
                "cocoapods",
                "composer",
                "gem",
                "generic",
                "hex",
                "maven",
                "npm",
                "nuget",
                "pypi",
                "swift"));
    }

    @ParameterizedTest
    @CsvSource(value = {
            ",,,false", // Nothing set -> No
            "cpe:/a:acme:application:9.1.1,,,false", // Only CPE set -> No
            ",pkg:maven/acme/a@9.1.1,,true", // Only PURL set -> Yes
            "cpe:/a:acme:application:9.1.1,,false,false", // CPE and not internal -> No
            ",pkg:maven/acme/a@9.1.1,false,true", // PURL and not internal -> Yes
            "cpe:/a:acme:application:9.1.1,,true,false", // CPE and internal -> No
            ",pkg:maven/acme/a@9.1.1,true,false", // PURL and internal -> No
            "cpe:/a:acme:application:9.1.1,pkg:maven/acme/a@9.1.1,false,true", // CPE, PURL, and not internal -> Yes
            "cpe:/a:acme:application:9.1.1,pkg:maven/acme/a@9.1.1,true,false" // CPE, PURL, and internal -> No
    })
    void testCanProcess(final String cpe, final String purl, final Boolean internal, final boolean expectedResult) {
        final Component.Builder componentBuilder = Component.newBuilder()
                .setUuid(UUID.randomUUID().toString());
        Optional.ofNullable(cpe).ifPresent(componentBuilder::setCpe);
        Optional.ofNullable(purl).ifPresent(componentBuilder::setPurl);
        Optional.ofNullable(internal).ifPresent(componentBuilder::setInternal);

        assertThat(processorSupplier.canProcess(componentBuilder.build())).isEqualTo(expectedResult);
    }

    @ParameterizedTest
    @CsvSource(value = {
            "apk, false",
            "bitbucket, false",
            "cargo, true",
            "cocoapods, true",
            "composer, true",
            "conan, false",
            "conda, false",
            "cran, false",
            "deb, false",
            "docker, false",
            "foobar, false",
            "gem, true",
            "generic, true",
            "github, false",
            "golang, true",
            "hex, true",
            "maven, true",
            "npm, true",
            "nuget, true",
            "pypi, true",
            "rpm, false",
            "swift, true",
    })
    void testCanProcessPurlTypes(final String type, final boolean expectedResult) {
        final var component = Component.newBuilder()
                .setUuid(UUID.randomUUID().toString())
                .setPurl("pkg:%s/acme/a@9.1.1".formatted(type))
                .build();
        assertThat(processorSupplier.canProcess(component)).isEqualTo(expectedResult);
    }

}