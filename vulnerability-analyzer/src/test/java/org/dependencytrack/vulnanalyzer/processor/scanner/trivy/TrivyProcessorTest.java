/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner.trivy;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import io.quarkus.test.InjectMock;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Response;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.streams.TestInputTopic;
import org.apache.kafka.streams.TestOutputTopic;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.test.TestRecord;
import org.dependencytrack.proto.KafkaProtobufDeserializer;
import org.dependencytrack.proto.KafkaProtobufSerializer;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.ScanStatus;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.dependencytrack.vulnanalyzer.client.trivy.PutRequest;
import org.dependencytrack.vulnanalyzer.client.trivy.TrivyClient;
import org.dependencytrack.vulnanalyzer.client.trivy.TrivyResponse;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.net.SocketTimeoutException;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@QuarkusTest
@TestProfile(TrivyProcessorTest.TestProfile.class)
class TrivyProcessorTest {

    public static class TestProfile implements QuarkusTestProfile {
        @Override
        public Map<String, String> getConfigOverrides() {
            return Map.of(
                    "scanner.trivy.enabled", "true",
                    "scanner.trivy.ignore-unfixed-enabled", "false",
                    "scanner.trivy.api.token", "token",
                    "scanner.trivy.batch-size", "100",
                    "quarkus.kafka.snappy.enabled", "false"
            );
        }
    }

    @Inject
    TrivyProcessorSupplier processorSupplier;

    @Inject
    ObjectMapper objectMapper;

    @Inject
    @CacheName("trivy")
    Cache cache;

    @InjectMock
    @RestClient
    TrivyClient trivyClientMock;

    @Inject
    @Named("trivyCircuitBreaker")
    CircuitBreaker circuitBreaker;

    private TopologyTestDriver testDriver;
    private TestInputTopic<String, ScanTask> inputTopic;
    private TestOutputTopic<ScanKey, ScannerResult> outputTopic;

    @BeforeEach
    void beforeEach() {
        final var topology = new Topology();
        topology.addSource("sourceProcessor", new StringDeserializer(),
                new KafkaProtobufDeserializer<>(ScanTask.parser()), "input-topic");
        topology.addProcessor("trivyProcessor", processorSupplier, "sourceProcessor");
        topology.addSink("sinkProcessor", "output-topic",
                new KafkaProtobufSerializer<>(), new KafkaProtobufSerializer<>(), "trivyProcessor");

        testDriver = new TopologyTestDriver(topology);
        inputTopic = testDriver.createInputTopic("input-topic",
                new StringSerializer(), new KafkaProtobufSerializer<>());
        outputTopic = testDriver.createOutputTopic("output-topic",
                new KafkaProtobufDeserializer<>(ScanKey.parser()), new KafkaProtobufDeserializer<>(ScannerResult.parser()));
    }

    @AfterEach
    void afterEach() {
        testDriver.close();
        cache.invalidateAll().await().indefinitely();
        circuitBreaker.reset();
    }

    @Test
    void testNoResults() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenReturn(getTrivyResponseTestData("no-results.json"));
        final TestRecord<String, ScanTask> inputRecord = createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@6.4.0?foo=bar#baz");
        inputTopic.pipeInput(inputRecord);
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));
        assertThat(outputTopic.getQueueSize()).isEqualTo(1);
        final TestRecord<ScanKey, ScannerResult> outputRecord = outputTopic.readRecord();
        assertThat(outputRecord.key()).isEqualTo(inputRecord.getValue().getKey());
        assertThat(outputRecord.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
        assertThat(outputRecord.getValue().hasFailureReason()).isFalse();
        assertThat(outputRecord.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
        assertThat(outputRecord.getValue().getBom().getVulnerabilitiesCount()).isZero();
    }

    @Test
    void testSingleResult() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenReturn(getTrivyResponseTestData("single-result.json"));
        final TestRecord<String, ScanTask> inputRecord = createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz");
        inputTopic.pipeInput(inputRecord);
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));
        assertThat(outputTopic.getQueueSize()).isEqualTo(1);
        TestRecord<ScanKey, ScannerResult> outputRecord = outputTopic.readRecord();
        assertThat(outputRecord.key()).isEqualTo(inputRecord.getValue().getKey());
        assertThat(outputRecord.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
        assertThat(outputRecord.getValue().hasFailureReason()).isFalse();
        assertThat(outputRecord.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
        assertThat(outputRecord.getValue().getBom().getVulnerabilitiesList()).satisfiesExactlyInAnyOrder(
                vulnerability -> {
                    assertThat(vulnerability.getId()).isEqualTo("CVE-2022-40152");
                    assertThat(vulnerability.getSource().getName()).isEqualTo("NVD");
                }
        );
    }

    @Test
    void testMultipleResults() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenReturn(getTrivyResponseTestData("multiple-result.json"));
        final TestRecord<String, ScanTask> inputRecordA = createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz");
        final TestRecord<String, ScanTask> inputRecordB = createTestRecord("pkg:maven/org.yaml/snakeyaml@1.33");
        inputTopic.pipeInput(inputRecordA);
        inputTopic.pipeInput(inputRecordB);

        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        assertThat(outputTopic.getQueueSize()).isEqualTo(2);
        assertThat(outputTopic.readRecordsToList()).satisfiesExactlyInAnyOrder(
                record -> {
                    assertThat(record.key()).isEqualTo(inputRecordA.getValue().getKey());
                    assertThat(record.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                    assertThat(record.getValue().hasFailureReason()).isFalse();
                    assertThat(record.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
                    assertThat(record.getValue().getBom().getVulnerabilitiesList()).satisfiesExactlyInAnyOrder(
                            vulnerability -> {
                                assertThat(vulnerability.getId()).isEqualTo("CVE-2022-40152");
                                assertThat(vulnerability.getSource().getName()).isEqualTo("NVD");
                            }
                    );
                },
                record -> {
                    assertThat(record.key()).isEqualTo(inputRecordB.getValue().getKey());
                    assertThat(record.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
                    assertThat(record.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
                    assertThat(record.getValue().getBom().getVulnerabilitiesList()).satisfiesExactlyInAnyOrder(
                            vulnerability -> {
                                assertThat(vulnerability.getId()).isEqualTo("GHSA-2022-40152");
                                assertThat(vulnerability.getSource().getName()).isEqualTo("GITHUB");
                            }
                    );
                });
    }

    @Test
    void testCachingWithResult() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenReturn(getTrivyResponseTestData("single-result.json"));
        final TestRecord<String, ScanTask> inputRecord = createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz");
        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?type=jar&baz=qux"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        assertThat(outputTopic.getQueueSize()).isEqualTo(3);
        assertThat(outputTopic.readRecordsToList()).allSatisfy(record ->
                assertThat(record.getValue().getBom().getVulnerabilitiesList()).satisfiesExactly(vulnerability ->
                        assertThat(vulnerability.getId()).isEqualTo("CVE-2022-40152")));

        // Verify that the client was invoked just once, despite three results being returned.
        verify(trivyClientMock, Mockito.times(1)).scanBlob(any(PutRequest.class));
    }

    @Test
    void testCachingWithNoResults() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenReturn(getTrivyResponseTestData("no-results.json"));
        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?type=jar&foo=bar"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?type=jar&baz=qux"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"));
        testDriver.advanceWallClockTime(Duration.ofSeconds(6));

        assertThat(outputTopic.getQueueSize()).isEqualTo(3);
        assertThat(outputTopic.readRecordsToList()).allSatisfy(record ->
                assertThat(record.getValue().getBom().getVulnerabilitiesCount()).isZero());

        // Verify that the client was invoked just once, despite no results being returned.
        verify(trivyClientMock, Mockito.times(1)).scanBlob(any(PutRequest.class));
    }

    @Test
    void testRetry() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.TOO_MANY_REQUESTS).build()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.TOO_MANY_REQUESTS).build()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.TOO_MANY_REQUESTS).build()))
                .thenReturn(getTrivyResponseTestData("no-results.json"));

        // Submit a complete batch, so we don't have to deal with punctuation
        // times of incomplete batches AND retries here.
        for (int i = 0; i < 128; i++) {
            inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0".formatted(i)));
        }
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);

        // "Wait" for the first retry to happen. The default initial
        // delay is 5 seconds, the multiplier is 2. The first retry can
        // happen anytime between 3.5 and 6.5 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(7));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(2)).scanBlob(any(PutRequest.class));

        // Second retry will happen between 7 and 13 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(14));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(3)).scanBlob(any(PutRequest.class));

        // Third retry will happen between 14 and 26 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(27));
        assertThat(outputTopic.getQueueSize()).isEqualTo(128);
        verify(trivyClientMock, Mockito.times(4)).scanBlob(any(PutRequest.class));

        assertThat(outputTopic.readRecordsToList()).allSatisfy(record -> {
            assertThat(record.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_SUCCESSFUL);
            assertThat(record.getValue().hasFailureReason()).isFalse();
            assertThat(record.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
            assertThat(record.getValue().getBom().getVulnerabilitiesCount()).isZero();
        });
    }

    @Test
    void testNonRetryableError() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).build()));
        final TestRecord<String, ScanTask> inputRecord = createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");
        inputTopic.pipeInput(inputRecord);

        // First retry would happen between 3.5 and 6.5 seconds from "now".
        // Verify there is not retry happening, as there's no point in retrying
        // a definitive user error.
        testDriver.advanceWallClockTime(Duration.ofSeconds(7));
        verify(trivyClientMock, Mockito.times(1)).scanBlob(any(PutRequest.class));

        assertThat(outputTopic.getQueueSize()).isEqualTo(1);
        final TestRecord<ScanKey, ScannerResult> outputRecord = outputTopic.readRecord();
        assertThat(outputRecord.key()).isEqualTo(inputRecord.getValue().getKey());
        assertThat(outputRecord.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_FAILED);
        assertThat(outputRecord.getValue().hasFailureReason()).isTrue();
        assertThat(outputRecord.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
        assertThat(outputRecord.getValue().getBom().getVulnerabilitiesCount()).isZero();
    }

    @Test
    void testRetryMaxAttemptsExceeded() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.TOO_MANY_REQUESTS).build()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.SERVICE_UNAVAILABLE).build()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.BAD_GATEWAY).build()))
                .thenThrow(new RuntimeException(new SocketTimeoutException()))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.TOO_MANY_REQUESTS).build()));

        // Submit a complete batch, so we don't have to deal with punctuation
        // times of incomplete batches AND retries here.
        for (int i = 0; i < 100; i++) {
            inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz".formatted(i)));
        }

        assertThat(outputTopic.getQueueSize()).isZero();

        // First retry will happen between 3.5 and 6.5 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(7));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(2)).scanBlob(any(PutRequest.class));

        // Second retry will happen between 7 and 13 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(14));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(3)).scanBlob(any(PutRequest.class));

        // Third retry will happen between 14 and 26 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(27));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(4)).scanBlob(any(PutRequest.class));

        // Fourth retry will happen between 28 and 52 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(53));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(5)).scanBlob(any(PutRequest.class));

        // Fifth retry will happen between 56 and 104 seconds from "now".
        testDriver.advanceWallClockTime(Duration.ofSeconds(105));
        assertThat(outputTopic.getQueueSize()).isEqualTo(0);
        verify(trivyClientMock, Mockito.times(6)).scanBlob(any(PutRequest.class));

        // Sixth retry will happen between 112 and 120 seconds from "now".
        // 120 seconds is the default maximum delay.
        testDriver.advanceWallClockTime(Duration.ofSeconds(121));
        assertThat(outputTopic.getQueueSize()).isEqualTo(100);
        verify(trivyClientMock, Mockito.times(7)).scanBlob(any(PutRequest.class));

        assertThat(outputTopic.readRecordsToList()).allSatisfy(record -> {
            assertThat(record.getValue().getStatus()).isEqualTo(ScanStatus.SCAN_STATUS_FAILED);
            assertThat(record.getValue().getFailureReason()).contains("exceeded");
            assertThat(record.getValue().getScanner()).isEqualTo(Scanner.SCANNER_TRIVY);
            assertThat(record.getValue().getBom().getVulnerabilitiesCount()).isZero();
        });
    }


    @Test
    void testCircuitBreaker() throws Exception {
        when(trivyClientMock.scanBlob(any(PutRequest.class)))
                .thenThrow(new WebApplicationException(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build()));

        for (int i = 0; i < 105; i++) {
            for (int j = 0; j < 128; j++) {
                inputTopic.pipeInput(createTestRecord("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0?foo=bar#baz".formatted(i)));
            }
        }

        // Circuit breaker should have opened after 100 failures.
        verify(trivyClientMock, Mockito.times(100)).scanBlob(any(PutRequest.class));
    }

    private TestRecord<String, ScanTask> createTestRecord(final String purl) throws MalformedPackageURLException {
        final PackageURL packageURL = new PackageURL(purl);
        final String key = packageURL.getCoordinates();
        final var component = Component.newBuilder()
                .setUuid(UUID.randomUUID().toString())
                .setPurl(packageURL.toString())
                .build();
        final var scanKey = ScanKey.newBuilder()
                .setScanToken(UUID.randomUUID().toString())
                .setComponentUuid(component.getUuid())
                .build();
        return new TestRecord<>(key, ScanTask.newBuilder()
                .setKey(scanKey)
                .setScanner(Scanner.SCANNER_TRIVY)
                .setComponent(component)
                .build());
    }

    private TrivyResponse getTrivyResponseTestData(final String name) throws IOException {
        return objectMapper.readValue(
                getClass().getClassLoader().getResource(Paths.get("trivy", name).toString()),
                new TypeReference<>() {
                }
        );
    }
}