package org.acme.analyzer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.github.resilience4j.ratelimiter.RateLimiter;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import org.acme.client.snyk.Issue;
import org.acme.client.snyk.Page;
import org.acme.client.snyk.SeveritySource;
import org.acme.client.snyk.SnykClient;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityResult;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.cache.Cache;
import javax.inject.Inject;
import javax.inject.Named;
import javax.ws.rs.WebApplicationException;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;

@QuarkusTest
class SnykAnalyzerTest {

    @InjectMock
    SnykClient snykClient;

    @Inject
    @Named("snykObjectMapper")
    ObjectMapper objectMapper;

    @Inject
    @Named("snykCache")
    Cache<String, Page<Issue>> cache;

    @Inject
    SnykAnalyzer snykAnalyzer;

    @AfterEach
    void afterEach() {
        cache.clear();
    }

    @Test
    @SuppressWarnings("unchecked")
    void testIsEnabled() {
        var analyzer = new SnykAnalyzer(snykClient, Mockito.mock(Cache.class), Mockito.mock(RateLimiter.class), false, SeveritySource.NVD);
        Assertions.assertFalse(analyzer.isEnabled());

        analyzer = new SnykAnalyzer(snykClient, Mockito.mock(Cache.class), Mockito.mock(RateLimiter.class), true, SeveritySource.NVD);
        Assertions.assertTrue(analyzer.isEnabled());
    }

    @Test
    void testAnalyzeWithNoComponents() {
        final List<VulnerabilityResult> results = snykAnalyzer.analyze(Collections.emptyList());
        Assertions.assertEquals(0, results.size());
    }

    @Test
    void testAnalyzeWithResults() throws Exception {
        // Have Snyk return two issues for the analyzed component
        Mockito.when(snykClient.getIssues(Mockito.anyString()))
                .thenReturn(getSnykResponseTestData("multiple-issues-response.json"));

        final var component = new Component();
        component.setGroup("com.fasterxml.woodstox");
        component.setName("woodstox-core");
        component.setVersion("5.0.0");
        component.setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");

        // Verify that two results are returned
        final List<VulnerabilityResult> results = snykAnalyzer.analyze(List.of(component));
        Assertions.assertEquals(1, results.size());
        Assertions.assertEquals(2, results.get(0).getVulnerabilities().size());

        final VulnerabilityResult firstResult = results.get(0);
        Assertions.assertEquals(component, firstResult.getComponent());
        Assertions.assertEquals(AnalyzerIdentity.SNYK_ANALYZER, firstResult.getIdentity());
        Assertions.assertNotNull(firstResult.getVulnerabilities());
        Assertions.assertEquals("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135", firstResult.getVulnerabilities().get(0).getVulnId());
        Assertions.assertEquals(Vulnerability.Source.SNYK.name(), firstResult.getVulnerabilities().get(0).getSource());

        final VulnerabilityResult secondResult = results.get(0);
        Assertions.assertEquals(component, secondResult.getComponent());
        Assertions.assertEquals(AnalyzerIdentity.SNYK_ANALYZER, secondResult.getIdentity());
        Assertions.assertNotNull(secondResult.getVulnerabilities());
        Assertions.assertEquals("SNYK-JAVA-COMFASTERXMLWOODSTOX-2928754", secondResult.getVulnerabilities().get(1).getVulnId());
        Assertions.assertEquals(Vulnerability.Source.SNYK.name(), secondResult.getVulnerabilities().get(1).getSource());
    }

    @Test
    void testAnalyzeWithNoResults() throws Exception {
        // Have Snyk return no issues for the analyzed component
        Mockito.when(snykClient.getIssues(Mockito.anyString()))
                .thenReturn(getSnykResponseTestData("no-issues-response.json"));

        final var component = new Component();
        component.setGroup("com.fasterxml.woodstox");
        component.setName("woodstox-core");
        component.setVersion("6.4.0");
        component.setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@6.4.0");

        final List<VulnerabilityResult> results = snykAnalyzer.analyze(List.of(component));
        Assertions.assertEquals(1, results.size());

        // Ensure a result with null vulnerability is returned
        final VulnerabilityResult result = results.get(0);
        Assertions.assertEquals(component, result.getComponent());
        Assertions.assertEquals(AnalyzerIdentity.SNYK_ANALYZER, result.getIdentity());
        Assertions.assertNull(result.getVulnerabilities());
    }

    @Test
    void testCachingWithResults() throws Exception {
        // Have Snyk return two issues for the analyzed component
        Mockito.when(snykClient.getIssues(Mockito.anyString()))
                .thenReturn(getSnykResponseTestData("multiple-issues-response.json"));

        final var component = new Component();
        component.setGroup("com.fasterxml.woodstox");
        component.setName("woodstox-core");
        component.setVersion("5.0.0");
        component.setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");

        // Analyze the same component twice
        Assertions.assertEquals(1, snykAnalyzer.analyze(List.of(component)).size());
        Assertions.assertEquals(2, snykAnalyzer.analyze(List.of(component)).get(0).getVulnerabilities().size());
        Assertions.assertEquals(1, snykAnalyzer.analyze(List.of(component)).size());
        Assertions.assertEquals(2, snykAnalyzer.analyze(List.of(component)).get(0).getVulnerabilities().size());

        // Verify that the client was only used once
        Mockito.verify(snykClient, Mockito.atMostOnce()).getIssues(Mockito.anyString());
    }

    @Test
    void testCachingWithNoResults() throws Exception {
        // Have Snyk return no issues for the analyzed component
        Mockito.when(snykClient.getIssues(Mockito.anyString()))
                .thenReturn(getSnykResponseTestData("no-issues-response.json"));

        final var component = new Component();
        component.setGroup("com.fasterxml.woodstox");
        component.setName("woodstox-core");
        component.setVersion("6.4.0");
        component.setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@6.4.0");

        // Analyze the same component twice
        Assertions.assertEquals(1, snykAnalyzer.analyze(List.of(component)).size());
        Assertions.assertEquals(1, snykAnalyzer.analyze(List.of(component)).size());

        // Verify that the client was only used once
        Mockito.verify(snykClient, Mockito.atMostOnce()).getIssues(Mockito.anyString());
    }

    @Test
    void testSnykClientException() throws Exception {
        // Have the Snyk client throw an exception
        Mockito.when(snykClient.getIssues(Mockito.anyString()))
                .thenThrow(new WebApplicationException());

        final var component = new Component();
        component.setGroup("com.fasterxml.woodstox");
        component.setName("woodstox-core");
        component.setVersion("6.4.0");
        component.setPurl("pkg:maven/com.fasterxml.woodstox/woodstox-core@6.4.0");

        // Verify the current behavior of just re-throwing the client exception
        // in a RuntimeException.
        Assertions.assertThrows(RuntimeException.class,
                () -> snykAnalyzer.analyze(List.of(component)));
    }

    private Page<Issue> getSnykResponseTestData(final String name) throws IOException {
        return objectMapper.readValue(getClass().getClassLoader().getResource(Paths.get("snyk", name).toString()),
                new TypeReference<>() {
                });
    }

}