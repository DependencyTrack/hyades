package org.acme.analyzer;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import org.acme.client.snyk.Issue;
import org.acme.client.snyk.Page;
import org.acme.client.snyk.PageData;
import org.acme.client.snyk.SnykClient;
import org.acme.model.Component;
import org.acme.model.Project;
import org.acme.model.VulnerabilityResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import javax.inject.Inject;
import java.io.IOException;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.anyString;

@QuarkusTest
public class SnykAnalyzerTest {

    @Inject
    SnykAnalyzer snykAnalyzer;

    @InjectMock
    SnykClient snykClient;

    @BeforeEach
    void setUp() throws IOException {
        PageData pageData = new PageData("test-id", "issue", getSnykAttributes());
        Mockito.when(snykClient.getIssues(anyString()))
                .thenReturn(new Page<>(null, List.of(pageData)));
    }

    @Test
    public void getIssuesTest(){

        Project project = new Project();
        project.setName("acme-app");
        Component component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        List<VulnerabilityResult> vulnerabilityResults = snykAnalyzer.analyze(List.of(component));
        assertNotNull(vulnerabilityResults);
    }

    private Issue getSnykAttributes() {

        Issue issue = new Issue("test-id", "title", "package_vulnerability",
                "desc", null, null, null, null, null
                );

        return issue;
    }

}
