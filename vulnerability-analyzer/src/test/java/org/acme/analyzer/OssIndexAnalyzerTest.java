package org.acme.analyzer;

import io.quarkus.test.common.http.TestHTTPResource;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import org.acme.client.ossindex.ComponentReportRequest;
import org.acme.client.ossindex.OssIndexClient;
import org.acme.model.Component;
import org.acme.model.Project;
import org.acme.model.VulnerabilityResult;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.inject.Inject;
import java.net.URL;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

@QuarkusTest
public class OssIndexAnalyzerTest {

    @InjectMock
    @RestClient
    OssIndexClient ossIndexClient;

    @Inject
    OssIndexAnalyzer ossIndexAnalyzer;

    @TestHTTPResource("/api/v3/component-report")
    URL componentReportEndpoint;

    @BeforeEach
    void setUp() {
        Mockito.when(ossIndexClient.getComponentReports(any(ComponentReportRequest.class)))
                .thenReturn(Collections.emptyList());
        Mockito.when(ossIndexClient.getComponentReports(anyString(), any(ComponentReportRequest.class)))
                .thenReturn(Collections.emptyList());
    }

    @Test
    public void testAnalyze() {
        Project project = new Project();
        project.setName("acme-app");
        Component component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        List<VulnerabilityResult> vulnerabilityResults = ossIndexAnalyzer.analyze(List.of(component));
        assertNotNull(vulnerabilityResults);
    }
}
