package org.acme.analyzer;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import io.quarkus.test.TestTransaction;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import org.acme.client.ossindex.ComponentReport;
import org.acme.client.ossindex.ComponentReportRequest;
import org.acme.client.ossindex.ComponentReportVulnerability;
import org.acme.client.ossindex.OssIndexClient;
import org.acme.model.Component;
import org.acme.model.Project;
import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityResult;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

@QuarkusTest
public class OssIndexAnalyzerTest {

    @InjectMock
    @RestClient
    OssIndexClient ossIndexClient;

    @Inject
    OssIndexAnalyzer ossIndexAnalyzer;

    @Inject
    EntityManager entityManager;

    @Test
    @TestTransaction
    public void testAnalyze() throws MalformedPackageURLException {
        Mockito.when(ossIndexClient.getComponentReports(any(ComponentReportRequest.class)))
                .thenReturn(getComponentReports());
        Mockito.when(ossIndexClient.getComponentReports(anyString(), any(ComponentReportRequest.class)))
                .thenReturn(getComponentReports());
        entityManager.createNativeQuery("""
                INSERT INTO "CONFIGPROPERTY" ("ID", "DESCRIPTION", "GROUPNAME", "PROPERTYTYPE", "PROPERTYNAME", "PROPERTYVALUE") VALUES
                                    (1, 'ossindex', 'scanner', 'STRING', 'ossindex.api.username', 'ossindex');
                """).executeUpdate();
        entityManager.createNativeQuery("""
                INSERT INTO "CONFIGPROPERTY" ("ID", "DESCRIPTION", "GROUPNAME", "PROPERTYTYPE", "PROPERTYNAME", "PROPERTYVALUE") VALUES
                                    (1, 'ossindex', 'scanner', 'STRING', 'ossindex.api.token', 'token');
                """).executeUpdate();
        Project project = new Project();
        project.setName("acme-app");
        Component component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        List<VulnerabilityResult> vulnerabilityResults = ossIndexAnalyzer.analyze(List.of(component));
        assertNotNull(vulnerabilityResults.get(0).getVulnerabilities());
    }


    private List<ComponentReport> getComponentReports() throws MalformedPackageURLException {

        PackageURL purl = new PackageURL("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        ComponentReportVulnerability vuln = new ComponentReportVulnerability("id", "name", "title",
                "description" , new Float(5.0), "vector", "cwe", "Vector", "reference", new ArrayList<>());

        ComponentReport componentReport = new ComponentReport(purl.getCoordinates(), "", "", List.of(vuln));
        return List.of(componentReport);
    }


}
