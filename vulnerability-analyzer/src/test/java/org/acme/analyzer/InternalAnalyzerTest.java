package org.acme.analyzer;

import io.quarkus.test.TestTransaction;
import io.quarkus.test.junit.QuarkusTest;
import org.acme.model.Component;
import org.acme.model.Project;
import org.acme.model.VulnerabilityResult;
import org.acme.model.VulnerableSoftware;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import java.util.List;
import java.util.UUID;

@QuarkusTest
public class InternalAnalyzerTest {

    @Inject
    EntityManager entityManager;

    @Inject
    InternalAnalyzer internalAnalyzer;

    @Test
    @TestTransaction
    public void testAnalyzeWithCpe() {
        var project = new Project();
        project.setName("acme-app");
        UUID uuid = UUID.randomUUID();
        project.setUuid(uuid);
        entityManager.createNativeQuery("""
                INSERT INTO "PROJECT" ("ID", "NAME", "UUID") VALUES
                                    (2, 'acme-app',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        var component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        component.setUuid(uuid);
        component.setCpe("cpe:/a:acme:application:1.0.0");
        entityManager.createNativeQuery("""
                INSERT INTO "COMPONENT" ("ID", "NAME", "VERSION", "PURL","UUID", "PROJECT_ID") VALUES
                                    (2, 'github.com/tidwall/gjson', 'v1.6.0', 'pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module', :uuid, 2);
                """).setParameter("uuid", uuid).executeUpdate();

        var vulnerableSoftware = new VulnerableSoftware();
        vulnerableSoftware.setPurlType("golang");
        vulnerableSoftware.setPurlNamespace("github.com/tidwall");
        vulnerableSoftware.setPurlName("gjson");
        vulnerableSoftware.setVersionEndExcluding("1.6.5");
        vulnerableSoftware.setVulnerable(true);

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE" ("ID", "UUID","PURL_TYPE", "PURL_NAMESPACE", "PURL_NAME", "VERSIONENDEXCLUDING", "VULNERABLE") VALUES
                                    (1, :uuid,'golang', 'github.com/tidwall', 'gjson', '1.6.5', true);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABILITY" ("ID", "VULNID","SOURCE", "VULNERABLEVERSIONS","UUID") VALUES
                                    (1, 'GHSA-wjm3-fq3r-5x46', 'GITHUB', '1.6.4',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE_VULNERABILITIES" ("VULNERABILITY_ID","VULNERABLESOFTWARE_ID") VALUES
                                    (1, 1);
                """).executeUpdate();

        List< VulnerabilityResult> vulnerabilityResults =internalAnalyzer.analyze(List.of(component));
        List< VulnerabilityResult> vulnerabilityResults2 =internalAnalyzer.analyze(List.of(component));
        Assertions.assertEquals("GHSA-wjm3-fq3r-5x46", vulnerabilityResults.get(0).getVulnerability().getVulnId());
        Assertions.assertEquals("GHSA-wjm3-fq3r-5x46", vulnerabilityResults2.get(0).getVulnerability().getVulnId());
    }

    @Test
    @TestTransaction
    public void testAnalyzeWithPurl() {
        var project = new Project();
        project.setName("acme-app");
        UUID uuid = UUID.randomUUID();
        project.setUuid(uuid);
        entityManager.createNativeQuery("""
                INSERT INTO "PROJECT" ("ID", "NAME", "UUID") VALUES
                                    (5, 'acme-app',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        var component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        component.setUuid(uuid);
        entityManager.createNativeQuery("""
                INSERT INTO "COMPONENT" ("ID", "NAME", "VERSION", "PURL","UUID", "PROJECT_ID") VALUES
                                    (5, 'github.com/tidwall/gjson', 'v1.6.0', 'pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module', :uuid, 5);
                """).setParameter("uuid", uuid).executeUpdate();

        var vulnerableSoftware = new VulnerableSoftware();
        vulnerableSoftware.setPurlType("golang");
        vulnerableSoftware.setPurlNamespace("github.com/tidwall");
        vulnerableSoftware.setPurlName("gjson");
        vulnerableSoftware.setVersionEndExcluding("1.6.5");
        vulnerableSoftware.setVulnerable(true);

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE" ("ID", "UUID","PURL_TYPE", "PURL_NAMESPACE", "PURL_NAME", "VERSIONENDEXCLUDING", "VULNERABLE") VALUES
                                    (5, :uuid,'golang', 'github.com/tidwall', 'gjson', '1.6.5', true);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABILITY" ("ID", "VULNID","SOURCE", "VULNERABLEVERSIONS","UUID") VALUES
                                    (5, 'GHSA-wjm3-fq3r-5x46', 'GITHUB', '1.6.4',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE_VULNERABILITIES" ("VULNERABILITY_ID","VULNERABLESOFTWARE_ID") VALUES
                                    (5, 5);
                """).executeUpdate();

        List< VulnerabilityResult> vulnerabilityResults =internalAnalyzer.analyze(List.of(component));
        Assertions.assertEquals("GHSA-wjm3-fq3r-5x46", vulnerabilityResults.get(0).getVulnerability().getVulnId());
    }

    @Test
    @TestTransaction
    public void testNoComponentVersion(){
        var project = new Project();
        project.setName("acme-app");
        UUID uuid = UUID.randomUUID();
        project.setUuid(uuid);
        entityManager.createNativeQuery("""
                INSERT INTO "PROJECT" ("ID", "NAME", "UUID") VALUES
                                    (6, 'acme-app',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        var component = new Component();
        component.setProject(project);
        component.setName("github.com/tidwall/gjson");
        component.setUuid(uuid);
        component.setPurl("pkg:golang/github.com/tidwall/");
        entityManager.createNativeQuery("""
                INSERT INTO "COMPONENT" ("ID", "NAME","UUID", "PROJECT_ID") VALUES
                                    (6, 'github.com/tidwall/gjson',  :uuid, 6);
                """).setParameter("uuid", uuid).executeUpdate();

        var vulnerableSoftware = new VulnerableSoftware();
        vulnerableSoftware.setPurlType("golang");
        vulnerableSoftware.setPurlNamespace("github.com/tidwall");
        vulnerableSoftware.setPurlName("gjson");
        vulnerableSoftware.setVersionEndExcluding("1.6.5");
        vulnerableSoftware.setVulnerable(true);

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE" ("ID", "UUID","PURL_TYPE", "PURL_NAMESPACE", "PURL_NAME", "VERSIONENDEXCLUDING", "VULNERABLE") VALUES
                                    (6, :uuid,'golang', 'github.com/tidwall', 'gjson', '1.6.5', true);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABILITY" ("ID", "VULNID","SOURCE", "VULNERABLEVERSIONS","UUID") VALUES
                                    (6, 'GHSA-wjm3-fq3r-5x46', 'GITHUB', '1.6.4',:uuid);
                """).setParameter("uuid", uuid).executeUpdate();

        entityManager.createNativeQuery("""
                INSERT INTO "VULNERABLESOFTWARE_VULNERABILITIES" ("VULNERABILITY_ID","VULNERABLESOFTWARE_ID") VALUES
                                    (6, 6);
                """).executeUpdate();

        List< VulnerabilityResult> vulnerabilityResults = internalAnalyzer.analyze(List.of(component));
        Assertions.assertEquals(0, vulnerabilityResults.size());
    }
    @Test
    public void testContainsSpecialCharacter(){
        boolean test = InternalAnalyzer.containsSpecialCharacter("@$\\#*");
        Assertions.assertTrue(test);
    }

    @Test
    public void testDoesNotContainsSpecialCharacter(){
        boolean test = InternalAnalyzer.containsSpecialCharacter("@$\\#");
        Assertions.assertFalse(test);
    }
    @Test
    public void testIsCapable(){
        var component = new Component();
        component.setName("github.com/tidwall/gjson");
        component.setVersion("v1.6.0");
        component.setPurl("pkg:golang/github.com/tidwall/gjson@v1.6.0?type=module");
        component.setCpe("cpe:/a:acme:application:1.0.0");
        Assertions.assertTrue(internalAnalyzer.isCapable(component));
    }

    @Test
    public void testCompareVersions(){
        var vulnerableSoftware = new VulnerableSoftware();
        vulnerableSoftware.setPurlType("golang");
        vulnerableSoftware.setPurlNamespace("github.com/tidwall");
        vulnerableSoftware.setPurlName("gjson");
        vulnerableSoftware.setVersionEndExcluding("1.6.5");
        vulnerableSoftware.setVulnerable(true);
        vulnerableSoftware.setVersionStartExcluding("1.1");
        vulnerableSoftware.setVersionEndIncluding("1.7");
        vulnerableSoftware.setVersionStartIncluding("1.3");

        Assertions.assertTrue(InternalAnalyzer.compareVersions(vulnerableSoftware, "1.6.4"));
        Assertions.assertFalse(InternalAnalyzer.compareVersions(vulnerableSoftware, "1.6.6"));
    }

    @Test
    public void testCompareAttributes(){
        Assertions.assertFalse(InternalAnalyzer.compareAttributes("-", "*"));
        Assertions.assertTrue(InternalAnalyzer.compareAttributes("*", "-"));
        Assertions.assertTrue(InternalAnalyzer.compareAttributes("*", "*"));
        Assertions.assertFalse(InternalAnalyzer.compareAttributes("a", "*"));
        Assertions.assertFalse(InternalAnalyzer.compareAttributes("b", "-"));
        Assertions.assertTrue(InternalAnalyzer.compareAttributes("?", "a"));
        Assertions.assertFalse(InternalAnalyzer.compareAttributes("b", "a"));

    }

    @Test
    public void testCompareUpdate(){
        var vulnerableSoftware = new VulnerableSoftware();
        vulnerableSoftware.setUpdate("*");
        Assertions.assertTrue(InternalAnalyzer.compareUpdate(vulnerableSoftware, "*"));
        vulnerableSoftware.setUpdate(null);
        Assertions.assertTrue(InternalAnalyzer.compareUpdate(vulnerableSoftware, null));
        Assertions.assertFalse(InternalAnalyzer.compareUpdate(vulnerableSoftware, "-"));
        vulnerableSoftware.setUpdate("-");
        Assertions.assertFalse(InternalAnalyzer.compareUpdate(vulnerableSoftware, "-"));


    }

}
