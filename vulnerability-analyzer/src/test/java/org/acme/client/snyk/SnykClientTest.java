package org.acme.client.snyk;

import com.github.tomakehurst.wiremock.WireMockServer;
import com.github.tomakehurst.wiremock.client.WireMock;
import com.github.tomakehurst.wiremock.core.WireMockConfiguration;
import com.github.tomakehurst.wiremock.http.Body;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.apache.http.impl.client.HttpClientBuilder;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import javax.ws.rs.WebApplicationException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Optional;

import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;
import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;
import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;
import static com.github.tomakehurst.wiremock.client.WireMock.urlPathMatching;
import static com.github.tomakehurst.wiremock.client.WireMock.verify;

class SnykClientTest {

    private static WireMockServer wireMockServer;

    @BeforeAll
    static void beforeAll() {
        wireMockServer = new WireMockServer(WireMockConfiguration.options().dynamicPort());
        wireMockServer.start();

        WireMock.configureFor(wireMockServer.port());
    }

    @AfterEach
    void afterEach() {
        WireMock.reset();
    }

    @AfterAll
    static void afterAll() {
        if (wireMockServer != null) {
            wireMockServer.stop();
        }
    }

    @Test
    void testSuccessfulResponse() throws Exception {
        // Have the Snyk API return one issue for the provided PURL
        stubFor(get(urlPathMatching("/rest/orgs/[^/]+/packages/[^/]+/issues"))
                .willReturn(aResponse()
                        .withStatus(HttpStatus.SC_OK)
                        .withResponseBody(Body.fromJsonBytes(getSnykResponseTestData("one-issue-response.json")))));

        final var snykClient = new SnykClient(HttpClientBuilder.create().build(), new SnykClientConfig().objectMapper(),
                Optional.of(wireMockServer.baseUrl()), Optional.of("orgId"), Optional.of("token"), "apiVersion");
        final Page<Issue> issuePage = snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0");

        // Verify that we sent the request in the correct format
        verify(getRequestedFor(urlPathMatching("/rest/orgs/orgId/packages/pkg%3Amaven%2Fcom.fasterxml.woodstox%2Fwoodstox-core%405.0.0/issues"))
                .withQueryParam("version", equalTo("apiVersion"))
                .withHeader(HttpHeaders.AUTHORIZATION, equalTo("token token"))
                .withHeader(HttpHeaders.ACCEPT, equalTo("application/vnd.api+json")));

        // Verify that the response data is deserialized correctly
        Assertions.assertNotNull(issuePage);
        Assertions.assertNotNull(issuePage.data());
        Assertions.assertEquals(1, issuePage.data().size());
        Assertions.assertNotNull(issuePage.meta());

        final PageData<Issue> pageData = issuePage.data().get(0);
        Assertions.assertEquals("issue", pageData.type());
        Assertions.assertEquals("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135", pageData.id());
        Assertions.assertNotNull(pageData.attributes());

        final Issue issue = pageData.attributes();
        Assertions.assertEquals("SNYK-JAVA-COMFASTERXMLWOODSTOX-3091135", issue.key());
        Assertions.assertEquals("package_vulnerability", issue.type());
        Assertions.assertEquals("2022-10-31T11:25:51.137662Z", issue.createdAt());
        Assertions.assertEquals("2022-11-26T01:10:27.643959Z", issue.updatedAt());

        Assertions.assertEquals(11, issue.problems().size());

        Assertions.assertEquals(3, issue.severities().size());
        Assertions.assertEquals("medium", issue.severities().get(0).level());
        Assertions.assertEquals(5.3f, issue.severities().get(0).score());
        Assertions.assertEquals(SeveritySource.SNYK, issue.severities().get(0).source());
        Assertions.assertEquals("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", issue.severities().get(0).vector());
        Assertions.assertEquals("high", issue.severities().get(1).level());
        Assertions.assertEquals(7.5f, issue.severities().get(1).score());
        Assertions.assertEquals(SeveritySource.NVD, issue.severities().get(1).source());
        Assertions.assertEquals("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", issue.severities().get(1).vector());
        Assertions.assertEquals("high", issue.severities().get(2).level());
        Assertions.assertEquals(7.5f, issue.severities().get(2).score());
        Assertions.assertEquals(SeveritySource.UNKNOWN, issue.severities().get(2).source());
        Assertions.assertEquals("CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", issue.severities().get(2).vector());

        Assertions.assertNotNull(issue.slots());
        Assertions.assertEquals(3, issue.slots().references().size());
        Assertions.assertEquals("https://github.com/FasterXML/woodstox/issues/157", issue.slots().references().get(0).url());
        Assertions.assertEquals("GitHub Issue", issue.slots().references().get(0).title());
        Assertions.assertEquals("https://github.com/x-stream/xstream/issues/304%23issuecomment-1254647926", issue.slots().references().get(1).url());
        Assertions.assertEquals("GitHub Issue", issue.slots().references().get(1).title());
        Assertions.assertEquals("https://github.com/FasterXML/woodstox/pull/159", issue.slots().references().get(2).url());
        Assertions.assertEquals("GitHub PR", issue.slots().references().get(2).title());

        final PageMeta meta = issuePage.meta();
        Assertions.assertNotNull(meta.pkg());
        Assertions.assertEquals("woodstox-core", meta.pkg().name());
        Assertions.assertEquals("maven", meta.pkg().type());
        Assertions.assertEquals("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0", meta.pkg().url());
        Assertions.assertEquals("5.0.0", meta.pkg().version());

        Assertions.assertEquals(1, issuePage.data().size());
    }

    @ParameterizedTest
    @ValueSource(ints = {
            HttpStatus.SC_NOT_MODIFIED,
            HttpStatus.SC_NOT_FOUND,
            HttpStatus.SC_TOO_MANY_REQUESTS,
            HttpStatus.SC_INTERNAL_SERVER_ERROR
    })
    void testUnexpectedResponse(final int responseCode) {
        stubFor(get(urlPathMatching("/rest/orgs/[^/]+/packages/[^/]+/issues"))
                .willReturn(aResponse()
                        .withStatus(responseCode)));

        final var snykClient = new SnykClient(HttpClientBuilder.create().build(), new SnykClientConfig().objectMapper(),
                Optional.of(wireMockServer.baseUrl()), Optional.of("orgId"), Optional.of("token"), "apiVersion");

        Assertions.assertThrows(WebApplicationException.class,
                () -> snykClient.getIssues("pkg:maven/com.fasterxml.woodstox/woodstox-core@5.0.0"));
    }

    private byte[] getSnykResponseTestData(final String name) throws IOException {
        final URL resourceUrl = getClass().getClassLoader().getResource(Paths.get("snyk", name).toString());
        Assertions.assertNotNull(resourceUrl);

        try (final InputStream inputStream = resourceUrl.openStream()) {
            return inputStream.readAllBytes();
        }
    }

}