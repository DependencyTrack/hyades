package org.acme.client.snyk;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import com.github.packageurl.PackageURLBuilder;
import com.google.inject.Inject;
import io.quarkus.test.common.http.TestHTTPResource;
import io.quarkus.test.junit.QuarkusMock;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import kong.unirest.HttpResponse;
import kong.unirest.JsonNode;
import kong.unirest.UnirestInstance;
import kong.unirest.json.JSONObject;
import org.acme.client.ossindex.ComponentReportRequest;
import org.acme.client.ossindex.OssIndexClient;
import org.acme.common.UnirestFactory;
import org.acme.model.Component;
import org.apache.http.impl.client.HttpClientBuilder;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Optional;
import java.util.UUID;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;
import static org.wildfly.common.Assert.assertNotNull;

@QuarkusTest
public class SnykClientTest {

//    @Mock
//    SnykClientConfig snykClientConfig;
//
//    String baseUrl = "https://api.snyk.io";
//
//    SnykClient snykClient;
//
//    @BeforeEach
//    void setUp() {
//        snykClient = Mockito.mock(SnykClient.class);
//        QuarkusMock.installMockForType(snykClient, SnykClient.class);
//    }
//
//    @Test
//    public void getIssuesTest() throws MalformedPackageURLException, IOException {
//
////        final UnirestInstance ui = UnirestFactory.getUnirestInstance();
////        final HttpResponse<JsonNode> response = ui.put(baseUrl + "/api/v1/project")
////                .header("Content-Type", "application/json")
////                .header("X-API-Key", apiKey)
////                .body(new JSONObject()
////                        .put("name", name)
////                        .put("version", version)
////                )
////                .asJson();
////        if (response.getStatus() == 201) {
////            return UUID.fromString(response.getBody().getObject().getString("uuid"));
////        }
//
//        PackageURL purl = PackageURLBuilder.aPackageURL()
//                .withType("maven").withNamespace("acme").withName("product").withVersion("1.0").build();
//
//        Page<Issue> issuePage = snykClient.getIssues(purl.getCoordinates());
////        assertNotNull(issuePage);
//    }

}
