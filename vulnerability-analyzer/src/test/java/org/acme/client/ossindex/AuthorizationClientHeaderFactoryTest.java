package org.acme.client.ossindex;

import org.acme.config.CircuitBreakerConfig;
import org.acme.config.OssIndexConfig;
import org.acme.config.RetryConfig;
import org.hibernate.validator.constraints.URL;
import org.junit.jupiter.api.Test;

import javax.ws.rs.core.MultivaluedMap;
import java.time.Duration;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

class AuthorizationClientHeaderFactoryTest {

    @Test
    void testWithCredentials() {
        final var config = new OssIndexConfig() {
            @Override
            public boolean enabled() {
                return false;
            }

            @Override
            public ApiConfig api() {
                return new ApiConfig() {
                    @Override
                    public Optional<@URL String> baseUrl() {
                        return Optional.empty();
                    }

                    @Override
                    public Optional<String> username() {
                        return Optional.of("foo@example.com");
                    }

                    @Override
                    public Optional<String> token() {
                        return Optional.of("token666");
                    }
                };
            }

            @Override
            public Duration batchInterval() {
                return null;
            }

            @Override
            public CircuitBreakerConfig circuitBreaker() {
                return null;
            }

            @Override
            public RetryConfig retry() {
                return null;
            }
        };

        final MultivaluedMap<String, String> headers = new AuthorizationClientHeaderFactory(config).update(null, null);
        assertThat(headers).hasSize(1)
                .hasEntrySatisfying("Authorization", value ->
                        assertThat(value).containsOnly("Basic Zm9vQGV4YW1wbGUuY29tOnRva2VuNjY2"));
    }

    @Test
    void testWithoutCredentials() {
        final var config = new OssIndexConfig() {
            @Override
            public boolean enabled() {
                return false;
            }

            @Override
            public ApiConfig api() {
                return new ApiConfig() {
                    @Override
                    public Optional<@URL String> baseUrl() {
                        return Optional.empty();
                    }

                    @Override
                    public Optional<String> username() {
                        return Optional.empty();
                    }

                    @Override
                    public Optional<String> token() {
                        return Optional.empty();
                    }
                };
            }

            @Override
            public Duration batchInterval() {
                return null;
            }

            @Override
            public CircuitBreakerConfig circuitBreaker() {
                return null;
            }

            @Override
            public RetryConfig retry() {
                return null;
            }
        };

        final MultivaluedMap<String, String> headers = new AuthorizationClientHeaderFactory(config).update(null, null);
        assertThat(headers).isEmpty();
    }

}