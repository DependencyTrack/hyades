package org.acme.client.ossindex;

import io.quarkus.test.common.http.TestHTTPResource;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.restassured.http.ContentType;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;

@QuarkusTest
public class OssIndexClientTest {

    @InjectMock
    @RestClient
    OssIndexClient ossIndexClient;

    @TestHTTPResource("/api/v3/component-report")
    URL componentReportEndpoint;

    @BeforeEach
    void setUp() {
        Mockito.when(ossIndexClient.getComponentReports(new ComponentReportRequest(new ArrayList<>())))
                .thenReturn(Collections.emptyList());
        Mockito.when(ossIndexClient.getComponentReports("test-auth", new ComponentReportRequest(new ArrayList<>())))
                .thenReturn(Collections.emptyList());
    }

    @Test
    public void getComponentReportsWithoutAuth() {

        given()
                .body("")
                .header("Content-Type", "application/json")
                .when().post(componentReportEndpoint)
                .then()
                .statusCode(200)
                .body("$.size()", is(1));
    }

    @Test
    public void getComponentReportsWithAuth() {

        given()
                .body("")
                .header("Content-Type", "application/json")
                .header("Authorization", "test-auth")
                .when().post(componentReportEndpoint)
                .then()
                .statusCode(200)
                .body("$.size()", is(1));
    }
}
