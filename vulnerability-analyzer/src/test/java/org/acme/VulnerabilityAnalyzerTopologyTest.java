package org.acme;

import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;
import io.quarkus.kafka.client.serialization.ObjectMapperSerializer;
import io.quarkus.test.junit.QuarkusMock;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.QuarkusTestProfile;
import io.quarkus.test.junit.TestProfile;
import org.acme.common.KafkaTopic;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.AnalyzersConfig;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.acme.processor.internal.InternalScannerProcessorSupplier;
import org.acme.processor.ossindex.OssIndexProcessorSupplier;
import org.acme.processor.snyk.SnykProcessorSupplier;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.UUIDDeserializer;
import org.apache.kafka.common.serialization.UUIDSerializer;
import org.apache.kafka.streams.TestInputTopic;
import org.apache.kafka.streams.TestOutputTopic;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.TopologyTestDriver;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.Record;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.platform.suite.api.SelectClasses;
import org.junit.platform.suite.api.Suite;

import javax.inject.Inject;
import java.util.Map;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@Suite
@SelectClasses(value = {
        VulnerabilityAnalyzerTopologyTest.IdentifierSplittingTest.class,
        VulnerabilityAnalyzerTopologyTest.AnalyzerConfigTest.class,
        VulnerabilityAnalyzerTopologyTest.NoResultsFromAllAnalyzersTest.class
})
class VulnerabilityAnalyzerTopologyTest {

    @QuarkusTest
    @TestProfile(IdentifierSplittingTest.TestProfile.class)
    static class IdentifierSplittingTest {

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "false",
                        "scanner.ossindex.enabled", "false",
                        "scanner.snyk.enabled", "false"
                );
            }
        }

        @Inject
        Topology topology;

        private TopologyTestDriver testDriver;
        private TestInputTopic<UUID, Component> inputTopic;
        private TestOutputTopic<String, Component> componentCpeTopic;
        private TestOutputTopic<String, Component> componentPurlTopic;
        private TestOutputTopic<String, Component> componentSwidTopic;
        private TestOutputTopic<UUID, VulnerabilityResult> outputTopic;

        @BeforeEach
        void beforeEach() {
            testDriver = new TopologyTestDriver(topology);
            inputTopic = testDriver.createInputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(),
                    new UUIDSerializer(), new ObjectMapperSerializer<>());
            componentCpeTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT_CPE.getName(),
                    new StringDeserializer(), new ObjectMapperDeserializer<>(Component.class));
            componentPurlTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT_PURL.getName(),
                    new StringDeserializer(), new ObjectMapperDeserializer<>(Component.class));
            componentSwidTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT_SWID.getName(),
                    new StringDeserializer(), new ObjectMapperDeserializer<>(Component.class));
            outputTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_RESULT.getName(),
                    new UUIDDeserializer(), new ObjectMapperDeserializer<>(VulnerabilityResult.class));
        }

        @AfterEach
        void afterEach() {
            testDriver.close();
        }

        @Test
        void test() {
            final UUID uuid = UUID.randomUUID();
            final var component = new Component();
            component.setUuid(uuid);
            component.setCpe("cpe:/a:acme:application:9.1.1");
            component.setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2");
            component.setSwidTagId("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8");

            inputTopic.pipeInput(uuid, component);

            assertThat(componentCpeTopic.getQueueSize()).isEqualTo(1);
            assertThat(componentCpeTopic.readRecord()).satisfies(record -> {
                assertThat(record.key()).isEqualTo("cpe:/a:acme:application:9.1.1");
                assertThat(record.getValue().getUuid()).isEqualTo(component.getUuid());
                assertThat(record.getValue().getCpe()).isEqualTo(component.getCpe());
                assertThat(record.getValue().getPurl()).isEqualTo(component.getPurl());
                assertThat(record.getValue().getSwidTagId()).isEqualTo(component.getSwidTagId());
            });
            assertThat(componentPurlTopic.getQueueSize()).isEqualTo(1);
            assertThat(componentPurlTopic.readRecord()).satisfies(record -> {
                assertThat(record.key()).isEqualTo("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2");
                assertThat(record.getValue().getUuid()).isEqualTo(component.getUuid());
                assertThat(record.getValue().getCpe()).isEqualTo(component.getCpe());
                assertThat(record.getValue().getPurl()).isEqualTo(component.getPurl());
                assertThat(record.getValue().getSwidTagId()).isEqualTo(component.getSwidTagId());
            });
            assertThat(componentSwidTopic.getQueueSize()).isEqualTo(0); // TODO: Should be 1
            assertThat(outputTopic.getQueueSize()).isEqualTo(1); // TODO: Should be 0
            assertThat(outputTopic.readRecord()).satisfies(record -> {
                assertThat(record.key()).isEqualTo(component.getUuid());
                assertThat(record.getValue().getComponent().getUuid()).isEqualTo(component.getUuid());
                assertThat(record.getValue().getComponent().getCpe()).isEqualTo(component.getCpe());
                assertThat(record.getValue().getComponent().getPurl()).isEqualTo(component.getPurl());
                assertThat(record.getValue().getComponent().getSwidTagId()).isEqualTo(component.getSwidTagId());
                assertThat(record.getValue().getFailureReason()).isNull();
                assertThat(record.getValue().getIdentity()).isEqualTo(AnalyzerIdentity.NONE);
                assertThat(record.getValue().getVulnerabilities()).isEmpty();
            });
        }

        @Test
        void testUnknownIdentifier() {
            final UUID uuid = UUID.randomUUID();
            final var component = new Component();
            component.setUuid(uuid);

            inputTopic.pipeInput(uuid, component);

            assertThat(outputTopic.getQueueSize()).isEqualTo(1);
            assertThat(outputTopic.readRecord()).satisfies(record -> {
                assertThat(record.key()).isEqualTo(uuid);
                assertThat(record.value().getComponent().getUuid()).isEqualTo(uuid);
                assertThat(record.value().getIdentity()).isEqualTo(AnalyzerIdentity.NONE);
                assertThat(record.value().getVulnerabilities()).isEmpty();
            });
        }

    }

    @QuarkusTest
    @TestProfile(AnalyzerConfigTest.TestProfile.class)
    static class AnalyzerConfigTest {

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "true",
                        "scanner.ossindex.enabled", "true",
                        "scanner.snyk.enabled", "true"
                );
            }
        }

        @Inject
        Topology topology;

        private TopologyTestDriver testDriver;
        private TestInputTopic<UUID, Component> inputTopic;
        private TestOutputTopic<UUID, AnalyzersConfig> outputTopic;

        @BeforeEach
        void beforeEach() {
            testDriver = new TopologyTestDriver(topology);
            inputTopic = testDriver.createInputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(),
                    new UUIDSerializer(), new ObjectMapperSerializer<>());
            outputTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_INFO.getName(),
                    new UUIDDeserializer(), new ObjectMapperDeserializer<>(AnalyzersConfig.class));
        }

        @Test
        void test() {
            final UUID uuid = UUID.randomUUID();
            final var component = new Component();
            component.setUuid(uuid);
            component.setCpe("cpe:/a:acme:application:9.1.1");
            component.setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2");

            inputTopic.pipeInput(uuid, component);

            assertThat(outputTopic.getQueueSize()).isEqualTo(1);
            assertThat(outputTopic.readRecord()).satisfies(record -> {
                assertThat(record.key()).isEqualTo(uuid);
                assertThat(record.value().internalAnalyzerEnabled()).isTrue();
                assertThat(record.value().OSSEnabled()).isTrue();
                assertThat(record.value().snykEnabled()).isTrue();
            });
        }

    }

    @QuarkusTest
    @TestProfile(NoResultsFromAllAnalyzersTest.TestProfile.class)
    static class NoResultsFromAllAnalyzersTest {

        @Inject
        Topology topology;

        public static class TestProfile implements QuarkusTestProfile {
            @Override
            public Map<String, String> getConfigOverrides() {
                return Map.of(
                        "scanner.internal.enabled", "true",
                        "scanner.ossindex.enabled", "true",
                        "scanner.snyk.enabled", "true"
                );
            }
        }

        private TopologyTestDriver testDriver;
        private TestInputTopic<UUID, Component> inputTopic;
        private TestOutputTopic<UUID, VulnerabilityResult> outputTopic;

        @BeforeAll
        static void beforeAll() {
            final var internalMock = mock(InternalScannerProcessorSupplier.class);
            final var ossIndexMock = mock(OssIndexProcessorSupplier.class);
            final var snykMock = mock(SnykProcessorSupplier.class);

            when(internalMock.get()).thenAnswer(invocation -> new NoOpProcessor(AnalyzerIdentity.INTERNAL_ANALYZER));
            when(ossIndexMock.get()).thenAnswer(invocation -> new NoOpProcessor(AnalyzerIdentity.OSSINDEX_ANALYZER));
            when(snykMock.get()).thenAnswer(invocation -> new NoOpProcessor(AnalyzerIdentity.SNYK_ANALYZER));

            QuarkusMock.installMockForType(internalMock, InternalScannerProcessorSupplier.class);
            QuarkusMock.installMockForType(ossIndexMock, OssIndexProcessorSupplier.class);
            QuarkusMock.installMockForType(snykMock, SnykProcessorSupplier.class);
        }

        @BeforeEach
        void beforeEach() {
            testDriver = new TopologyTestDriver(topology);
            inputTopic = testDriver.createInputTopic(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(),
                    new UUIDSerializer(), new ObjectMapperSerializer<>());
            outputTopic = testDriver.createOutputTopic(KafkaTopic.VULN_ANALYSIS_RESULT.getName(),
                    new UUIDDeserializer(), new ObjectMapperDeserializer<>(VulnerabilityResult.class));
        }

        @AfterEach
        void afterEach() {
            testDriver.close();
        }

        @Test
        void test() {
            final UUID uuid = UUID.randomUUID();
            final var component = new Component();
            component.setUuid(uuid);
            component.setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2");

            inputTopic.pipeInput(uuid, component);

            assertThat(outputTopic.getQueueSize()).isEqualTo(3);
        }

        private static class NoOpProcessor extends ContextualProcessor<String, Component, String, VulnerabilityResult> {
            private final AnalyzerIdentity identity;

            private NoOpProcessor(final AnalyzerIdentity identity) {
                this.identity = identity;
            }

            @Override
            public void process(final Record<String, Component> record) {
                final var result = new VulnerabilityResult();
                result.setComponent(record.value());
                result.setIdentity(identity);
                result.setVulnerabilities(null);
                context().forward(record.withValue(result));
            }
        }

    }

}