package org.acme.analyzer;

import io.github.resilience4j.ratelimiter.RateLimiter;
import io.github.resilience4j.ratelimiter.RateLimiterConfig;
import io.github.resilience4j.ratelimiter.RateLimiterRegistry;
import io.micrometer.core.instrument.binder.cache.JCacheMetrics;
import io.micrometer.prometheus.PrometheusMeterRegistry;
import org.acme.model.VulnerabilityResult;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.configuration.MutableConfiguration;
import javax.cache.expiry.CreatedExpiryPolicy;
import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.context.Dependent;
import javax.enterprise.inject.Produces;
import javax.inject.Named;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.TimeUnit;

@Dependent
class SnykAnalyzerConfig {

    @Produces
    @ApplicationScoped
    @Named("snykRateLimiter")
    RateLimiter rateLimiter(@ConfigProperty(name = "scanner.snyk.ratelimit.timeout.duration") final Duration timeoutDuration,
                            @ConfigProperty(name = "scanner.snyk.ratelimit.limit.for.period") final int limitForPeriod,
                            @ConfigProperty(name = "scanner.snyk.ratelimit.limit.refresh.period") final Duration limitRefreshPeriod) {
        final RateLimiterConfig config = RateLimiterConfig.custom()
                .timeoutDuration(timeoutDuration)
                .limitRefreshPeriod(limitRefreshPeriod)
                .limitForPeriod(limitForPeriod)
                .build();

        return RateLimiterRegistry.of(config).rateLimiter("snyk");
    }

    @Produces
    @ApplicationScoped
    @Named("snykCache")
    Cache<String, List<VulnerabilityResult>> cache(final CacheManager cacheManager,
                                                   @ConfigProperty(name = "scanner.snyk.cache.validity.period") final Duration validityPeriod,
                                                   final PrometheusMeterRegistry meterRegistry) {
        final var configuration = new MutableConfiguration<String, List<VulnerabilityResult>>()
                .setStatisticsEnabled(true)
                .setExpiryPolicyFactory(() ->
                        new CreatedExpiryPolicy(new javax.cache.expiry.Duration(TimeUnit.MILLISECONDS, validityPeriod.toMillis())));

        final Cache<String, List<VulnerabilityResult>> cache = cacheManager.createCache("snyk", configuration);
        JCacheMetrics.monitor(meterRegistry, cache);
        return cache;
    }

}
