/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.acme.analyzer;

import alpine.common.logging.Logger;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityAnalysisLevel;
import org.acme.model.VulnerabilityResult;
import org.acme.model.VulnerableSoftware;
import org.acme.persistence.ComponentRepository;
import org.acme.persistence.VulnerableSoftwareRepository;
import org.acme.util.ComponentVersion;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import us.springett.parsers.cpe.CpeParser;
import us.springett.parsers.cpe.exceptions.CpeParsingException;
import us.springett.parsers.cpe.util.Convert;
import us.springett.parsers.cpe.values.LogicalValue;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Subscriber task that performs an analysis of component using internal CPE/PURL data.
 *
 * @author Steve Springett
 * @since 3.6.0
 */
@ApplicationScoped
public class InternalAnalyzer implements Analyzer {

    private static final Logger LOGGER = Logger.getLogger(InternalAnalyzer.class);

    public AnalyzerIdentity getAnalyzerIdentity() {
        return AnalyzerIdentity.INTERNAL_ANALYZER;
    }

    private VulnerabilityAnalysisLevel vulnerabilityAnalysisLevel;
    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final ComponentRepository componentRepository;
    private final boolean isEnabled;

    public InternalAnalyzer(final VulnerableSoftwareRepository vulnerableSoftwareRepository, final ComponentRepository componentRepository,
                            @ConfigProperty(name = "scanner.ossindex.enabled", defaultValue = "true") final boolean isEnabled){
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.componentRepository = componentRepository;
        this.isEnabled = isEnabled;
    }

    /**
     * Determines if the {@link InternalAnalyzer} is capable of analyzing the specified Component.
     *
     * @param component the Component to analyze
     * @return true if InternalAnalysisTask should analyze, false if not
     */
    public boolean isCapable(final Component component) {
        return component.getCpe() != null || component.getPurl() != null;
    }

    @Override
    public boolean isEnabled() {
        return isEnabled;
    }

    /**
     * Analyzes a list of Components.
     * @param components a list of Components
     */
    @Override
    public List<VulnerabilityResult> analyze(final List<Component> components) {
        return components.stream()
                .flatMap(component -> analyzeComponent(component).stream())
                .toList();
    }

    public List<VulnerabilityResult> analyzeComponent(final Component component) {
        List<VulnerabilityResult> vulnerabilityResults = new ArrayList<>();

        final Component c = componentRepository.getComponentByUUID(component.getUuid()); // Refresh component and attach to current pm.
        if (component != null)
            vulnerabilityResults.addAll(versionRangeAnalysis(component));
        return vulnerabilityResults;
    }

    private List<VulnerabilityResult> versionRangeAnalysis(final Component component) {
        us.springett.parsers.cpe.Cpe parsedCpe = null;
        List<VulnerabilityResult> vulnerabilityResults = new ArrayList<>();
        if (component.getCpe() != null) {
            try {
                parsedCpe = CpeParser.parse(component.getCpe());
            } catch (CpeParsingException e) {
                LOGGER.warn("An error occurred while parsing: " + component.getCpe() + " - The CPE is invalid and will be discarded. " + e.getMessage());
            }
        }
        List<VulnerableSoftware> vsList = Collections.emptyList();
        String componentVersion;
        String componentUpdate;
        if (parsedCpe != null) {
            componentVersion = parsedCpe.getVersion();
            componentUpdate = parsedCpe.getUpdate();
        } else if (component.getPurl() != null) {
            componentVersion = component.getPurl().getVersion();
            componentUpdate = null;
        } else {
            // Catch cases where the CPE couldn't be parsed and no PURL exists.
            // Should be rare, but could lead to NPEs later.
            LOGGER.debug("Neither CPE nor PURL of component " + component.getUuid() + " provide a version - skipping analysis");
            return vulnerabilityResults;
        }
        // In some cases, componentVersion may be null, such as when a Package URL does not have a version specified
        if (componentVersion == null) {
            return vulnerabilityResults;
        }
        // https://github.com/DependencyTrack/dependency-track/issues/1574
        // Some ecosystems use the "v" version prefix (e.g. v1.2.3) for their components.
        // However, both the NVD and GHSA store versions without that prefix.
        // For this reason, the prefix is stripped before running analyzeVersionRange.
        //
        // REVISIT THIS WHEN ADDING NEW VULNERABILITY SOURCES!
        if (componentVersion.length() > 1 && componentVersion.startsWith("v")) {
            if (componentVersion.matches("v0.0.0-\\d{14}-[a-f0-9]{12}")) {
                componentVersion = componentVersion.substring(7,11) + "-" + componentVersion.substring(11,13) + "-" + componentVersion.substring(13,15);
            } else {
                componentVersion = componentVersion.substring(1);
            }
        }

        if (parsedCpe != null) {
            vsList = vulnerableSoftwareRepository.getAllVulnerableSoftware(parsedCpe.getPart().getAbbreviation(), parsedCpe.getVendor(), parsedCpe.getProduct(), component.getPurl());
        } else {
            vsList = vulnerableSoftwareRepository.getAllVulnerableSoftware(null, null, null, component.getPurl());
        }
        vulnerabilityResults.addAll(analyzeVersionRange(vsList, componentVersion, componentUpdate, component, vulnerabilityAnalysisLevel));
        return  vulnerabilityResults;
    }
    public List<VulnerabilityResult> analyzeVersionRange(final List<VulnerableSoftware> vsList,
                                                         final String targetVersion, final String targetUpdate, final Component component,
                                                         final VulnerabilityAnalysisLevel vulnerabilityAnalysisLevel) {
        List<VulnerabilityResult> vulnerabilityResults = new ArrayList<>();
        for (final VulnerableSoftware vs: vsList) {
            if (compareVersions(vs, targetVersion) && compareUpdate(vs, targetUpdate)) {
                if (vs.getVulnerabilities() != null) {
                    for (final Vulnerability vulnerability : vs.getVulnerabilities()) {
                        //FIXME NotificationUtil.analyzeNotificationCriteria(vulnerability, component, vulnerabilityAnalysisLevel);
                        VulnerabilityResult vulnerabilityResult = new VulnerabilityResult();
                        vulnerabilityResult.setVulnerability(vulnerability);
                        vulnerabilityResult.setComponent(component);
                        vulnerabilityResult.setIdentity(this.getAnalyzerIdentity());
                        vulnerabilityResults.add(vulnerabilityResult);
                    }
                }
            }
        }
        return vulnerabilityResults;
    }
    public static boolean compareVersions(VulnerableSoftware vs, String targetVersion) {
        // For VulnerableSoftware (could actually be hardware) without a version number.
        // e.g. cpe:2.3:o:intel:2000e_firmware:-:*:*:*:*:*:*:*
        if (LogicalValue.NA.getAbbreviation().equals(vs.getVersion())) {
            return true;
        }
        //if any of the four conditions will be evaluated - then true;
        boolean result = (vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty())
                || (vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty())
                || (vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty())
                || (vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty());

        // Modified from original by Steve Springett
        // Added null check: vs.getVersion() != null as purl sources that use version ranges may not have version populated.
        if (!result && vs.getVersion() != null && compareAttributes(vs.getVersion(), targetVersion)) {
            return true;
        }

        final ComponentVersion target = new ComponentVersion(targetVersion);
        if (target.getVersionParts().isEmpty()) {
            return false;
        }
        if (result && vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty()) {
            final ComponentVersion endExcluding = new ComponentVersion(vs.getVersionEndExcluding());
            result = endExcluding.compareTo(target) > 0;
        }
        if (result && vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty()) {
            final ComponentVersion startExcluding = new ComponentVersion(vs.getVersionStartExcluding());
            result = startExcluding.compareTo(target) < 0;
        }
        if (result && vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty()) {
            final ComponentVersion endIncluding = new ComponentVersion(vs.getVersionEndIncluding());
            result &= endIncluding.compareTo(target) >= 0;
        }
        if (result && vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty()) {
            final ComponentVersion startIncluding = new ComponentVersion(vs.getVersionStartIncluding());
            result &= startIncluding.compareTo(target) <= 0;
        }
        return result;
    }
    public static boolean compareAttributes(String left, String right) {
        //the numbers below come from the CPE Matching standard
        //Table 6-2: Enumeration of Attribute Comparison Set Relations
        //https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7696.pdf

        if (left.equalsIgnoreCase(right)) {
            //1 6 9
            return true;
        } else if (LogicalValue.ANY.getAbbreviation().equals(left)) {
            //2 3 4
            return true;
        } else if (LogicalValue.NA.getAbbreviation().equals(left)) {
            //5 7 8
            return false;
        } else if (LogicalValue.NA.getAbbreviation().equals(right)) {
            //12 16
            return false;
        } else if (LogicalValue.ANY.getAbbreviation().equals(right)) {
            //13 15
            return false;
        }
        //10 11 14 17
        if (containsSpecialCharacter(left)) {
            final Pattern p = Convert.wellFormedToPattern(left.toLowerCase());
            final Matcher m = p.matcher(right.toLowerCase());
            return m.matches();
        }
        return false;
    }

    public static boolean containsSpecialCharacter(String value) {
        for (int x = 0; x < value.length(); x++) {
            char c = value.charAt(x);
            if (c == '?' || c == '*') {
                return true;
            } else if (c == '\\') {
                //skip the next character because it is quoted
                x += 1;
            }
        }
        return false;
    }

    private static boolean compareUpdate(VulnerableSoftware vs, String targetUpdate) {
        if (LogicalValue.NA.getAbbreviation().equals(vs.getUpdate())) {
            return false;
        }
        if (vs.getUpdate() == null && targetUpdate == null) {
            return true;
        }
        // Moving this above the null OR check to reflect method comments (ANY should mean ANY)
        // This is necessary for fuzz matching when a PURL which assumes null
        // is matched to a CPE which defaults to ANY
        if (LogicalValue.ANY.getAbbreviation().equals(targetUpdate) || LogicalValue.ANY.getAbbreviation().equals(vs.getUpdate())) {
            return true;
        }
        if (vs.getUpdate() == null || targetUpdate == null) {
            return false;
        }
        return compareAttributes(vs.getUpdate(), targetUpdate);
    }
}
