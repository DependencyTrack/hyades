package org.acme.processor.snyk;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.core.IntervalFunction;
import io.github.resilience4j.micrometer.tagged.TaggedCircuitBreakerMetrics;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;
import io.quarkus.kafka.client.serialization.ObjectMapperSerializer;
import org.acme.config.CircuitBreakerConfig;
import org.acme.config.RetryConfig;
import org.acme.config.SnykConfig;
import org.acme.modelx.ScanKey;
import org.acme.modelx.ScanTask;
import org.acme.processor.retry.RetryableRecord;
import org.acme.serializers.ScanKeySerde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Named;
import javax.ws.rs.WebApplicationException;

import static org.apache.kafka.streams.state.Stores.inMemoryKeyValueStore;
import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;

class SnykProcessorConfiguration {

    @Produces
    @ApplicationScoped
    @Named("snykRetryStoreBuilder")
    StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder() {
        return keyValueStoreBuilder(inMemoryKeyValueStore("snyk-retry-store"),
                new ScanKeySerde(), Serdes.serdeFrom(new ObjectMapperSerializer<>(),
                        new ObjectMapperDeserializer<>(new TypeReference<>() {
                        })));
    }

    @Produces
    @ApplicationScoped
    @Named("snykCircuitBreaker")
    CircuitBreaker circuitBreaker(final SnykConfig config,
                                  final MeterRegistry meterRegistry) {
        final CircuitBreakerRegistry registry = CircuitBreakerRegistry.of(
                CircuitBreakerConfig.toConfigBuilder(config.circuitBreaker())
                        .recordExceptions(WebApplicationException.class)
                        .build()
        );

        TaggedCircuitBreakerMetrics
                .ofCircuitBreakerRegistry(registry)
                .bindTo(meterRegistry);

        return registry.circuitBreaker("snyk");
    }

    @Produces
    @ApplicationScoped
    @Named("snykRetryIntervalFunction")
    IntervalFunction retryIntervalFunction(final SnykConfig config) {
        return RetryConfig.toIntervalFunction(config.retry());
    }

}
