package org.acme.processor.snyk;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import org.acme.client.snyk.SnykClient;
import org.acme.config.SnykConfig;
import org.acme.modelx.ScanKey;
import org.acme.modelx.ScanResult;
import org.acme.modelx.ScanTask;
import org.acme.processor.retry.RetryableRecord;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.Set;

@ApplicationScoped
public class SnykProcessorSupplier implements ProcessorSupplier<String, ScanTask, String, ScanResult> {

    private final SnykClient client;
    private final SnykConfig config;
    private final Cache cache;
    private final CircuitBreaker circuitBreaker;
    private final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    @Inject
    public SnykProcessorSupplier(final SnykClient client,
                                 final SnykConfig config,
                                 @CacheName("snyk") final Cache cache,
                                 @Named("snykCircuitBreaker") final CircuitBreaker circuitBreaker,
                                 @Named("snykRetryStoreBuilder") final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder,
                                 @Named("snykRetryIntervalFunction") final IntervalFunction retryIntervalFunction,
                                 final MeterRegistry meterRegistry) {
        this.client = client;
        this.config = config;
        this.cache = cache;
        this.circuitBreaker = circuitBreaker;
        this.retryStoreBuilder = retryStoreBuilder;
        this.retryIntervalFunction = retryIntervalFunction;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, ScanTask, String, ScanResult> get() {
        return new SnykProcessor(client, cache, circuitBreaker, config.severitySource(),
                retryStoreBuilder.name(), retryIntervalFunction, config.retry().maxAttempts(),
                meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(retryStoreBuilder);
    }

}
