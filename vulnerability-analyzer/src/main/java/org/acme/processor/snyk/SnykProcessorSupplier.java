package org.acme.processor.snyk;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import org.acme.client.snyk.SnykClient;
import org.acme.config.SnykConfig;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.acme.processor.RetryableRecord;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.Set;
import java.util.UUID;

@ApplicationScoped
public class SnykProcessorSupplier implements ProcessorSupplier<String, Component, String, VulnerabilityResult> {

    private final SnykClient client;
    private final SnykConfig config;
    private final CircuitBreaker circuitBreaker;
    private final StoreBuilder<KeyValueStore<UUID, RetryableRecord<String, Component>>> retryStoreBuilder;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    @Inject
    public SnykProcessorSupplier(final SnykClient client,
                                 @Named("snykCircuitBreaker") final CircuitBreaker circuitBreaker,
                                 @Named("snykRetryStoreBuilder") final StoreBuilder<KeyValueStore<UUID, RetryableRecord<String, Component>>> retryStoreBuilder,
                                 @Named("snykRetryIntervalFunction") final IntervalFunction retryIntervalFunction,
                                 final SnykConfig config,
                                 final MeterRegistry meterRegistry) {
        this.client = client;
        this.config = config;
        this.circuitBreaker = circuitBreaker;
        this.retryStoreBuilder = retryStoreBuilder;
        this.retryIntervalFunction = retryIntervalFunction;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, Component, String, VulnerabilityResult> get() {
        return new SnykProcessor(client, circuitBreaker, retryStoreBuilder.name(),
                retryIntervalFunction, config.retry().maxAttempts(), meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(retryStoreBuilder);
    }

}
