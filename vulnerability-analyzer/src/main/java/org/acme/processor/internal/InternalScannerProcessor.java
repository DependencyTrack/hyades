package org.acme.processor.internal;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CaffeineCache;
import io.quarkus.narayana.jta.QuarkusTransaction;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityResult;
import org.acme.model.VulnerableSoftware;
import org.acme.persistence.VulnerableSoftwareRepository;
import org.acme.util.ComponentVersion;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.Record;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import us.springett.parsers.cpe.CpeParser;
import us.springett.parsers.cpe.exceptions.CpeParsingException;
import us.springett.parsers.cpe.util.Convert;
import us.springett.parsers.cpe.values.LogicalValue;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class InternalScannerProcessor extends ContextualProcessor<String, Component, String, VulnerabilityResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(InternalScannerProcessor.class);

    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final Cache cache;

    InternalScannerProcessor(final VulnerableSoftwareRepository vulnerableSoftwareRepository,
                             final Cache cache) {
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.cache = cache;
    }

    public void process(final Record<String, Component> record) {
        context().forward(record.withValue(analyzeComponent(record.value())).withTimestamp(context().currentSystemTimeMs()));
    }

    public VulnerabilityResult analyzeComponent(final Component component) {
        VulnerabilityResult vulnerabilityResult = null;
        if (component != null && cache.as(CaffeineCache.class).getIfPresent(component.getUuid()) == null) {
            LOGGER.info("Cache miss for " + component.getName());
            vulnerabilityResult = versionRangeAnalysis(component);
        } else if (component != null && cache.as(CaffeineCache.class).getIfPresent(component.getUuid()) != null) {
            LOGGER.info("Cache hit for " + component.getName());
            vulnerabilityResult = (VulnerabilityResult) cache.as(CaffeineCache.class).getIfPresent(component.getUuid()).join();

        }
        return vulnerabilityResult;
    }

    private VulnerabilityResult versionRangeAnalysis(final Component component) {
        final us.springett.parsers.cpe.Cpe parsedCpe = Optional.ofNullable(component.getCpe())
                .map(cpe -> {
                    try {
                        return CpeParser.parse(component.getCpe());
                    } catch (CpeParsingException e) {
                        LOGGER.warn("An error occurred while parsing: " + component.getCpe() + " - The CPE is invalid and will be discarded. " + e.getMessage());
                        return null;
                    }
                })
                .orElse(null);
        VulnerabilityResult vulnerabilityResult = new VulnerabilityResult();
        vulnerabilityResult.setIdentity(AnalyzerIdentity.INTERNAL_ANALYZER);
        vulnerabilityResult.setComponent(component);

        List<VulnerableSoftware> vsList;
        String componentVersion;
        String componentUpdate;
        if (parsedCpe != null) {
            componentVersion = parsedCpe.getVersion();
            componentUpdate = parsedCpe.getUpdate();
        } else if (component.getPurl() != null) {
            componentVersion = component.getPurl().getVersion();
            componentUpdate = null;
        } else {
            // Catch cases where the CPE couldn't be parsed and no PURL exists.
            // Should be rare, but could lead to NPEs later.
            LOGGER.debug("Neither CPE nor PURL of component " + component.getUuid() + " provide a version - skipping analysis");
            return vulnerabilityResult;
        }
        // In some cases, componentVersion may be null, such as when a Package URL does not have a version specified
        if (componentVersion == null) {
            return vulnerabilityResult;
        }
        // https://github.com/DependencyTrack/dependency-track/issues/1574
        // Some ecosystems use the "v" version prefix (e.g. v1.2.3) for their components.
        // However, both the NVD and GHSA store versions without that prefix.
        // For this reason, the prefix is stripped before running analyzeVersionRange.
        //
        // REVISIT THIS WHEN ADDING NEW VULNERABILITY SOURCES!
        if (componentVersion.length() > 1 && componentVersion.startsWith("v")) {
            if (componentVersion.matches("v0.0.0-\\d{14}-[a-f0-9]{12}")) {
                componentVersion = componentVersion.substring(7, 11) + "-" + componentVersion.substring(11, 13) + "-" + componentVersion.substring(13, 15);
            } else {
                componentVersion = componentVersion.substring(1);
            }
        }

        if (parsedCpe != null) {
            vsList = QuarkusTransaction.call(() -> vulnerableSoftwareRepository.getAllVulnerableSoftware(parsedCpe.getPart().getAbbreviation(), parsedCpe.getVendor(), parsedCpe.getProduct(), component.getPurl()));
            vulnerabilityResult.setCPE(true);
        } else {
            vsList = QuarkusTransaction.call(() -> vulnerableSoftwareRepository.getAllVulnerableSoftware(null, null, null, component.getPurl()));
        }

        vulnerabilityResult = analyzeVersionRange(vsList, componentVersion, componentUpdate, component);
        cache.as(CaffeineCache.class).put(component.getUuid(), CompletableFuture.completedFuture(vulnerabilityResult));
        return vulnerabilityResult;
    }

    VulnerabilityResult analyzeVersionRange(final List<VulnerableSoftware> vsList,
                                            final String targetVersion, final String targetUpdate,
                                            final Component component) {
        VulnerabilityResult vulnerabilityResult = new VulnerabilityResult();
        vulnerabilityResult.setComponent(component);
        vulnerabilityResult.setIdentity(AnalyzerIdentity.INTERNAL_ANALYZER);
        List<Vulnerability> vulnerabilities = null;
        for (final VulnerableSoftware vs : vsList) {
            if (compareVersions(vs, targetVersion) && compareUpdate(vs, targetUpdate)) {
                if (vs.getVulnerabilities() != null) {
                    vulnerabilities = new ArrayList<>();
                    for (final Vulnerability vulnerability : vs.getVulnerabilities()) {
                        //FIXME NotificationUtil.analyzeNotificationCriteria(vulnerability, component, vulnerabilityAnalysisLevel);
                        vulnerability.setDescription(""); //FIXME  the size of description TBD
                        vulnerabilities.add(vulnerability);
                    }
                }
            }
        }

        vulnerabilityResult.setVulnerabilities(vulnerabilities);
        return vulnerabilityResult;
    }

    static boolean compareVersions(VulnerableSoftware vs, String targetVersion) {
        // For VulnerableSoftware (could actually be hardware) without a version number.
        // e.g. cpe:2.3:o:intel:2000e_firmware:-:*:*:*:*:*:*:*
        if (LogicalValue.NA.getAbbreviation().equals(vs.getVersion())) {
            return true;
        }
        //if any of the four conditions will be evaluated - then true;
        boolean result = (vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty())
                || (vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty())
                || (vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty())
                || (vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty());

        // Modified from original by Steve Springett
        // Added null check: vs.getVersion() != null as purl sources that use version ranges may not have version populated.
        if (!result && vs.getVersion() != null && compareAttributes(vs.getVersion(), targetVersion)) {
            return true;
        }

        final ComponentVersion target = new ComponentVersion(targetVersion);
        if (target.getVersionParts() != null && target.getVersionParts().isEmpty()) {
            return false;
        }
        if (result && vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty()) {
            final ComponentVersion endExcluding = new ComponentVersion(vs.getVersionEndExcluding());
            result = endExcluding.compareTo(target) > 0;
        }
        if (result && vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty()) {
            final ComponentVersion startExcluding = new ComponentVersion(vs.getVersionStartExcluding());
            result = startExcluding.compareTo(target) < 0;
        }
        if (result && vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty()) {
            final ComponentVersion endIncluding = new ComponentVersion(vs.getVersionEndIncluding());
            result &= endIncluding.compareTo(target) >= 0;
        }
        if (result && vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty()) {
            final ComponentVersion startIncluding = new ComponentVersion(vs.getVersionStartIncluding());
            result &= startIncluding.compareTo(target) <= 0;
        }
        return result;
    }

    static boolean compareAttributes(String left, String right) {
        //the numbers below come from the CPE Matching standard
        //Table 6-2: Enumeration of Attribute Comparison Set Relations
        //https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7696.pdf

        if (left.equalsIgnoreCase(right)) {
            //1 6 9
            return true;
        } else if (LogicalValue.ANY.getAbbreviation().equals(left)) {
            //2 3 4
            return true;
        } else if (LogicalValue.NA.getAbbreviation().equals(left)) {
            //5 7 8
            return false;
        } else if (LogicalValue.NA.getAbbreviation().equals(right)) {
            //12 16
            return false;
        } else if (LogicalValue.ANY.getAbbreviation().equals(right)) {
            //13 15
            return false;
        }
        //10 11 14 17
        if (containsSpecialCharacter(left)) {
            final Pattern p = Convert.wellFormedToPattern(left.toLowerCase());
            final Matcher m = p.matcher(right.toLowerCase());
            return m.matches();
        }
        return false;
    }

    static boolean containsSpecialCharacter(String value) {
        for (int x = 0; x < value.length(); x++) {
            char c = value.charAt(x);
            if (c == '?' || c == '*') {
                return true;
            } else if (c == '\\') {
                //skip the next character because it is quoted
                x += 1;
            }
        }
        return false;
    }

    static boolean compareUpdate(VulnerableSoftware vs, String targetUpdate) {
        if (LogicalValue.NA.getAbbreviation().equals(vs.getUpdate())) {
            return false;
        }
        if (vs.getUpdate() == null && targetUpdate == null) {
            return true;
        }
        // Moving this above the null OR check to reflect method comments (ANY should mean ANY)
        // This is necessary for fuzz matching when a PURL which assumes null
        // is matched to a CPE which defaults to ANY
        if (LogicalValue.ANY.getAbbreviation().equals(targetUpdate) || LogicalValue.ANY.getAbbreviation().equals(vs.getUpdate())) {
            return true;
        }
        if (vs.getUpdate() == null || targetUpdate == null) {
            return false;
        }
        return compareAttributes(vs.getUpdate(), targetUpdate);
    }
}
