package org.acme.processor;

import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import org.acme.client.ossindex.ComponentReport;
import org.acme.client.ossindex.ComponentReportRequest;
import org.acme.client.ossindex.ComponentReportVulnerability;
import org.acme.client.ossindex.ModelConverter;
import org.acme.client.ossindex.OssIndexClient;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityResult;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.processor.Cancellable;
import org.apache.kafka.streams.processor.PunctuationType;
import org.apache.kafka.streams.processor.api.ProcessorContext;
import org.apache.kafka.streams.processor.api.Record;
import org.apache.kafka.streams.processor.api.RecordMetadata;
import org.apache.kafka.streams.state.KeyValueIterator;
import org.apache.kafka.streams.state.KeyValueStore;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.MultivaluedHashMap;
import javax.ws.rs.core.MultivaluedMap;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

public class OssIndexProcessor extends RetryingProcessor<String, Component, String, VulnerabilityResult, UUID> {

    private static final Logger LOGGER = LoggerFactory.getLogger(OssIndexProcessor.class);
    private static final String PARTITION_ID_PROPERTY = "partitionId";

    private final String batchStoreName;
    private final OssIndexClient client;
    private final CircuitBreaker circuitBreaker;
    private final MeterRegistry meterRegistry;
    private final Map<Integer, Long> lastBatchAnalysis;
    private KeyValueStore<Integer, List<RetryableRecord<String, Component>>> batchStore;
    private Cancellable batchPunctuator;

    OssIndexProcessor(final String batchStoreName, final String retryStoreName,
                      final OssIndexClient client, final CircuitBreaker circuitBreaker,
                      final IntervalFunction retryIntervalFunction, final int retryMaxAttempts,
                      final MeterRegistry meterRegistry) {
        super(retryStoreName, retryIntervalFunction, retryMaxAttempts, meterRegistry);
        this.batchStoreName = batchStoreName;
        this.lastBatchAnalysis = new HashMap<>();
        this.client = client;
        this.circuitBreaker = circuitBreaker;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public void init(final ProcessorContext<String, VulnerabilityResult> context) {
        super.init(context);

        batchStore = context().getStateStore(batchStoreName);
        batchPunctuator = context().schedule(Duration.ofSeconds(5), PunctuationType.WALL_CLOCK_TIME, this::punctuateBatch);
    }

    @Override
    public void process(final RetryableRecord<String, Component> record) {
        // Records are batched based on the ID of the partition they're in.
        // It's unlikely that we can't access the partition ID, but better be on the safe side.
        final Optional<Integer> partitionId = context().recordMetadata().map(RecordMetadata::partition);
        if (partitionId.isEmpty()) {
            LOGGER.error("Unable to get partition ID for record; Dropping");
            meterRegistry.counter("ossindex.records.dropped", List.of(Tag.of("reason", "partitionIdMissing"))).increment();
            reportFailure(record, new RuntimeException("Record is missing the partitionId property"));
            return;
        }

        meterRegistry.counter("ossindex.records.consumed").increment();

        addToBatch(record.withProperty(PARTITION_ID_PROPERTY, partitionId.get()));
    }

    @Override
    public void close() {
        super.close();

        Optional.ofNullable(batchPunctuator).ifPresent(Cancellable::cancel);
    }

    @Override
    protected UUID extractRetryKey(final String key, final Component value) {
        return value.getUuid();
    }

    @Override
    protected void onRetry(final RetryableRecord<String, Component> record) {
        addToBatch(record);
    }

    @Override
    protected void onMaxRetriesExceeded(final RetryableRecord<String, Component> record) {
        reportFailure(record, new RuntimeException("Max retry attempts exceeded"));
    }

    private void punctuateBatch(final long timestamp) {
        try (final KeyValueIterator<Integer, List<RetryableRecord<String, Component>>> valueIterator = batchStore.all()) {
            while (valueIterator.hasNext()) {
                final KeyValue<Integer, List<RetryableRecord<String, Component>>> keyValue = valueIterator.next();
                if (keyValue != null && !keyValue.value.isEmpty()) {
                    final Long lastAnalysis = lastBatchAnalysis.get(keyValue.key);
                    if (lastAnalysis != null && (context().currentSystemTimeMs() - lastAnalysis) < Duration.ofSeconds(5).toMillis()) {
                        LOGGER.warn("Batch for partition {} is not yet due for submission", keyValue.key);
                        continue;
                    }

                    LOGGER.info("Forwarding batch (key: {}, records: {})", keyValue.key, keyValue.value.size());
                    batchStore.delete(keyValue.key);
                    lastBatchAnalysis.put(keyValue.key, context().currentSystemTimeMs());
                    analyzeBatch(keyValue.value);
                }
            }
        }
    }

    private void addToBatch(final RetryableRecord<String, Component> record) {
        final Optional<Integer> partitionId = record.getPropertyAsInteger(PARTITION_ID_PROPERTY);
        if (partitionId.isEmpty()) {
            LOGGER.error("Record is missing the partitionId property; Dropping");
            meterRegistry.counter("ossindex.records.dropped", List.of(Tag.of("reason", "partitionIdMissing"))).increment();
            reportFailure(record, new RuntimeException("Record is missing the partitionId property"));
            return;
        }

        List<RetryableRecord<String, Component>> batch = batchStore.get(partitionId.get());
        if (batch == null) {
            batch = new ArrayList<>(List.of(record));
        } else {
            batch.add(record);
        }

        if (batch.size() >= 128) {
            batchStore.delete(partitionId.get());
            lastBatchAnalysis.put(partitionId.get(), context().currentSystemTimeMs());
            analyzeBatch(batch);
        } else {
            batchStore.put(partitionId.get(), batch);
        }
    }

    private void analyzeBatch(final List<RetryableRecord<String, Component>> batch) {
        LOGGER.info("Analyzing batch of {} records", batch.size());

        final MultivaluedMap<String, RetryableRecord<String, Component>> purlRecords = new MultivaluedHashMap<>();
        for (final RetryableRecord<String, Component> record : batch) {
            purlRecords.add(record.key(), record);
        }

        final List<ComponentReport> reports;
        try {
            reports = circuitBreaker.executeSupplier(() -> client.getComponentReports(new ComponentReportRequest(purlRecords.keySet())));
        } catch (WebApplicationException e) {
            switch (e.getResponse().getStatus()) {
                case 429, 502, 503, 504 -> {
                    LOGGER.warn("Encountered a retryable error with status {} while analyzing batch of {} records",
                            e.getResponse().getStatus(), batch.size());
                    batch.forEach(this::scheduleForRetry);
                }
                default -> {
                    LOGGER.error("Analysis of batch with {} records failed: {}", batch.size(), e);
                    meterRegistry.counter("ossindex.retry", List.of(Tag.of("status", "failedWithoutRetry"))).increment();
                    meterRegistry.counter("ossindex.records.dropped", List.of(Tag.of("reason", "failed"))).increment();
                    batch.forEach(record -> reportFailure(record, e));
                }
            }
            return;
        } catch (CallNotPermittedException e) {
            LOGGER.warn("Couldn't analyze batch of {} records because circuit breaker is open", batch.size());
            batch.forEach(this::scheduleForRetry);
            return;
        } catch (Exception e) {
            LOGGER.error("Analysis of batch with {} records failed due to an unexpected error", batch.size(), e);
            meterRegistry.counter("ossindex.records.dropped", List.of(Tag.of("reason", "unexpectedError"))).increment(batch.size());
            batch.forEach(record -> reportFailure(record, e));
            return;
        }

        for (final ComponentReport report : reports) {
            final List<RetryableRecord<String, Component>> affectedRecords = purlRecords.get(report.coordinates());
            if (affectedRecords == null) {
                LOGGER.warn("Reported coordinates do not match any records: " + report.coordinates());
                continue;
            }

            for (final RetryableRecord<String, Component> record : affectedRecords) {
                if (record.retryAttempts() == 0) {
                    meterRegistry.counter("ossindex.retry", List.of(Tag.of("status", "succeededWithoutRetry"))).increment();
                } else {
                    meterRegistry.counter("ossindex.retry", List.of(Tag.of("status", "succeededWithRetry"))).increment();
                }
            }

            if (report.vulnerabilities().isEmpty()) {
                for (final RetryableRecord<String, Component> record : affectedRecords) {
                    final var result = new VulnerabilityResult();
                    result.setComponent(record.value());
                    result.setIdentity(AnalyzerIdentity.OSSINDEX_ANALYZER);
                    result.setVulnerability(null);
                    context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
                }
            } else {
                for (final ComponentReportVulnerability reportedVuln : report.vulnerabilities()) {
                    final Vulnerability vuln = ModelConverter.convert(reportedVuln);
                    for (final RetryableRecord<String, Component> record : affectedRecords) {
                        final var result = new VulnerabilityResult();
                        result.setComponent(record.value());
                        result.setIdentity(AnalyzerIdentity.OSSINDEX_ANALYZER);
                        result.setVulnerability(vuln);
                        context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
                    }
                }
            }
        }
    }

    private void reportFailure(final RetryableRecord<String, Component> record, final Throwable failureCause) {
        final var result = VulnerabilityResult.forFailure(failureCause, record.value(), AnalyzerIdentity.OSSINDEX_ANALYZER);
        context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
    }

}
