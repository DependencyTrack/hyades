package org.acme.processor;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;
import io.quarkus.kafka.client.serialization.ObjectMapperSerializer;
import org.acme.client.ossindex.OssIndexClient;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.WebApplicationException;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import static org.apache.kafka.streams.state.Stores.inMemoryKeyValueStore;
import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;

@ApplicationScoped
public class OssIndexProcessorSupplier implements ProcessorSupplier<String, Component, String, VulnerabilityResult> {

    private static final String BATCH_STORE_NAME = "ossindex-batch";
    private static final String RETRY_STORE_NAME = "ossindex-retry";
    private static final StoreBuilder<KeyValueStore<Integer, List<RetryableRecord<String, Component>>>> BATCH_STORE_BUILDER;
    private static final StoreBuilder<KeyValueStore<UUID, RetryableRecord<String, Component>>> RETRY_STORE_BUILDER;

    static {
        BATCH_STORE_BUILDER = keyValueStoreBuilder(inMemoryKeyValueStore(BATCH_STORE_NAME),
                Serdes.Integer(), Serdes.serdeFrom(new ObjectMapperSerializer<>(),
                        new ObjectMapperDeserializer<>(new TypeReference<>() {
                        })));
        RETRY_STORE_BUILDER = keyValueStoreBuilder(inMemoryKeyValueStore(RETRY_STORE_NAME),
                Serdes.UUID(), Serdes.serdeFrom(new ObjectMapperSerializer<>(),
                        new ObjectMapperDeserializer<>(new TypeReference<>() {
                        })));
    }

    private final OssIndexClient client;
    private final OssIndexConfig config;
    private final CircuitBreaker circuitBreaker;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    @Inject
    public OssIndexProcessorSupplier(@RestClient final OssIndexClient client, final OssIndexConfig config,
                                     final MeterRegistry meterRegistry) {
        this.client = client;
        this.config = config;
        this.circuitBreaker = CircuitBreakerRegistry.of(
                        CircuitBreakerConfig.from(CircuitBreakerConfig.ofDefaults())
                                .slidingWindowType(CircuitBreakerConfig.SlidingWindowType.COUNT_BASED)
                                .slidingWindowSize(config.circuitBreakerSlidingWindowSize())
                                .failureRateThreshold(config.circuitBreakerFailureRateThresholdPercentage())
                                .waitDurationInOpenState(config.circuitBreakerWaitDurationInOpenState())
                                .recordExceptions(WebApplicationException.class)
                                .build()
                )
                .circuitBreaker("ossindex-api");
        this.retryIntervalFunction = IntervalFunction.ofExponentialRandomBackoff(
                config.retryInitialDelay(), config.retryMultiplier(), config.retryMaxDuration());
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, Component, String, VulnerabilityResult> get() {
        return new OssIndexProcessor(BATCH_STORE_NAME, RETRY_STORE_NAME, client, circuitBreaker,
                retryIntervalFunction, config.retryMaxAttempts(), meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(BATCH_STORE_BUILDER, RETRY_STORE_BUILDER);
    }

}
