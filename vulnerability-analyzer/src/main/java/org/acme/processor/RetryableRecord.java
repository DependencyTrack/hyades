package org.acme.processor;

import org.apache.kafka.streams.processor.api.Record;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * An extension of {@link Record} that holds additional retry information.
 *
 * @param key           Key of the record
 * @param value         Value of the record
 * @param properties    Optional additional properties
 * @param nextRetryAt   Timestamp of the next retry in milliseconds
 * @param retryAttempts Number of retry attempts
 * @param <K>           Type of the key
 * @param <V>           Type of the value
 */
public record RetryableRecord<K, V>(K key, V value, Map<String, Object> properties,
                                    long nextRetryAt, int retryAttempts) {

    public static <K, V> RetryableRecord<K, V> fromRecord(final Record<K, V> record) {
        return new RetryableRecord<>(record.key(), record.value(), null, 0, 0);
    }

    public RetryableRecord<K, V> withProperty(final String name, final Object value) {
        final Map<String, Object> properties = Optional.ofNullable(this.properties).orElseGet(HashMap::new);
        properties.put(name, value);
        return withProperties(properties);
    }

    public RetryableRecord<K, V> withProperties(final Map<String, Object> properties) {
        return new RetryableRecord<>(this.key, this.value, properties, this.nextRetryAt, this.retryAttempts);
    }

    /**
     * Create a copy of this {@link RetryableRecord} with a given {@code nextRetryAt} value,
     * implicitly incrementing {@code retryAttempts}.
     *
     * @param nextRetryAt New retry timestamp in milliseconds
     * @return The new {@link RetryableRecord}
     */
    public RetryableRecord<K, V> withNextRetryAt(final long nextRetryAt) {
        return new RetryableRecord<>(this.key, this.value, this.properties(), nextRetryAt, this.retryAttempts + 1);
    }

    public Optional<Integer> getPropertyAsInteger(final String propertyName) {
        if (properties == null) {
            return Optional.empty();
        }

        return Optional.ofNullable(properties.get(propertyName))
                .filter(value -> value instanceof Integer)
                .map(value -> (Integer) value);
    }

}
