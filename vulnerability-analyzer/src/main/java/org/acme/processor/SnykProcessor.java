package org.acme.processor;

import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import org.acme.client.snyk.Issue;
import org.acme.client.snyk.ModelConverter;
import org.acme.client.snyk.Page;
import org.acme.client.snyk.PageData;
import org.acme.client.snyk.SeveritySource;
import org.acme.client.snyk.SnykClient;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.acme.resolver.CweResolver;
import org.apache.kafka.streams.processor.api.Record;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.ws.rs.WebApplicationException;
import java.util.UUID;

public class SnykProcessor extends RetryingProcessor<String, Component, String, VulnerabilityResult, UUID> {

    private static final Logger LOGGER = LoggerFactory.getLogger(SnykProcessor.class);

    private final SnykClient client;
    private final CircuitBreaker circuitBreaker;
    private final MeterRegistry meterRegistry;

    public SnykProcessor(final SnykClient client, final CircuitBreaker circuitBreaker,
                         final String retryStoreName, final IntervalFunction retryIntervalFunction,
                         final int retryMaxAttempts, final MeterRegistry meterRegistry) {
        super(retryStoreName, retryIntervalFunction, retryMaxAttempts, meterRegistry);
        this.client = client;
        this.circuitBreaker = circuitBreaker;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public void process(final RetryableRecord<String, Component> record) {
        final Page<Issue> issuePage;
        try {
            issuePage = circuitBreaker.executeCheckedSupplier(() -> client.getIssues(record.key()));
        } catch (Throwable e) {
            if (e instanceof final WebApplicationException wae) {
                switch (wae.getResponse().getStatus()) {
                    case 429, 500, 502, 503, 504 -> {
                        LOGGER.warn("Encountered a retryable error with status {} while analyzing record {}",
                                wae.getResponse().getStatus(), record);
                        scheduleForRetry(record);
                    }
                    default -> {
                        LOGGER.error("Analysis of record {} failed: {}", record, e);
                        reportFailure(record, e);
                    }
                }
            } else if (e instanceof CallNotPermittedException) {
                LOGGER.warn("Couldn't analyze record {} because circuit breaker is open", record);
                scheduleForRetry(record);
                return;
            } else {
                LOGGER.error("Analysis of record {} failed: {}", record, e);
                reportFailure(record, e);
            }
            return;
        }

        if (issuePage.data() == null || issuePage.data().isEmpty()) {
            final var result = new VulnerabilityResult();
            result.setComponent(record.value());
            result.setIdentity(AnalyzerIdentity.SNYK_ANALYZER);
            result.setVulnerability(null);
            context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
            return;
        }

        for (final PageData<Issue> data : issuePage.data()) {
            if (!"issue".equals(data.type())) {
                continue;
            }

            final var result = new VulnerabilityResult();
            result.setComponent(record.value());
            result.setIdentity(AnalyzerIdentity.SNYK_ANALYZER);
            result.setVulnerability(ModelConverter.convert(CweResolver.getInstance(), SeveritySource.NVD, data.attributes()));
            context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
        }
    }

    @Override
    protected UUID extractRetryKey(final String key, final Component value) {
        return value.getUuid();
    }

    @Override
    protected void onRetry(final RetryableRecord<String, Component> record) {
        process(record);
    }

    @Override
    protected void onMaxRetriesExceeded(final RetryableRecord<String, Component> record) {
        reportFailure(record, new RuntimeException("Max retry attempts exceeded"));
    }

    private void reportFailure(final RetryableRecord<String, Component> record, final Throwable failureCause) {
        final var result = VulnerabilityResult.forFailure(failureCause, record.value(), AnalyzerIdentity.SNYK_ANALYZER);
        context().forward(new Record<>(record.key(), result, context().currentSystemTimeMs()));
    }

}
