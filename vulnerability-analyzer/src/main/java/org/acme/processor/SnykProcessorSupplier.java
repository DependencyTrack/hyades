package org.acme.processor;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.core.IntervalFunction;
import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;
import io.quarkus.kafka.client.serialization.ObjectMapperSerializer;
import org.acme.client.snyk.SnykClient;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.WebApplicationException;
import java.util.Set;
import java.util.UUID;

import static org.apache.kafka.streams.state.Stores.inMemoryKeyValueStore;
import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;

@ApplicationScoped
public class SnykProcessorSupplier implements ProcessorSupplier<String, Component, String, VulnerabilityResult> {

    private static final String RETRY_STORE_NAME = "snyk-retry";
    private static final StoreBuilder<KeyValueStore<UUID, RetryableRecord<String, Component>>> RETRY_STORE_BUILDER;

    static {
        RETRY_STORE_BUILDER = keyValueStoreBuilder(inMemoryKeyValueStore(RETRY_STORE_NAME),
                Serdes.UUID(), Serdes.serdeFrom(new ObjectMapperSerializer<>(), new ObjectMapperDeserializer<>(new TypeReference<>() {
                })));
    }

    private final SnykClient client;
    private final SnykConfig config;
    private final CircuitBreaker circuitBreaker;
    private final IntervalFunction retryIntervalFunction;

    @Inject
    public SnykProcessorSupplier(final SnykClient client, final SnykConfig config) {
        this.client = client;
        this.config = config;
        this.circuitBreaker = CircuitBreakerRegistry.of(
                        CircuitBreakerConfig.from(CircuitBreakerConfig.ofDefaults())
                                .slidingWindowType(CircuitBreakerConfig.SlidingWindowType.COUNT_BASED)
                                .slidingWindowSize(config.circuitBreakerSlidingWindowSize())
                                .failureRateThreshold(config.circuitBreakerFailureRateThresholdPercentage())
                                .waitDurationInOpenState(config.circuitBreakerWaitDurationInOpenState())
                                .recordExceptions(WebApplicationException.class)
                                .build()
                )
                .circuitBreaker("snyk-api");
        this.retryIntervalFunction = IntervalFunction.ofExponentialRandomBackoff(
                config.retryInitialDelay(), config.retryMultiplier(), config.retryMaxDuration());
    }

    @Override
    public Processor<String, Component, String, VulnerabilityResult> get() {
        return new SnykProcessor(client, circuitBreaker, RETRY_STORE_NAME, retryIntervalFunction, config.retryMaxAttempts());
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(RETRY_STORE_BUILDER);
    }

}
