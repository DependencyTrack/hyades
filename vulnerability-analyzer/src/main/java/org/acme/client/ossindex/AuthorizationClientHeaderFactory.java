package org.acme.client.ossindex;

import org.acme.config.OssIndexConfig;
import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MultivaluedHashMap;
import javax.ws.rs.core.MultivaluedMap;
import java.util.Base64;

@ApplicationScoped
class AuthorizationClientHeaderFactory implements ClientHeadersFactory {

    private final OssIndexConfig config;

    @Inject
    AuthorizationClientHeaderFactory(final OssIndexConfig config) {
        this.config = config;
    }

    @Override
    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders,
                                                 MultivaluedMap<String, String> clientOutgoingHeaders) {
        if (config.api().username().isPresent() && config.api().token().isPresent()) {
            final String credentials = "%s:%s".formatted(config.api().username().get(), config.api().token().get());
            final String encodedCredentials = Base64.getEncoder().encodeToString(credentials.getBytes());

            final var headers = new MultivaluedHashMap<>(clientOutgoingHeaders);
            headers.putSingle(HttpHeaders.AUTHORIZATION, "Basic %s".formatted(encodedCredentials));
            return headers;
        }

        return clientOutgoingHeaders;
    }

}
