package org.acme.client.snyk;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder;
import org.acme.config.SnykConfig;
import org.acme.util.RoundRobinAccessor;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Named;
import java.util.function.Supplier;

class SnykClientConfiguration {

    @Produces
    @ApplicationScoped
    SnykClient snykClient(@Named("snykHttpClient") final CloseableHttpClient httpClient,
                          @Named("snykObjectMapper") final ObjectMapper objectMapper,
                          @Named("snykTokenSupplier") final Supplier<String> tokenSupplier,
                          final SnykConfig config) {
        return new SnykClient(httpClient, objectMapper, config.api().baseUrl().orElse(null),
                config.api().orgId().orElse(null), tokenSupplier, config.api().version().orElse(null));
    }

    @Produces
    @ApplicationScoped
    @Named("snykHttpClient")
    CloseableHttpClient httpClient(final MeterRegistry meterRegistry) {
        final var connectionManager = new PoolingHttpClientConnectionManager();
        new PoolingHttpClientConnectionManagerMetricsBinder(connectionManager, "snyk").bindTo(meterRegistry);

        return HttpClientBuilder.create()
                .setConnectionManager(connectionManager)
                .setDefaultRequestConfig(RequestConfig.copy(RequestConfig.DEFAULT)
                        .setConnectTimeout(3_000) // TODO: Make configurable?
                        .setSocketTimeout(3_000) // TODO: Make configurable?
                        .build())
                .build();
    }

    @Produces
    @ApplicationScoped
    @Named("snykObjectMapper")
    ObjectMapper objectMapper() {
        return new ObjectMapper()
                .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);
    }

    @Produces
    @ApplicationScoped
    @Named("snykTokenSupplier")
    Supplier<String> tokenSupplier(final SnykConfig config) {
        if (config.enabled()) {
            return () -> null;
        }

        if (config.api().tokens().isEmpty() || config.api().tokens().get().isEmpty()) {
            throw new IllegalStateException("Snyk is enabled, but not API token was provided");
        }

        if (config.api().tokens().get().size() == 1) {
            return () -> config.api().tokens().get().get(0);
        } else {
            return new RoundRobinAccessor<>(config.api().tokens().get())::get;
        }
    }

}
