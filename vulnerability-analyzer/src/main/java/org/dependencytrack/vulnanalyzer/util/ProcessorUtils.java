package org.dependencytrack.vulnanalyzer.util;

import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import jakarta.ws.rs.WebApplicationException;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.http.HttpStatus;
import org.apache.http.conn.ConnectTimeoutException;

import java.net.SocketTimeoutException;
import java.util.List;

public class ProcessorUtils {

    public static boolean isRetryable(final Throwable throwable) {
        final Throwable rootCause = ExceptionUtils.getRootCause(throwable);

        if (rootCause instanceof final WebApplicationException wae) {
            return List.of(
                    HttpStatus.SC_TOO_MANY_REQUESTS,
                    HttpStatus.SC_INTERNAL_SERVER_ERROR,
                    HttpStatus.SC_BAD_GATEWAY,
                    HttpStatus.SC_SERVICE_UNAVAILABLE,
                    HttpStatus.SC_GATEWAY_TIMEOUT
            ).contains(wae.getResponse().getStatus());
        }

        return rootCause instanceof CallNotPermittedException
                || rootCause instanceof ConnectTimeoutException
                || rootCause instanceof SocketTimeoutException;
    }

    private ProcessorUtils() {
    }
}
