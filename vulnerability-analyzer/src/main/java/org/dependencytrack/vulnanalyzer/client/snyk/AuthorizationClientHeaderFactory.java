/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.snyk;

import io.smallrye.config.SmallRyeConfig;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedHashMap;
import jakarta.ws.rs.core.MultivaluedMap;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;

import java.util.UUID;
import java.util.function.Supplier;

@ApplicationScoped
public class AuthorizationClientHeaderFactory implements ClientHeadersFactory {

    private final Supplier<String> apiTokenSupplier;

    @Inject
    AuthorizationClientHeaderFactory(Supplier<String> apiTokenSupplier) {
        this.apiTokenSupplier = apiTokenSupplier;
    }

    @Override
    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders,
                                                 MultivaluedMap<String, String> clientOutgoingHeaders) {
        final var headers = new MultivaluedHashMap<String, String>();
        headers.putSingle(HttpHeaders.AUTHORIZATION, "token " + apiTokenSupplier.get());
        headers.putSingle(HttpHeaders.ACCEPT, "application/vnd.api+json");
        headers.putSingle(HttpHeaders.CONTENT_TYPE, "application/vnd.api+json");
        headers.putSingle(HttpHeaders.USER_AGENT, getUserAgent());
        return headers;
    }

    public String getUserAgent() {
        SmallRyeConfig config = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class);
        String name = config.getConfigValue("quarkus.application.name").getValue();
        String version = config.getConfigValue("quarkus.application.version").getValue();
        return name
                + " v" + version
                + " ("
                + System.getProperty("os.arch") + "; "
                + System.getProperty("os.name") + "; "
                + System.getProperty("os.version")
                + ") QuarkusHttpClient/" +
                //TODO need a uuid solution similar to Config.getInstance().getSystemUuid(); as done in dependency track
                UUID.randomUUID();
    }
}
