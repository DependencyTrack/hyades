/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.ossindex;

import org.cyclonedx.proto.v1_6.Advisory;
import org.cyclonedx.proto.v1_6.Bom;
import org.cyclonedx.proto.v1_6.Property;
import org.cyclonedx.proto.v1_6.Severity;
import org.cyclonedx.proto.v1_6.Source;
import org.cyclonedx.proto.v1_6.Vulnerability;
import org.cyclonedx.proto.v1_6.VulnerabilityRating;
import org.cyclonedx.proto.v1_6.VulnerabilityReference;
import org.dependencytrack.common.cwe.Cwe;
import org.dependencytrack.common.cwe.CweResolver;
import us.springett.cvss.Cvss;
import us.springett.cvss.CvssV2;
import us.springett.cvss.CvssV3;
import us.springett.cvss.CvssV3_1;
import us.springett.cvss.Score;

import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.Optional;

import static org.cyclonedx.proto.v1_6.ScoreMethod.SCORE_METHOD_CVSSV2;
import static org.cyclonedx.proto.v1_6.ScoreMethod.SCORE_METHOD_CVSSV3;
import static org.cyclonedx.proto.v1_6.ScoreMethod.SCORE_METHOD_CVSSV31;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_CRITICAL;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_HIGH;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_INFO;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_LOW;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_MEDIUM;
import static org.cyclonedx.proto.v1_6.Severity.SEVERITY_UNKNOWN;
import static org.dependencytrack.commonutil.VulnerabilityUtil.normalizedCvssV2Score;
import static org.dependencytrack.commonutil.VulnerabilityUtil.normalizedCvssV3Score;
import static org.dependencytrack.commonutil.VulnerabilityUtil.trimSummary;

public final class ModelConverterToCdx {

    static final String TITLE_PROPERTY_NAME = "dependency-track:vuln:title";

    public static Bom convert(List<ComponentReportVulnerability> vulnerabilities, boolean isAliasSyncEnabled) {

        Bom.Builder cyclonedxBom = Bom.newBuilder();
        cyclonedxBom.addAllVulnerabilities(
                vulnerabilities.stream()
                        .map(vulnerabilityData -> convert(vulnerabilityData, isAliasSyncEnabled))
                        .toList());
        return cyclonedxBom.build();
    }

    public static org.cyclonedx.proto.v1_6.Vulnerability convert(final ComponentReportVulnerability reportedVuln, boolean isAliasSyncEnabled) {
        Vulnerability.Builder vulnBuilder = Vulnerability.newBuilder();
        vulnBuilder.setId(reportedVuln.id());
        if (vulnBuilder.getId().toLowerCase().startsWith("cve-")) {
            vulnBuilder.setSource(Source.newBuilder().setName("NVD"));
        } else {
            vulnBuilder.setSource(Source.newBuilder().setName("OSSINDEX"));
            if (isAliasSyncEnabled && reportedVuln.cve() != null) {
                vulnBuilder.addReferences(
                        VulnerabilityReference.newBuilder()
                                .setId(reportedVuln.cve())
                                .setSource(Source.newBuilder()
                                        .setName("NVD")));
            }
        }
        Optional.ofNullable(reportedVuln.title()).ifPresent(title -> vulnBuilder.addProperties(
                Property.newBuilder().setName(TITLE_PROPERTY_NAME).setValue(trimSummary(title)).build()));
        vulnBuilder.setDescription(reportedVuln.description());
        if (reportedVuln.cwe() != null) {
            CweResolver cweResolver = CweResolver.getInstance();
            Cwe cwe = cweResolver.resolve(reportedVuln.cwe());
            if (cwe != null) {
                vulnBuilder.addCwes(cwe.getCweId());
            }
        }

        if (reportedVuln.reference() != null) {
            vulnBuilder.addAdvisories(Advisory.newBuilder().setUrl(reportedVuln.reference()));
        }
        for (String externalReference : reportedVuln.externalReferences()) {
            vulnBuilder.addAdvisories(Advisory.newBuilder().setUrl(externalReference));
        }

        final VulnerabilityRating rating = convertRating(reportedVuln.cvssVector());
        if (rating != null) {
            vulnBuilder.addRatings(rating);
        }

        return vulnBuilder.build();
    }

    private static VulnerabilityRating convertRating(final String cvssVector) {
        final Cvss cvss = Cvss.fromVector(cvssVector);
        if (cvss == null) {
            return null;
        }

        final Score score = cvss.calculateScore();
        return switch (cvss) {
            case CvssV3_1 cvssV31 -> VulnerabilityRating.newBuilder()
                    .setSource(Source.newBuilder().setName("OSSINDEX"))
                    .setMethod(SCORE_METHOD_CVSSV31)
                    .setScore(Double.parseDouble(NumberFormat.getInstance(Locale.US).format(score.getBaseScore())))
                    .setVector(cvssV31.getVector())
                    .setSeverity(convert(normalizedCvssV3Score(score.getBaseScore())))
                    .build();
            case CvssV3 cvssV3 -> VulnerabilityRating.newBuilder()
                    .setSource(Source.newBuilder().setName("OSSINDEX"))
                    .setMethod(SCORE_METHOD_CVSSV3)
                    .setScore(Double.parseDouble(NumberFormat.getInstance(Locale.US).format(score.getBaseScore())))
                    .setVector(cvssV3.getVector())
                    .setSeverity(convert(normalizedCvssV3Score(score.getBaseScore())))
                    .build();
            case CvssV2 cvssV2 -> VulnerabilityRating.newBuilder()
                    .setSource(Source.newBuilder().setName("OSSINDEX"))
                    .setMethod(SCORE_METHOD_CVSSV2)
                    .setScore(Double.parseDouble(NumberFormat.getInstance(Locale.US).format(score.getBaseScore())))
                    .setVector(cvssV2.getVector())
                    .setSeverity(convert(normalizedCvssV2Score(score.getBaseScore())))
                    .build();
            default -> null;
        };

    }

    private static Severity convert(final org.dependencytrack.common.model.Severity severity) {
        return switch (severity) {
            case CRITICAL -> SEVERITY_CRITICAL;
            case HIGH -> SEVERITY_HIGH;
            case MEDIUM -> SEVERITY_MEDIUM;
            case LOW -> SEVERITY_LOW;
            case INFO -> SEVERITY_INFO;
            default -> SEVERITY_UNKNOWN;
        };
    }
}
