/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.ossindex;

import org.dependencytrack.common.UserAgent;
import org.dependencytrack.vulnanalyzer.config.OssIndexConfig;
import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedHashMap;
import jakarta.ws.rs.core.MultivaluedMap;
import java.util.Base64;
import java.util.Optional;

@ApplicationScoped
class AuthorizationClientHeaderFactory implements ClientHeadersFactory {

    private final OssIndexConfig config;
    private final String userAgent;

    @Inject
    AuthorizationClientHeaderFactory(final OssIndexConfig config, @UserAgent final String userAgent) {
        this.config = config;
        this.userAgent = userAgent;
    }

    @Override
    public MultivaluedMap<String, String> update(final MultivaluedMap<String, String> incomingHeaders,
                                                 final MultivaluedMap<String, String> clientOutgoingHeaders) {
        final var headers = new MultivaluedHashMap<String, String>();
        headers.putSingle(HttpHeaders.USER_AGENT, userAgent);
        final Optional<String> username = config.api().username();
        final Optional<String> token = config.api().token();

        if (username.isPresent() && token.isPresent()) {
            final String credentials = "%s:%s".formatted(username.get(), token.get());
            final String encodedCredentials = Base64.getEncoder().encodeToString(credentials.getBytes());
            headers.putSingle(HttpHeaders.AUTHORIZATION, "Basic %s".formatted(encodedCredentials));
        }

        return headers;
    }

}
