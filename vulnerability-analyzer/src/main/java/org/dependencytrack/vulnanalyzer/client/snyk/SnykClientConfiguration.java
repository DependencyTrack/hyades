package org.dependencytrack.vulnanalyzer.client.snyk;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Named;
import org.dependencytrack.vulnanalyzer.config.SnykConfig;
import org.dependencytrack.vulnanalyzer.util.RoundRobinAccessor;

import java.util.function.Supplier;

class SnykClientConfiguration {

    @Produces
    @ApplicationScoped
    @Named("snykTokenSupplier")
    Supplier<String> tokenSupplier(final SnykConfig config) {
        if (!config.enabled()) {
            return () -> null;
        }

        return config.api().tokens()
                .filter(tokens -> !tokens.isEmpty())
                .<Supplier<String>>map(tokens -> {
                    if (tokens.size() == 1) {
                        // Avoid unnecessary overhead of coordinating list
                        // access when there's only a single token to use.
                        return () -> tokens.get(0);
                    } else {
                        return new RoundRobinAccessor<>(tokens)::get;
                    }
                })
                .orElseThrow(() -> new IllegalStateException("Snyk is enabled, but not API token was provided"));
    }
}
