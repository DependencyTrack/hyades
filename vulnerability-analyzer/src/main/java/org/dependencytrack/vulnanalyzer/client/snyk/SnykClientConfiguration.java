/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.snyk;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Named;
import org.dependencytrack.vulnanalyzer.config.SnykConfig;
import org.dependencytrack.vulnanalyzer.util.RoundRobinAccessor;

import java.util.function.Supplier;

class SnykClientConfiguration {

    @Produces
    @ApplicationScoped
    @Named("snykTokenSupplier")
    Supplier<String> tokenSupplier(final SnykConfig config) {
        if (!config.enabled()) {
            return () -> null;
        }

        return config.api().tokens()
                .filter(tokens -> !tokens.isEmpty())
                .<Supplier<String>>map(tokens -> {
                    if (tokens.size() == 1) {
                        // Avoid unnecessary overhead of coordinating list
                        // access when there's only a single token to use.
                        return () -> tokens.get(0);
                    } else {
                        return new RoundRobinAccessor<>(tokens)::get;
                    }
                })
                .orElseThrow(() -> new IllegalStateException("Snyk is enabled, but not API token was provided"));
    }
}
