/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.client.trivy;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MultivaluedHashMap;
import jakarta.ws.rs.core.MultivaluedMap;
import org.dependencytrack.common.UserAgent;
import org.dependencytrack.vulnanalyzer.config.TrivyConfig;
import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;

import java.util.Optional;

@ApplicationScoped
public class AuthorizationClientHeaderFactory implements ClientHeadersFactory {

    private final TrivyConfig config;
    private final String userAgent;
    private static final String TOKEN_HEADER = "Trivy-Token";

    @Inject
    AuthorizationClientHeaderFactory(final TrivyConfig config,
                                     @UserAgent final String userAgent) {
        this.config = config;
        this.userAgent = userAgent;
    }

    @Override
    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders,
                                                 MultivaluedMap<String, String> clientOutgoingHeaders) {
        final Optional<String> token = config.api().token();
        final var headers = new MultivaluedHashMap<String, String>();
        headers.putSingle(TOKEN_HEADER,  token.get());
        headers.putSingle(HttpHeaders.ACCEPT, "application/vnd.api+json");
        headers.putSingle(HttpHeaders.CONTENT_TYPE, "application/vnd.api+json");
        headers.putSingle(HttpHeaders.USER_AGENT, userAgent);
        return headers;
    }

}
