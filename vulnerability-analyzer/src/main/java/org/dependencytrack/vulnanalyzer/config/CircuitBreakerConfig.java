/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.config;

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;
import jakarta.validation.constraints.Positive;

import java.time.Duration;
import java.util.Optional;
import java.util.OptionalInt;

public interface CircuitBreakerConfig {

    @Positive
    OptionalInt failureRateThreshold();

    @Positive
    OptionalInt slowCallRateThreshold();

    Optional<Duration> waitDurationInOpenState();

    Optional<Duration> slowCallDurationThreshold();

    @Positive
    OptionalInt permittedNumberOfCallsInHalfOpenState();

    @Positive
    OptionalInt minimumNumberOfCalls();

    Optional<SlidingWindowType> slidingWindowType();

    @Positive
    OptionalInt slidingWindowSize();

    static io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.Builder toConfigBuilder(final CircuitBreakerConfig config) {
        final var configBuilder = io.github.resilience4j.circuitbreaker.CircuitBreakerConfig
                .from(io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.ofDefaults());
        config.failureRateThreshold().ifPresent(configBuilder::failureRateThreshold);
        config.slowCallRateThreshold().ifPresent(configBuilder::slowCallRateThreshold);
        config.waitDurationInOpenState().ifPresent(configBuilder::waitDurationInOpenState);
        config.slowCallDurationThreshold().ifPresent(configBuilder::slowCallDurationThreshold);
        config.permittedNumberOfCallsInHalfOpenState().ifPresent(configBuilder::permittedNumberOfCallsInHalfOpenState);
        config.minimumNumberOfCalls().ifPresent(configBuilder::minimumNumberOfCalls);
        config.slidingWindowType().ifPresent(configBuilder::slidingWindowType);
        config.slidingWindowSize().ifPresent(configBuilder::slidingWindowSize);
        return configBuilder;
    }

}
