/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner.snyk;

import com.github.packageurl.PackageURL;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.dependencytrack.vulnanalyzer.client.snyk.SnykClient;
import org.dependencytrack.vulnanalyzer.config.SnykConfig;
import org.dependencytrack.vulnanalyzer.processor.retry.RetryableRecord;
import org.dependencytrack.vulnanalyzer.processor.scanner.ScanProcessorSupplier;
import org.dependencytrack.vulnanalyzer.util.PurlUtils;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import java.util.Set;

import static org.dependencytrack.proto.vulnanalysis.v1.Scanner.SCANNER_SNYK;

@ApplicationScoped
public class SnykProcessorSupplier implements ScanProcessorSupplier {


    private final SnykClient client;
    private final SnykConfig config;
    private final Cache cache;
    private final CircuitBreaker circuitBreaker;
    private final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder;
    private final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    private final Set<String> supportedPackageUrlTypes;

    @Inject
    public SnykProcessorSupplier(final @RestClient SnykClient client,
                                 final SnykConfig config,
                                 @CacheName("snyk") final Cache cache,
                                 @Named("snykCircuitBreaker") final CircuitBreaker circuitBreaker,
                                 @Named("snykBatchStoreBuilder") final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder,
                                 @Named("snykRetryStoreBuilder") final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder,
                                 @Named("snykRetryIntervalFunction") final IntervalFunction retryIntervalFunction,
                                 final MeterRegistry meterRegistry,
                                 @Named("snykSupportedPackageUrlTypes") final Set<String> supportedPackageUrlTypes) {
        this.client = client;
        this.config = config;
        this.cache = cache;
        this.circuitBreaker = circuitBreaker;
        this.batchStoreBuilder = batchStoreBuilder;
        this.retryStoreBuilder = retryStoreBuilder;
        this.retryIntervalFunction = retryIntervalFunction;
        this.meterRegistry = meterRegistry;
        this.supportedPackageUrlTypes = supportedPackageUrlTypes;
    }

    @Override
    public boolean isEnabled() {
        return config.enabled();
    }

    @Override
    public Scanner scannerIdentity() {
        return SCANNER_SNYK;
    }

    @Override
    public int topicPartitions() {
        return config.topicPartitions();
    }

    @Override
    public boolean canProcess(final Component component) {
        return !component.getInternal() && PurlUtils.parsePurl(component.getPurl())
                .map(PackageURL::getType)
                .map(supportedPackageUrlTypes::contains)
                .orElse(false);
    }

    @Override
    public Processor<String, ScanTask, ScanKey, ScannerResult> get() {
        return new SnykProcessor(client, config, cache, circuitBreaker, config.severitySourcePriority(),
                batchStoreBuilder.name(), retryStoreBuilder.name(), retryIntervalFunction, config.retry().maxAttempts(),
                meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(batchStoreBuilder, retryStoreBuilder);
    }

}
