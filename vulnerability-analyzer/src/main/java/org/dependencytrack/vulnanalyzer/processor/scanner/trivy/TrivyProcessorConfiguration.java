/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner.trivy;

import com.fasterxml.jackson.core.type.TypeReference;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.core.IntervalFunction;
import io.github.resilience4j.micrometer.tagged.TaggedCircuitBreakerMetrics;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;
import io.quarkus.kafka.client.serialization.ObjectMapperSerde;
import io.quarkus.kafka.client.serialization.ObjectMapperSerializer;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Named;
import jakarta.ws.rs.WebApplicationException;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.vulnanalyzer.config.CircuitBreakerConfig;
import org.dependencytrack.vulnanalyzer.config.RetryConfig;
import org.dependencytrack.vulnanalyzer.config.TrivyConfig;
import org.dependencytrack.vulnanalyzer.processor.retry.RetryableRecord;

import static org.apache.kafka.common.serialization.Serdes.serdeFrom;
import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;
import static org.dependencytrack.kstreams.statestore.StateStoreUtil.configurableKeyValueStore;
import static org.dependencytrack.kstreams.statestore.StateStoreUtil.defaultChangelogTopicConfig;

class TrivyProcessorConfiguration {

    @Produces
    @ApplicationScoped
    @Named("trivyBatchStoreBuilder")
    StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder() {
        final Serde<ScanKey> keySerde = new ObjectMapperSerde<>(ScanKey.class);
        final Serde<RetryableRecord<String, ScanTask>> valueSerde = serdeFrom(
                new ObjectMapperSerializer<>(),
                new ObjectMapperDeserializer<>(new TypeReference<>() {
                }));

        return keyValueStoreBuilder(configurableKeyValueStore("trivy-batch-store"), keySerde, valueSerde)
                .withLoggingEnabled(defaultChangelogTopicConfig());
    }

    @Produces
    @ApplicationScoped
    @Named("trivyRetryStoreBuilder")
    StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder() {
        final Serde<ScanKey> keySerde = new ObjectMapperSerde<>(ScanKey.class);
        final Serde<RetryableRecord<String, ScanTask>> valueSerde = serdeFrom(
                new ObjectMapperSerializer<>(),
                new ObjectMapperDeserializer<>(new TypeReference<>() {
                }));

        return keyValueStoreBuilder(configurableKeyValueStore("trivy-retry-store"), keySerde, valueSerde)
                .withLoggingEnabled(defaultChangelogTopicConfig());
    }

    @Produces
    @ApplicationScoped
    @Named("trivyCircuitBreaker")
    CircuitBreaker circuitBreaker(final TrivyConfig config,
                                  final MeterRegistry meterRegistry) {
        final CircuitBreakerRegistry registry = CircuitBreakerRegistry.of(
                CircuitBreakerConfig.toConfigBuilder(config.circuitBreaker())
                        .recordExceptions(WebApplicationException.class)
                        .build()
        );

        TaggedCircuitBreakerMetrics
                .ofCircuitBreakerRegistry(registry)
                .bindTo(meterRegistry);

        return registry.circuitBreaker("trivy");
    }

    @Produces
    @ApplicationScoped
    @Named("trivyRetryIntervalFunction")
    IntervalFunction retryIntervalFunction(final TrivyConfig config) {
        return RetryConfig.toIntervalFunction(config.retry());
    }
}
