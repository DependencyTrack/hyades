/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner;

import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;

/**
 * A specialized {@link ProcessorSupplier} for supplying scanner {@link Processor}s.
 */
public interface ScanProcessorSupplier extends ProcessorSupplier<String, ScanTask, ScanKey, ScannerResult> {

    /**
     * Determine whether the {@link Scanner} represented by this supplier is enabled.
     *
     * @return {@code true} when the {@link Scanner} is enabled, otherwise {@code false}
     */
    boolean isEnabled();

    /**
     * Determine the {@link Scanner} identity of the {@link Processor} provided by this supplier.
     *
     * @return The {@link Scanner} identity
     */
    Scanner scannerIdentity();

    /**
     * The number of topic partitions configured for the {@link Scanner} represented by this supplier.
     *
     * @return The number of configured topic partitions
     */
    int topicPartitions();

    /**
     * Determine whether the {@link Scanner} represented by this supplier is capable of scanning a given {@link Component}.
     *
     * @param component The {@link Component} to evaluate
     * @return {@code true} when the {@link Scanner} is capable, otherwise {@code false}
     */
    boolean canProcess(final Component component);

}
