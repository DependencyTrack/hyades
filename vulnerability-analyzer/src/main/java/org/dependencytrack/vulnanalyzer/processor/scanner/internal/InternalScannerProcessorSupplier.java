/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner.internal;

import io.micrometer.core.instrument.MeterRegistry;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.apache.kafka.streams.processor.api.Processor;
import org.dependencytrack.persistence.repository.VulnerableSoftwareRepository;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.dependencytrack.vulnanalyzer.config.InternalScannerConfig;
import org.dependencytrack.vulnanalyzer.processor.scanner.ScanProcessorSupplier;

import static org.dependencytrack.proto.vulnanalysis.v1.Scanner.SCANNER_INTERNAL;

@ApplicationScoped
public class InternalScannerProcessorSupplier implements ScanProcessorSupplier {

    private final InternalScannerConfig config;
    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final MeterRegistry meterRegistry;

    @Inject
    public InternalScannerProcessorSupplier(final InternalScannerConfig config,
                                            final VulnerableSoftwareRepository vulnerableSoftwareRepository,
                                            final MeterRegistry meterRegistry) {
        this.config = config;
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public boolean isEnabled() {
        return config.enabled();
    }

    @Override
    public Scanner scannerIdentity() {
        return SCANNER_INTERNAL;
    }

    @Override
    public int topicPartitions() {
        return config.topicPartitions();
    }

    @Override
    public boolean canProcess(final Component component) {
        return component.hasCpe() || component.hasPurl();
    }

    @Override
    public Processor<String, ScanTask, ScanKey, ScannerResult> get() {
        return new InternalScannerProcessor(vulnerableSoftwareRepository, meterRegistry);
    }

}
