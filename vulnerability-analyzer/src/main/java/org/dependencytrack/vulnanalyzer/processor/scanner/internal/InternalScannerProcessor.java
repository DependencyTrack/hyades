/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnanalyzer.processor.scanner.internal;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.ProcessorContext;
import org.apache.kafka.streams.processor.api.Record;
import org.cyclonedx.proto.v1_4.Bom;
import org.dependencytrack.persistence.dao.VulnerabilityDao;
import org.dependencytrack.persistence.model.VulnerableSoftware;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.ScanStatus;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.dependencytrack.vulnanalyzer.util.ComponentVersion;
import org.jdbi.v3.core.Jdbi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import us.springett.parsers.cpe.Cpe;
import us.springett.parsers.cpe.CpeParser;
import us.springett.parsers.cpe.exceptions.CpeParsingException;
import us.springett.parsers.cpe.util.Relation;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

public class InternalScannerProcessor extends ContextualProcessor<String, ScanTask, ScanKey, ScannerResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(InternalScannerProcessor.class);

    private final Jdbi jdbi;
    private final MeterRegistry meterRegistry;
    private Counter.Builder componentsScannedCounterBuilder;

    InternalScannerProcessor(final Jdbi jdbi, final MeterRegistry meterRegistry) {
        this.jdbi = jdbi;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public void init(final ProcessorContext<ScanKey, ScannerResult> context) {
        super.init(context);

        componentsScannedCounterBuilder = Counter.builder("scanner.components.scanned")
                .description("Total number of scanned components")
                .tags(Set.of(
                        Tag.of("thread_id", Thread.currentThread().getName()),
                        Tag.of("task_id", context().taskId().toString()),
                        Tag.of("scanner", "internal")
                ));
    }

    public void process(final Record<String, ScanTask> record) {
        final ScannerResult result = analyzeComponent(record.value());
        context().forward(record.withKey(record.value().getKey()).withValue(result).withTimestamp(context().currentSystemTimeMs()));
        reportScanResult(result.getBom().getVulnerabilitiesList().isEmpty() ? "not_vulnerable" : "vulnerable");
    }

    public ScannerResult analyzeComponent(final ScanTask task) {
        return versionRangeAnalysis(task);
    }

    private ScannerResult versionRangeAnalysis(final ScanTask task) {
        final Optional<Cpe> parsedCpe = parseCpe(task.getComponent());
        final Optional<PackageURL> parsedPurl = parsePurl(task.getComponent());

        final ScannerResult.Builder resultBuilder = ScannerResult.newBuilder()
                .setScanner(Scanner.SCANNER_INTERNAL);

        List<VulnerableSoftware> vsList;
        String componentVersion;
        if (parsedCpe.isPresent()) {
            componentVersion = parsedCpe.get().getVersion();
        } else if (parsedPurl.isPresent()) {
            componentVersion = parsedPurl.get().getVersion();
        } else {
            // Catch cases where the CPE couldn't be parsed and no PURL exists.
            // Should be rare, but could lead to NPEs later.
            LOGGER.debug("Neither CPE nor PURL of component {} provide a version - skipping analysis", task.getComponent().getUuid());
            return resultBuilder
                    .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                    .build();
        }
        // In some cases, componentVersion may be null, such as when a Package URL does not have a version specified
        if (componentVersion == null) {
            return resultBuilder
                    .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                    .build();
        }
        // https://github.com/DependencyTrack/dependency-track/issues/1574
        // Some ecosystems use the "v" version prefix (e.g. v1.2.3) for their components.
        // However, both the NVD and GHSA store versions without that prefix.
        // For this reason, the prefix is stripped before running analyzeVersionRange.
        //
        // REVISIT THIS WHEN ADDING NEW VULNERABILITY SOURCES!
        if (componentVersion.length() > 1 && componentVersion.startsWith("v")) {
            if (componentVersion.matches("v0.0.0-\\d{14}-[a-f0-9]{12}")) {
                componentVersion = componentVersion.substring(7, 11) + "-" + componentVersion.substring(11, 13) + "-" + componentVersion.substring(13, 15);
            } else {
                componentVersion = componentVersion.substring(1);
            }
        }

        if (parsedCpe.isPresent()) {
            final Cpe cpe = parsedCpe.get();
            vsList = jdbi.withExtension(VulnerabilityDao.class, dao -> dao.getVulnerableSoftwareByCpeOrPurl(cpe.getPart().getAbbreviation(), cpe.getVendor(), cpe.getProduct(), parsedPurl.orElse(null)));
        } else {
            vsList = jdbi.withExtension(VulnerabilityDao.class, dao -> dao.getVulnerableSoftwareByCpeOrPurl(null, null, null, parsedPurl.orElse(null)));
        }

        final Bom bov = analyzeVersionRange(vsList, parsedCpe.orElse(null), componentVersion);
        return resultBuilder
                .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                .setBom(bov)
                .build();
    }

    Bom analyzeVersionRange(final List<VulnerableSoftware> vsList, final Cpe targetCpe, final String targetVersion) {
        final List<org.cyclonedx.proto.v1_4.Vulnerability> vulnerabilities = new ArrayList<>();
        for (final VulnerableSoftware vs : vsList) {
            final Optional<Boolean> isCpeMatch = maybeMatchCpe(vs, targetCpe, targetVersion);
            if ((isCpeMatch.isEmpty() || isCpeMatch.get()) && compareVersions(vs, targetVersion)) {
                if (vs.vulnerabilities() != null) {
                    for (final VulnerableSoftware.VulnIdAndSource vulnIdAndSource : vs.vulnerabilities()) {
                        // Only include vulnerability ID and source in the result. As the vulnerabilities
                        // are currently sourced from the API server's database, there's no point in transmitting
                        // this information again.
                        vulnerabilities.add(org.cyclonedx.proto.v1_4.Vulnerability.newBuilder()
                                .setId(vulnIdAndSource.vulnId())
                                .setSource(org.cyclonedx.proto.v1_4.Source.newBuilder().setName(vulnIdAndSource.source()))
                                .build());
                    }
                }
            }
        }

        return Bom.newBuilder()
                .addAllVulnerabilities(vulnerabilities)
                .build();
    }

    private static Optional<Cpe> parseCpe(final Component component) {
        if (!component.hasCpe()) {
            return Optional.empty();
        }

        try {
            final Cpe cpe = CpeParser.parse(component.getCpe());
            return Optional.of(cpe);
        } catch (CpeParsingException e) {
            LOGGER.warn("An error occurred while parsing: {} - The CPE is invalid and will be discarded", component.getCpe(), e);
            return Optional.empty();
        }
    }

    private static Optional<PackageURL> parsePurl(final Component component) {
        if (!component.hasPurl()) {
            return Optional.empty();
        }

        try {
            final var purl = new PackageURL(component.getPurl());
            return Optional.of(purl);
        } catch (MalformedPackageURLException e) {
            LOGGER.warn("An error occurred while parsing: {} - The PURL is invalid and will be discarded", component.getPurl(), e);
            return Optional.empty();
        }
    }

    private Optional<Boolean> maybeMatchCpe(final VulnerableSoftware vs, final Cpe targetCpe, final String targetVersion) {
        if (targetCpe == null || vs.cpe23() == null) {
            return Optional.empty();
        }

        final List<Relation> relations = List.of(
                Cpe.compareAttribute(vs.part(), targetCpe.getPart().getAbbreviation()),
                Cpe.compareAttribute(vs.vendor(), targetCpe.getVendor()),
                Cpe.compareAttribute(vs.product(), targetCpe.getProduct()),
                Cpe.compareAttribute(vs.version(), targetVersion),
                Cpe.compareAttribute(vs.update(), targetCpe.getUpdate()),
                Cpe.compareAttribute(vs.edition(), targetCpe.getEdition()),
                Cpe.compareAttribute(vs.language(), targetCpe.getLanguage()),
                Cpe.compareAttribute(vs.swEdition(), targetCpe.getSwEdition()),
                Cpe.compareAttribute(vs.targetSw(), targetCpe.getTargetSw()),
                Cpe.compareAttribute(vs.targetHw(), targetCpe.getTargetHw()),
                Cpe.compareAttribute(vs.other(), targetCpe.getOther())
        );
        if (relations.contains(Relation.DISJOINT)) {
            return Optional.of(false);
        }

        boolean isMatch = true;

        // Mixed SUBSET / SUPERSET relations in the vendor and product attribute are prone
        // to false positives: https://github.com/DependencyTrack/dependency-track/issues/3178
        final Relation vendorRelation = relations.get(1);
        final Relation productRelation = relations.get(2);
        isMatch &= !(vendorRelation == Relation.SUBSET && productRelation == Relation.SUPERSET);
        isMatch &= !(vendorRelation == Relation.SUPERSET && productRelation == Relation.SUBSET);
        if (!isMatch && LOGGER.isDebugEnabled()) {
            LOGGER.debug("{}: Dropped match with {} due to ambiguous vendor/product relation", targetCpe.toCpe23FS(), vs.cpe23());
        }

        return Optional.of(isMatch);
    }

    static boolean compareVersions(VulnerableSoftware vs, String targetVersion) {
        //if any of the four conditions will be evaluated - then true;
        boolean result = (vs.versionEndExcluding() != null && !vs.versionEndExcluding().isEmpty())
                         || (vs.versionStartExcluding() != null && !vs.versionStartExcluding().isEmpty())
                         || (vs.versionEndIncluding() != null && !vs.versionEndIncluding().isEmpty())
                         || (vs.versionStartIncluding() != null && !vs.versionStartIncluding().isEmpty());

        // Modified from original by Steve Springett
        // Added null check: vs.getVersion() != null as purl sources that use version ranges may not have version populated.
        if (!result && vs.version() != null && Cpe.compareAttribute(vs.version(), targetVersion) != Relation.DISJOINT) {
            return true;
        }

        final ComponentVersion target = new ComponentVersion(targetVersion);
        if (target.getVersionParts() != null && target.getVersionParts().isEmpty()) {
            return false;
        }
        if (result && vs.versionEndExcluding() != null && !vs.versionEndExcluding().isEmpty()) {
            final ComponentVersion endExcluding = new ComponentVersion(vs.versionEndExcluding());
            result = endExcluding.compareTo(target) > 0;
        }
        if (result && vs.versionStartExcluding() != null && !vs.versionStartExcluding().isEmpty()) {
            final ComponentVersion startExcluding = new ComponentVersion(vs.versionStartExcluding());
            result = startExcluding.compareTo(target) < 0;
        }
        if (result && vs.versionEndIncluding() != null && !vs.versionEndIncluding().isEmpty()) {
            final ComponentVersion endIncluding = new ComponentVersion(vs.versionEndIncluding());
            result &= endIncluding.compareTo(target) >= 0;
        }
        if (result && vs.versionStartIncluding() != null && !vs.versionStartIncluding().isEmpty()) {
            final ComponentVersion startIncluding = new ComponentVersion(vs.versionStartIncluding());
            result &= startIncluding.compareTo(target) <= 0;
        }
        return result;
    }

    private void reportScanResult(final String scanResult) {
        componentsScannedCounterBuilder
                .tag("result", scanResult)
                .register(meterRegistry)
                .increment();
    }

}
