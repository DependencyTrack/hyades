package org.dependencytrack.vulnanalyzer.processor.scanner.csaf;

import io.github.csaf.sbom.matching.MatcherKt;
import io.github.csaf.sbom.schema.generated.Csaf;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.Record;
import org.dependencytrack.persistence.repository.VulnerableSoftwareRepository;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.micrometer.core.instrument.MeterRegistry;
import protobom.protobom.ExternalReference;
import protobom.protobom.SoftwareIdentifierType;
import protobom.protobom.ExternalReference.ExternalReferenceType;

public class CsafScannerProcessor extends ContextualProcessor<String, ScanTask, ScanKey, ScannerResult> {
    private static final Logger LOGGER = LoggerFactory.getLogger(CsafScannerProcessor.class);

    public CsafScannerProcessor(VulnerableSoftwareRepository vulnerableSoftwareRepository,
            MeterRegistry meterRegistry) {
        
    }

    @Override
    public void process(Record<String, ScanTask> record) {
        // TODO Auto-generated method stub
        //throw new UnsupportedOperationException("Unimplemented method 'process'");
        LOGGER.info("Analyzing record {}", record);
        var purl = record.value().getComponent().getPurl();
        var cpe = record.value().getComponent().getCpe();

        var sbom = new protobom.protobom.Document();
        var node = new protobom.protobom.Node();
        node.getIdentifiers().put(SoftwareIdentifierType.PURL, purl);
        node.getIdentifiers().put(SoftwareIdentifierType.CPE23, cpe); // or CPE22?
        sbom.getNodeList().getNodes().add(node);

    
        var csafDocument = new Csaf(null, null, null);
        MatcherKt.match(sbom, csafDocument);

        // TODO wishlist
        // init matcher w csafDocument to match against
        // match single node MatcherKt.matchNode(node);

    }
    
}
