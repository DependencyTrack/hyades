package org.dependencytrack.vulnanalyzer.processor.scanner.csaf;

import org.apache.kafka.streams.processor.api.Processor;
import org.dependencytrack.persistence.repository.VulnerableSoftwareRepository;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.dependencytrack.proto.vulnanalysis.v1.Component;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;
import org.dependencytrack.proto.vulnanalysis.v1.Scanner;
import org.dependencytrack.proto.vulnanalysis.v1.ScannerResult;
import org.dependencytrack.vulnanalyzer.config.CsafScannerConfig;
import org.dependencytrack.vulnanalyzer.processor.scanner.ScanProcessorSupplier;
import org.dependencytrack.vulnanalyzer.processor.scanner.internal.InternalScannerProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.micrometer.core.instrument.MeterRegistry;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import static org.dependencytrack.proto.vulnanalysis.v1.Scanner.SCANNER_CSAF;

@ApplicationScoped
public class CsafScannerProcessorSupplier implements ScanProcessorSupplier {
    private static final Logger LOGGER = LoggerFactory.getLogger(CsafScannerProcessorSupplier.class);

    private final CsafScannerConfig config;
    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final MeterRegistry meterRegistry;

    @Inject
    public CsafScannerProcessorSupplier(final CsafScannerConfig config, final VulnerableSoftwareRepository vulnerableSoftwareRepository, final MeterRegistry meterRegistry) {
        this.config = config;
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, ScanTask, ScanKey, ScannerResult> get() {
        return new CsafScannerProcessor(vulnerableSoftwareRepository, meterRegistry);
    }

    @Override
    public boolean isEnabled() {
        return config.enabled();
    }

    @Override
    public Scanner scannerIdentity() {
        return SCANNER_CSAF;
    }

    @Override
    public int topicPartitions() {
        return config.topicPartitions();
    }

    @Override
    public boolean canProcess(Component component) {
        
        LOGGER.info("can i CSAF? for debugging TRUE {}", component);
        return true;
    }
    
}
