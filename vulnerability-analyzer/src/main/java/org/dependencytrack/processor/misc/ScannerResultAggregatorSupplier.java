package org.dependencytrack.processor.misc;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.streams.processor.api.FixedKeyProcessor;
import org.apache.kafka.streams.processor.api.FixedKeyProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.dependencytrack.proto.KafkaProtobufSerde;
import org.dependencytrack.proto.vulnanalysis.internal.v1beta1.ScannerResultAggregate;
import org.dependencytrack.proto.vulnanalysis.v1.ScanKey;

import java.time.Duration;
import java.util.Set;

import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;
import static org.dependencytrack.kstreams.statestore.StateStoreUtil.configurableKeyValueStore;
import static org.dependencytrack.kstreams.statestore.StateStoreUtil.defaultChangelogTopicConfig;

public class ScannerResultAggregatorSupplier implements FixedKeyProcessorSupplier<ScanKey, ScannerResultAggregate, ScannerResultAggregate> {

    private final StoreBuilder<KeyValueStore<ScanKey, ScannerResultAggregate>> storeBuilder;
    private final Duration checkInterval;
    private final Duration maxLifetime;

    public ScannerResultAggregatorSupplier(final String storeName, final Duration checkInterval, final Duration maxLifetime) {
        final Serde<ScanKey> keySerde = new KafkaProtobufSerde<>(ScanKey.parser());
        final Serde<ScannerResultAggregate> valueSerde = new KafkaProtobufSerde<>(ScannerResultAggregate.parser());
        this.storeBuilder = keyValueStoreBuilder(configurableKeyValueStore(storeName), keySerde, valueSerde)
                .withLoggingEnabled(defaultChangelogTopicConfig());
        this.checkInterval = checkInterval;
        this.maxLifetime = maxLifetime;
    }

    @Override
    public FixedKeyProcessor<ScanKey, ScannerResultAggregate, ScannerResultAggregate> get() {
        return new ScannerResultAggregator(storeBuilder.name(), checkInterval, maxLifetime);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(storeBuilder);
    }

}
