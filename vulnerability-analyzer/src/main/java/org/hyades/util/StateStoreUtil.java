package org.hyades.util;

import io.smallrye.config.SmallRyeConfig;
import org.apache.kafka.common.config.TopicConfig;
import org.apache.kafka.streams.kstream.Materialized.StoreType;
import org.apache.kafka.streams.state.KeyValueBytesStoreSupplier;
import org.apache.kafka.streams.state.Stores;
import org.eclipse.microprofile.config.ConfigProvider;
import org.hyades.config.StateStoreConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.NoSuchElementException;

public final class StateStoreUtil {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateStoreUtil.class);

    private StateStoreUtil() {
    }

    /**
     * Provide a {@link KeyValueBytesStoreSupplier} implementation, depending on whether
     * {@link StateStoreConfig#type()} is configured to be {@link StoreType#IN_MEMORY}
     * or {@link StoreType#ROCKS_DB}.
     *
     * @param name The name of the store
     * @return A {@link KeyValueBytesStoreSupplier}
     */
    public static KeyValueBytesStoreSupplier configurableKeyValueStore(final String name) {
        final StateStoreConfig stateStoreConfig;
        try {
            final SmallRyeConfig config = ConfigProvider.getConfig().unwrap(SmallRyeConfig.class);
            stateStoreConfig = config.getConfigMapping(StateStoreConfig.class);
        } catch (NoSuchElementException | UnsupportedOperationException e) {
            // When running tests without @QuarkusTest, resolving of the ConfigMapping will not work.
            LOGGER.debug("State store config could not be resolved; Falling back to in-memory store", e);
            return Stores.inMemoryKeyValueStore(name);
        }

        return switch (stateStoreConfig.type()) {
            case IN_MEMORY -> Stores.inMemoryKeyValueStore(name);
            case ROCKS_DB -> Stores.persistentKeyValueStore(name);
        };
    }

    /**
     * Provide a default configuration to be used for changelog topics.
     *
     * @return The default topic configuration
     */
    public static Map<String, String> defaultChangelogTopicConfig() {
        return Map.of(
                TopicConfig.CLEANUP_POLICY_CONFIG, TopicConfig.CLEANUP_POLICY_COMPACT,
                TopicConfig.SEGMENT_BYTES_CONFIG, String.valueOf(64 * 1024 * 1024), // 64 MiB
                TopicConfig.MAX_COMPACTION_LAG_MS_CONFIG, "0" // Perform compaction ASAP
        );
    }

}
