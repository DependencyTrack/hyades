package org.hyades.metrics;

import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.ProcessorContext;
import org.apache.kafka.streams.processor.api.Record;
import org.apache.kafka.streams.state.KeyValueStore;
import org.hyades.model.DependencyMetrics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeltaProcessor extends ContextualProcessor<String, DependencyMetrics, String, DependencyMetrics> {

    private String storeName;
    private KeyValueStore<String, DependencyMetrics> store;

    private static final Logger LOGGER = LoggerFactory.getLogger(DeltaProcessor.class);

    public DeltaProcessor(String storeName) {
        this.storeName = storeName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void init(final ProcessorContext<String, DependencyMetrics> context) {
        super.init(context);
        store = context().getStateStore(storeName);
    }

    /**
     * {@inheritDoc}
     */

    @Override
    public void process(Record<String, DependencyMetrics> record) {
        String purl = record.key();
        DependencyMetrics DependencyMetrics = record.value();

        DependencyMetrics lastMetrics = store.get(purl);

        //calculate Delta metrics
        DependencyMetrics deltaMetrics = lastMetrics == null ? DependencyMetrics : calculateDelta(lastMetrics, DependencyMetrics);

        store.put(purl, DependencyMetrics);
        this.context().forward(new Record(purl, deltaMetrics, System.currentTimeMillis()));
    }

    private static DependencyMetrics calculateDelta(DependencyMetrics inKeyStoreMetrics, DependencyMetrics eventMetrics) {
        DependencyMetrics deltaMetrics = new DependencyMetrics();
        deltaMetrics.setCritical(inKeyStoreMetrics.getCritical() - eventMetrics.getCritical());
        deltaMetrics.setHigh(inKeyStoreMetrics.getHigh() - eventMetrics.getHigh());
        deltaMetrics.setMedium(inKeyStoreMetrics.getMedium() - eventMetrics.getMedium());
        deltaMetrics.setLow(inKeyStoreMetrics.getLow() - eventMetrics.getLow());
        deltaMetrics.setFindingsTotal(inKeyStoreMetrics.getFindingsTotal() - eventMetrics.getFindingsTotal());

        deltaMetrics.setFindingsAudited(inKeyStoreMetrics.getFindingsAudited() - eventMetrics.getFindingsAudited());
        deltaMetrics.setFindingsAudited(inKeyStoreMetrics.getFindingsUnaudited() - eventMetrics.getFindingsUnaudited());

        deltaMetrics.setPolicyViolationsAudited(inKeyStoreMetrics.getPolicyViolationsAudited() - eventMetrics.getPolicyViolationsAudited());
        deltaMetrics.setPolicyViolationsFail(inKeyStoreMetrics.getPolicyViolationsFail() - eventMetrics.getPolicyViolationsFail());
        deltaMetrics.setPolicyViolationsInfo(inKeyStoreMetrics.getPolicyViolationsInfo() - eventMetrics.getPolicyViolationsFail());
        deltaMetrics.setPolicyViolationsLicenseUnaudited(inKeyStoreMetrics.getPolicyViolationsLicenseUnaudited() - eventMetrics.getPolicyViolationsAudited());
        deltaMetrics.setPolicyViolationsTotal(inKeyStoreMetrics.getPolicyViolationsTotal() - eventMetrics.getPolicyViolationsFail());
        return deltaMetrics;
    }
}

