package org.hyades.processor.misc;

import org.apache.kafka.streams.processor.api.FixedKeyProcessor;
import org.apache.kafka.streams.processor.api.FixedKeyProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.hyades.proto.KafkaProtobufSerde;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScannerResultAggregate;
import org.hyades.proto.vulnanalysis.v1.ScanKey;

import java.time.Duration;
import java.util.Set;

import static org.apache.kafka.streams.state.Stores.inMemoryKeyValueStore;
import static org.apache.kafka.streams.state.Stores.keyValueStoreBuilder;

public class ScannerResultAggregatorSupplier implements FixedKeyProcessorSupplier<ScanKey, ScannerResultAggregate, ScannerResultAggregate> {

    private final StoreBuilder<KeyValueStore<ScanKey, ScannerResultAggregate>> storeBuilder;
    private final Duration checkInterval;
    private final Duration maxLifetime;

    public ScannerResultAggregatorSupplier(final String storeName, final Duration checkInterval, final Duration maxLifetime) {
        this.storeBuilder = keyValueStoreBuilder(inMemoryKeyValueStore(storeName),
                new KafkaProtobufSerde<>(ScanKey.parser()),
                new KafkaProtobufSerde<>(ScannerResultAggregate.parser()));
        this.checkInterval = checkInterval;
        this.maxLifetime = maxLifetime;
    }

    @Override
    public FixedKeyProcessor<ScanKey, ScannerResultAggregate, ScannerResultAggregate> get() {
        return new ScannerResultAggregator(storeBuilder.name(), checkInterval, maxLifetime);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(storeBuilder);
    }

}
