package org.hyades.processor.internal;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CaffeineCache;
import io.quarkus.narayana.jta.QuarkusTransaction;
import org.apache.kafka.streams.processor.api.ContextualProcessor;
import org.apache.kafka.streams.processor.api.ProcessorContext;
import org.apache.kafka.streams.processor.api.Record;
import org.hyades.model.VulnerableSoftware;
import org.hyades.persistence.VulnerableSoftwareRepository;
import org.hyades.proto.vuln.v1.Source;
import org.hyades.proto.vuln.v1.Vulnerability;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.ScanStatus;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.hyades.proto.vulnanalysis.v1.internal.ScanTask;
import org.hyades.util.ComponentVersion;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import us.springett.parsers.cpe.Cpe;
import us.springett.parsers.cpe.CpeParser;
import us.springett.parsers.cpe.exceptions.CpeParsingException;
import us.springett.parsers.cpe.util.Convert;
import us.springett.parsers.cpe.values.LogicalValue;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class InternalScannerProcessor extends ContextualProcessor<String, ScanTask, String, ScanResult> {

    private static final Logger LOGGER = LoggerFactory.getLogger(InternalScannerProcessor.class);

    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final Cache cache;
    private final MeterRegistry meterRegistry;
    private Counter.Builder componentsScannedCounterBuilder;

    InternalScannerProcessor(final VulnerableSoftwareRepository vulnerableSoftwareRepository,
                             final Cache cache, final MeterRegistry meterRegistry) {
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.cache = cache;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public void init(final ProcessorContext<String, ScanResult> context) {
        super.init(context);

        componentsScannedCounterBuilder = Counter.builder("scanner.components.scanned")
                .description("Total number of scanned components")
                .tags(Set.of(
                        Tag.of("thread_id", Thread.currentThread().getName()),
                        Tag.of("task_id", context().taskId().toString()),
                        Tag.of("scanner", "internal")
                ));
    }

    public void process(final Record<String, ScanTask> record) {
        final ScanResult result = analyzeComponent(record.value());
        context().forward(record.withValue(result).withTimestamp(context().currentSystemTimeMs()));
        reportScanResult(result.getVulnerabilitiesList().isEmpty() ? "not_vulnerable" : "vulnerable");
    }

    public ScanResult analyzeComponent(final ScanTask task) {
        final ScanResult result;
        if (cache.as(CaffeineCache.class).getIfPresent(task.getComponent().getUuid()) == null) {
            LOGGER.debug("Cache miss for {}", task);
            result = versionRangeAnalysis(task);
        } else {
            LOGGER.debug("Cache hit for {}", task);
            final var vulnerabilities = (List<Vulnerability>) cache.as(CaffeineCache.class).getIfPresent(task.getComponent().getUuid()).join();
            result = ScanResult.newBuilder()
                    .setKey(task.getKey())
                    .setScanner(Scanner.SCANNER_INTERNAL)
                    .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                    .addAllVulnerabilities(vulnerabilities)
                    .build();

        }
        return result;
    }

    private ScanResult versionRangeAnalysis(final ScanTask task) {
        final Optional<Cpe> parsedCpe = parseCpe(task.getComponent());
        final Optional<PackageURL> parsedPurl = parsePurl(task.getComponent());

        final ScanResult.Builder resultBuilder = ScanResult.newBuilder()
                .setKey(task.getKey())
                .setScanner(Scanner.SCANNER_INTERNAL);

        List<VulnerableSoftware> vsList;
        String componentVersion;
        String componentUpdate;
        if (parsedCpe.isPresent()) {
            componentVersion = parsedCpe.get().getVersion();
            componentUpdate = parsedCpe.get().getUpdate();
        } else if (parsedPurl.isPresent()) {
            componentVersion = parsedPurl.get().getVersion();
            componentUpdate = null;
        } else {
            // Catch cases where the CPE couldn't be parsed and no PURL exists.
            // Should be rare, but could lead to NPEs later.
            LOGGER.debug("Neither CPE nor PURL of component {} provide a version - skipping analysis", task.getComponent().getUuid());
            return resultBuilder
                    .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                    .build();
        }
        // In some cases, componentVersion may be null, such as when a Package URL does not have a version specified
        if (componentVersion == null) {
            return resultBuilder
                    .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                    .build();
        }
        // https://github.com/DependencyTrack/dependency-track/issues/1574
        // Some ecosystems use the "v" version prefix (e.g. v1.2.3) for their components.
        // However, both the NVD and GHSA store versions without that prefix.
        // For this reason, the prefix is stripped before running analyzeVersionRange.
        //
        // REVISIT THIS WHEN ADDING NEW VULNERABILITY SOURCES!
        if (componentVersion.length() > 1 && componentVersion.startsWith("v")) {
            if (componentVersion.matches("v0.0.0-\\d{14}-[a-f0-9]{12}")) {
                componentVersion = componentVersion.substring(7, 11) + "-" + componentVersion.substring(11, 13) + "-" + componentVersion.substring(13, 15);
            } else {
                componentVersion = componentVersion.substring(1);
            }
        }

        if (parsedCpe.isPresent()) {
            final Cpe cpe = parsedCpe.get();
            vsList = QuarkusTransaction.requiringNew().call(()->vulnerableSoftwareRepository.getAllVulnerableSoftware(cpe.getPart().getAbbreviation(), cpe.getVendor(), cpe.getProduct(), parsedPurl.orElse(null)));
        } else {

            vsList = QuarkusTransaction.requiringNew().call(()->vulnerableSoftwareRepository.getAllVulnerableSoftware(null, null, null, parsedPurl.orElse(null)));
        }

        final List<Vulnerability> vulnerabilities = analyzeVersionRange(vsList, componentVersion, componentUpdate);
        cache.as(CaffeineCache.class).put(task.getComponent().getUuid(), CompletableFuture.completedFuture(vulnerabilities));
        return resultBuilder
                .setStatus(ScanStatus.SCAN_STATUS_SUCCESSFUL)
                .addAllVulnerabilities(vulnerabilities)
                .build();
    }

    List<Vulnerability> analyzeVersionRange(final List<VulnerableSoftware> vsList,
                                            final String targetVersion, final String targetUpdate) {
        final List<Vulnerability> vulnerabilities = new ArrayList<>();
        for (final VulnerableSoftware vs : vsList) {
            if (compareVersions(vs, targetVersion) && compareUpdate(vs, targetUpdate)) {

                if (vs.getVulnerabilities() != null) {
                    for (final org.hyades.model.Vulnerability vulnerability : vs.getVulnerabilities()) {
                        // Only include vulnerability ID and source in the result. As the vulnerabilities
                        // are currently sourced from the API server's database, there's no point in transmitting
                        // this information again.
                        vulnerabilities.add(Vulnerability.newBuilder()
                                .setId(vulnerability.getVulnId())
                                .setSource(switch (vulnerability.getSource()) {
                                    case "GITHUB" -> Source.SOURCE_GITHUB;
                                    case "INTERNAL" -> Source.SOURCE_INTERNAL;
                                    case "NVD" -> Source.SOURCE_NVD;
                                    case "OSV" -> Source.SOURCE_OSV;
                                    case "SNYK" -> Source.SOURCE_SNYK;
                                    case "VULNDB" -> Source.SOURCE_VULNDB;
                                    default -> Source.SOURCE_UNKNOWN;
                                })
                                .build());
                    }
                }
            }
        }
        return vulnerabilities;
    }

    private static Optional<Cpe> parseCpe(final Component component) {
        if (!component.hasCpe()) {
            return Optional.empty();
        }

        try {
            final Cpe cpe = CpeParser.parse(component.getCpe());
            return Optional.of(cpe);
        } catch (CpeParsingException e) {
            LOGGER.warn("An error occurred while parsing: {} - The CPE is invalid and will be discarded", component.getCpe(), e);
            return Optional.empty();
        }
    }

    private static Optional<PackageURL> parsePurl(final Component component) {
        if (!component.hasPurl()) {
            return Optional.empty();
        }

        try {
            final var purl = new PackageURL(component.getPurl());
            return Optional.of(purl);
        } catch (MalformedPackageURLException e) {
            LOGGER.warn("An error occurred while parsing: {} - The PURL is invalid and will be discarded", component.getPurl(), e);
            return Optional.empty();
        }
    }

    static boolean compareVersions(VulnerableSoftware vs, String targetVersion) {
        // For VulnerableSoftware (could actually be hardware) without a version number.
        // e.g. cpe:2.3:o:intel:2000e_firmware:-:*:*:*:*:*:*:*
        if (LogicalValue.NA.getAbbreviation().equals(vs.getVersion())) {
            return true;
        }
        //if any of the four conditions will be evaluated - then true;
        boolean result = (vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty())
                || (vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty())
                || (vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty())
                || (vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty());

        // Modified from original by Steve Springett
        // Added null check: vs.getVersion() != null as purl sources that use version ranges may not have version populated.
        if (!result && vs.getVersion() != null && compareAttributes(vs.getVersion(), targetVersion)) {
            return true;
        }

        final ComponentVersion target = new ComponentVersion(targetVersion);
        if (target.getVersionParts() != null && target.getVersionParts().isEmpty()) {
            return false;
        }
        if (result && vs.getVersionEndExcluding() != null && !vs.getVersionEndExcluding().isEmpty()) {
            final ComponentVersion endExcluding = new ComponentVersion(vs.getVersionEndExcluding());
            result = endExcluding.compareTo(target) > 0;
        }
        if (result && vs.getVersionStartExcluding() != null && !vs.getVersionStartExcluding().isEmpty()) {
            final ComponentVersion startExcluding = new ComponentVersion(vs.getVersionStartExcluding());
            result = startExcluding.compareTo(target) < 0;
        }
        if (result && vs.getVersionEndIncluding() != null && !vs.getVersionEndIncluding().isEmpty()) {
            final ComponentVersion endIncluding = new ComponentVersion(vs.getVersionEndIncluding());
            result &= endIncluding.compareTo(target) >= 0;
        }
        if (result && vs.getVersionStartIncluding() != null && !vs.getVersionStartIncluding().isEmpty()) {
            final ComponentVersion startIncluding = new ComponentVersion(vs.getVersionStartIncluding());
            result &= startIncluding.compareTo(target) <= 0;
        }
        return result;
    }

    static boolean compareAttributes(String left, String right) {
        //the numbers below come from the CPE Matching standard
        //Table 6-2: Enumeration of Attribute Comparison Set Relations
        //https://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7696.pdf

        if (left.equalsIgnoreCase(right)) {
            //1 6 9
            return true;
        } else if (LogicalValue.ANY.getAbbreviation().equals(left)) {
            //2 3 4
            return true;
        } else if (LogicalValue.NA.getAbbreviation().equals(left)) {
            //5 7 8
            return false;
        } else if (LogicalValue.NA.getAbbreviation().equals(right)) {
            //12 16
            return false;
        } else if (LogicalValue.ANY.getAbbreviation().equals(right)) {
            //13 15
            return false;
        }
        //10 11 14 17
        if (containsSpecialCharacter(left)) {
            final Pattern p = Convert.wellFormedToPattern(left.toLowerCase());
            final Matcher m = p.matcher(right.toLowerCase());
            return m.matches();
        }
        return false;
    }

    static boolean containsSpecialCharacter(String value) {
        for (int x = 0; x < value.length(); x++) {
            char c = value.charAt(x);
            if (c == '?' || c == '*') {
                return true;
            } else if (c == '\\') {
                //skip the next character because it is quoted
                x += 1;
            }
        }
        return false;
    }

    static boolean compareUpdate(VulnerableSoftware vs, String targetUpdate) {
        if (LogicalValue.NA.getAbbreviation().equals(vs.getUpdate())) {
            return false;
        }
        if (vs.getUpdate() == null && targetUpdate == null) {
            return true;
        }
        // Moving this above the null OR check to reflect method comments (ANY should mean ANY)
        // This is necessary for fuzz matching when a PURL which assumes null
        // is matched to a CPE which defaults to ANY
        if (LogicalValue.ANY.getAbbreviation().equals(targetUpdate) || LogicalValue.ANY.getAbbreviation().equals(vs.getUpdate())) {
            return true;
        }
        if (vs.getUpdate() == null || targetUpdate == null) {
            return false;
        }
        return compareAttributes(vs.getUpdate(), targetUpdate);
    }

    private void reportScanResult(final String scanResult) {
        componentsScannedCounterBuilder
                .tag("result", scanResult)
                .register(meterRegistry)
                .increment();
    }

}
