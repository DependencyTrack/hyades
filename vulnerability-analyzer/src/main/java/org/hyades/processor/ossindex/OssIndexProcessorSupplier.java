package org.hyades.processor.ossindex;

import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import org.hyades.client.ossindex.OssIndexClient;
import org.hyades.config.OssIndexConfig;
import org.hyades.model.*;
import org.hyades.processor.retry.RetryableRecord;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.Set;

@ApplicationScoped
public class OssIndexProcessorSupplier implements ProcessorSupplier<String, ScanTask, String, VulnerabilityScanResult> {

    private final OssIndexClient client;
    private final OssIndexConfig config;
    private final Cache cache;
    private final CircuitBreaker circuitBreaker;
    private final StoreBuilder<KeyValueStore<VulnerabilityScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder;
    private final StoreBuilder<KeyValueStore<VulnerabilityScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    @Inject
    public OssIndexProcessorSupplier(@RestClient final OssIndexClient client,
                                     final OssIndexConfig config,
                                     @CacheName("ossindex") final Cache cache,
                                     @Named("ossIndexCircuitBreaker") final CircuitBreaker circuitBreaker,
                                     @Named("ossIndexBatchStoreBuilder") final StoreBuilder<KeyValueStore<VulnerabilityScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder,
                                     @Named("ossIndexRetryStoreBuilder") final StoreBuilder<KeyValueStore<VulnerabilityScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder,
                                     @Named("ossIndexRetryIntervalFunction") final IntervalFunction retryIntervalFunction,
                                     final MeterRegistry meterRegistry) {
        this.client = client;
        this.config = config;
        this.cache = cache;
        this.circuitBreaker = circuitBreaker;
        this.batchStoreBuilder = batchStoreBuilder;
        this.retryStoreBuilder = retryStoreBuilder;
        this.retryIntervalFunction = retryIntervalFunction;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, ScanTask, String, VulnerabilityScanResult> get() {
        return new OssIndexProcessor(client, cache, circuitBreaker, batchStoreBuilder.name(), config.batchInterval(),
                retryStoreBuilder.name(), retryIntervalFunction, config.retry().maxAttempts(), meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(batchStoreBuilder, retryStoreBuilder);
    }

}
