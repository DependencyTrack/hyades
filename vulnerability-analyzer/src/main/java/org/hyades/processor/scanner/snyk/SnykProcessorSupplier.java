package org.hyades.processor.scanner.snyk;

import com.github.packageurl.PackageURL;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.core.IntervalFunction;
import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.streams.state.StoreBuilder;
import org.eclipse.microprofile.rest.client.inject.RestClient;
import org.hyades.client.snyk.SnykClient;
import org.hyades.config.SnykConfig;
import org.hyades.processor.retry.RetryableRecord;
import org.hyades.processor.scanner.ScanProcessorSupplier;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.Scanner;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.util.Set;

import static org.hyades.proto.vulnanalysis.v1.Scanner.SCANNER_SNYK;
import static org.hyades.util.PurlUtils.parsePurl;

@ApplicationScoped
public class SnykProcessorSupplier implements ScanProcessorSupplier {

    private static final Set<String> SUPPORTED_PURL_TYPES = Set.of(
            PackageURL.StandardTypes.CARGO,
            "cocoapods", // Not defined in StandardTypes
            PackageURL.StandardTypes.COMPOSER,
            PackageURL.StandardTypes.GEM,
            PackageURL.StandardTypes.GENERIC,
            PackageURL.StandardTypes.HEX,
            PackageURL.StandardTypes.MAVEN,
            PackageURL.StandardTypes.NPM,
            PackageURL.StandardTypes.NUGET,
            PackageURL.StandardTypes.PYPI
    );

    private final SnykClient client;
    private final SnykConfig config;
    private final Cache cache;
    private final CircuitBreaker circuitBreaker;
    private final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder;
    private final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder;
    private final IntervalFunction retryIntervalFunction;
    private final MeterRegistry meterRegistry;

    @Inject
    public SnykProcessorSupplier(final @RestClient SnykClient client,
                                 final SnykConfig config,
                                 @CacheName("snyk") final Cache cache,
                                 @Named("snykCircuitBreaker") final CircuitBreaker circuitBreaker,
                                 @Named("snykBatchStoreBuilder") final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> batchStoreBuilder,
                                 @Named("snykRetryStoreBuilder") final StoreBuilder<KeyValueStore<ScanKey, RetryableRecord<String, ScanTask>>> retryStoreBuilder,
                                 @Named("snykRetryIntervalFunction") final IntervalFunction retryIntervalFunction,
                                 final MeterRegistry meterRegistry) {
        this.client = client;
        this.config = config;
        this.cache = cache;
        this.circuitBreaker = circuitBreaker;
        this.batchStoreBuilder = batchStoreBuilder;
        this.retryStoreBuilder = retryStoreBuilder;
        this.retryIntervalFunction = retryIntervalFunction;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public boolean isEnabled() {
        return config.enabled();
    }

    @Override
    public Scanner scannerIdentity() {
        return SCANNER_SNYK;
    }

    @Override
    public int topicPartitions() {
        return config.topicPartitions();
    }

    @Override
    public boolean canProcess(final Component component) {
        return parsePurl(component.getPurl())
                .map(PackageURL::getType)
                .map(SUPPORTED_PURL_TYPES::contains)
                .orElse(false);
    }

    @Override
    public Processor<String, ScanTask, String, ScanResult> get() {
        return new SnykProcessor(client, config, cache, circuitBreaker, config.severitySource(),
                batchStoreBuilder.name(), retryStoreBuilder.name(), retryIntervalFunction, config.retry().maxAttempts(),
                meterRegistry);
    }

    @Override
    public Set<StoreBuilder<?>> stores() {
        return Set.of(batchStoreBuilder, retryStoreBuilder);
    }

}
