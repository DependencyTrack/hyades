package org.hyades.processor.scanner;

import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.hyades.proto.vulnanalysis.v1.ScannerResult;

/**
 * A specialized {@link ProcessorSupplier} for supplying scanner {@link Processor}s.
 */
public interface ScanProcessorSupplier extends ProcessorSupplier<String, ScanTask, ScanKey, ScannerResult> {

    /**
     * Determine whether the {@link Scanner} represented by this supplier is enabled.
     *
     * @return {@code true} when the {@link Scanner} is enabled, otherwise {@code false}
     */
    boolean isEnabled();

    boolean isAliasSyncEnabled();

    /**
     * Determine the {@link Scanner} identity of the {@link Processor} provided by this supplier.
     *
     * @return The {@link Scanner} identity
     */
    Scanner scannerIdentity();

    /**
     * The number of topic partitions configured for the {@link Scanner} represented by this supplier.
     *
     * @return The number of configured topic partitions
     */
    int topicPartitions();

    /**
     * Determine whether the {@link Scanner} represented by this supplier is capable of scanning a given {@link Component}.
     *
     * @param component The {@link Component} to evaluate
     * @return {@code true} when the {@link Scanner} is capable, otherwise {@code false}
     */
    boolean canProcess(final Component component);

}
