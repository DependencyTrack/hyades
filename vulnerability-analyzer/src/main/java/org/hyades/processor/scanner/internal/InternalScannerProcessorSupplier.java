package org.hyades.processor.scanner.internal;

import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import org.apache.kafka.streams.processor.api.Processor;
import org.apache.kafka.streams.processor.api.ProcessorSupplier;
import org.hyades.persistence.VulnerableSoftwareRepository;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.hyades.proto.vulnanalysis.v1.ScanResult;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

@ApplicationScoped
public class InternalScannerProcessorSupplier implements ProcessorSupplier<String, ScanTask, String, ScanResult> {

    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final Cache cache;
    private final MeterRegistry meterRegistry;

    @Inject
    public InternalScannerProcessorSupplier(final VulnerableSoftwareRepository vulnerableSoftwareRepository,
                                            @CacheName("internalCache") final Cache cache,
                                            final MeterRegistry meterRegistry) {
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.cache = cache;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public Processor<String, ScanTask, String, ScanResult> get() {
        return new InternalScannerProcessor(vulnerableSoftwareRepository, cache, meterRegistry);
    }

}
