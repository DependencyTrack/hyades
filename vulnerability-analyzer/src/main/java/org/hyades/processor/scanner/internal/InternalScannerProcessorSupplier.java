package org.hyades.processor.scanner.internal;

import io.micrometer.core.instrument.MeterRegistry;
import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import org.apache.kafka.streams.processor.api.Processor;
import org.hyades.config.InternalScannerConfig;
import org.hyades.persistence.VulnerableSoftwareRepository;
import org.hyades.processor.scanner.ScanProcessorSupplier;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.Scanner;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

import static org.hyades.proto.vulnanalysis.v1.Scanner.SCANNER_INTERNAL;

@ApplicationScoped
public class InternalScannerProcessorSupplier implements ScanProcessorSupplier {

    private final InternalScannerConfig config;
    private final VulnerableSoftwareRepository vulnerableSoftwareRepository;
    private final Cache cache;
    private final MeterRegistry meterRegistry;

    @Inject
    public InternalScannerProcessorSupplier(final InternalScannerConfig config,
                                            final VulnerableSoftwareRepository vulnerableSoftwareRepository,
                                            @CacheName("internalCache") final Cache cache,
                                            final MeterRegistry meterRegistry) {
        this.config = config;
        this.vulnerableSoftwareRepository = vulnerableSoftwareRepository;
        this.cache = cache;
        this.meterRegistry = meterRegistry;
    }

    @Override
    public boolean isEnabled() {
        return config.enabled();
    }

    @Override
    public Scanner scannerIdentity() {
        return SCANNER_INTERNAL;
    }

    @Override
    public int topicPartitions() {
        return config.topicPartitions();
    }

    @Override
    public boolean canProcess(final Component component) {
        return component.hasCpe() || component.hasPurl();
    }

    @Override
    public Processor<String, ScanTask, String, ScanResult> get() {
        return new InternalScannerProcessor(vulnerableSoftwareRepository, cache, meterRegistry);
    }

}
