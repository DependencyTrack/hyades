package org.hyades;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Branched;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.Joined;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.kstream.Named;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.Repartitioned;
import org.apache.kafka.streams.state.KeyValueStore;
import org.hyades.common.KafkaTopic;
import org.hyades.config.InternalScannerConfig;
import org.hyades.config.OssIndexConfig;
import org.hyades.config.SnykConfig;
import org.hyades.processor.scanner.internal.InternalScannerProcessorSupplier;
import org.hyades.processor.misc.TombstoneEmittingProcessorSupplier;
import org.hyades.processor.scanner.ossindex.OssIndexProcessorSupplier;
import org.hyades.processor.scanner.snyk.SnykProcessorSupplier;
import org.hyades.proto.KafkaProtobufSerde;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ExpectedScans;
import org.hyades.proto.vulnanalysis.internal.v1beta1.ScanTask;
import org.hyades.proto.vulnanalysis.internal.v1beta1.Scans;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.hyades.proto.vulnanalysis.v1.ScanCommand;
import org.hyades.proto.vulnanalysis.v1.ScanKey;
import org.hyades.proto.vulnanalysis.v1.ScanResult;
import org.hyades.proto.vulnanalysis.v1.ScanStatus;
import org.hyades.proto.vulnanalysis.v1.Scanner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.hyades.commonutil.KafkaStreamsUtil.processorNameConsume;
import static org.hyades.commonutil.KafkaStreamsUtil.processorNameProduce;

@ApplicationScoped
public class VulnerabilityAnalyzerTopology {

    private static final Logger LOGGER = LoggerFactory.getLogger(VulnerabilityAnalyzerTopology.class);

    private final InternalScannerConfig internalScannerConfig;
    private final OssIndexConfig ossIndexConfig;
    private final SnykConfig snykConfig;
    private final InternalScannerProcessorSupplier internalScannerProcessorSupplier;
    private final OssIndexProcessorSupplier ossIndexProcessorSupplier;
    private final SnykProcessorSupplier snykProcessorSupplier;

    @Inject
    public VulnerabilityAnalyzerTopology(final InternalScannerConfig internalScannerConfig,
                                         final OssIndexConfig ossIndexConfig,
                                         final SnykConfig snykConfig,
                                         final InternalScannerProcessorSupplier internalScannerProcessorSupplier,
                                         final OssIndexProcessorSupplier ossIndexProcessorSupplier,
                                         final SnykProcessorSupplier snykProcessorSupplier) {
        this.internalScannerConfig = internalScannerConfig;
        this.ossIndexConfig = ossIndexConfig;
        this.snykConfig = snykConfig;
        this.internalScannerProcessorSupplier = internalScannerProcessorSupplier;
        this.ossIndexProcessorSupplier = ossIndexProcessorSupplier;
        this.snykProcessorSupplier = snykProcessorSupplier;
    }

    @Produces
    public Topology topology() {
        final var streamsBuilder = new StreamsBuilder();

        final var expectedScansSerde = new KafkaProtobufSerde<>(ExpectedScans.parser());
        final var scansSerde = new KafkaProtobufSerde<>(Scans.parser());
        final var scanCommandSerde = new KafkaProtobufSerde<>(ScanCommand.parser());
        final var scanKeySerde = new KafkaProtobufSerde<>(ScanKey.parser());
        final var scanResultSerde = new KafkaProtobufSerde<>(ScanResult.parser());
        final var scanTaskSerde = new KafkaProtobufSerde<>(ScanTask.parser());

        final KStream<ScanKey, ScanCommand> scanCommandStream = streamsBuilder
                .stream(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), Consumed
                        .with(scanKeySerde, scanCommandSerde)
                        .withName(processorNameConsume(KafkaTopic.VULN_ANALYSIS_COMPONENT)));

        final KStream<ScanKey, ScanResult> resultStream = streamsBuilder
                .stream(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Consumed
                        .with(scanKeySerde, scanResultSerde)
                        .withName(processorNameConsume(KafkaTopic.VULN_ANALYSIS_RESULT)));

        // For every incoming component, determine which scanners are enabled, and capable
        // of scanning it. Generate a scan task for each capable scanner.
        final KStream<ScanKey, ScanTask> scanTaskStream = scanCommandStream
                .flatMapValues(this::generateScanTasks, Named.as("generate_scan_tasks"));

        // Route the generated scan tasks to the topics of the respective scanners.
        // Events are re-keyed from scan key to component identifier (CPE, PURL, etc.).
        // Keying by identifier will ensure that the same identifier will always
        // be scanned by the same stream task, allowing for efficient and reliable cache lookups.
        //
        // The priority of identifiers to use as key is as follows:
        //   1. PURL
        //   2. CPE
        //   3. (Others, TBD)
        //
        // The assumption is that PURL will cover most cases, and having one or the other outlier
        // where PURL and CPE refer to different components is acceptable in practice.
        //
        // Each scanner has its own topic. Because partitions are the means of enabling
        // parallelism in Kafka, and scanners work at different paces, utilizing the same
        // input topic for all scanners is not practical. Scanner topics are managed by
        // Kafka Streams and will be automatically created if they don't exist yet.
        scanTaskStream
                .selectKey(this::selectComponentIdentifier, Named.as("re-key_to_component_identifier"))
                .split(Named.as("applicable_scanner"))
                .branch(this::shouldScanWithInternalScanner, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-internal")
                                        .withNumberOfPartitions(internalScannerConfig.topicPartitions()))
                                .process(internalScannerProcessorSupplier, Named.as("scan_with_internal-scanner"))
                                .selectKey((identifier, scanResult) -> scanResult.getKey(),
                                        Named.as("re-key_internal-scanner_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "internal-scanner_result"))))
                        .withName("-internal"))
                .branch(this::shouldScanWithOssIndex, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-ossindex")
                                        .withNumberOfPartitions(ossIndexConfig.topicPartitions()))
                                .process(ossIndexProcessorSupplier, Named.as("scan_with_ossindex"))
                                .selectKey((identifier, scanResult) -> scanResult.getKey(),
                                        Named.as("re-key_ossindex_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "ossindex_result"))))
                        .withName("-ossindex"))
                .branch(this::shouldScanWithSnyk, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-snyk")
                                        .withNumberOfPartitions(snykConfig.topicPartitions()))
                                .process(snykProcessorSupplier, Named.as("scan_with_snyk"))
                                .selectKey((identifier, scanResult) -> scanResult.getKey(),
                                        Named.as("re-key_snyk_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "snyk_result"))))
                        .withName("-snyk"))
                .defaultBranch(Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .map((identifier, task) -> KeyValue.pair(task.getKey(),
                                                ScanResult.newBuilder()
                                                        .setKey(task.getKey())
                                                        .setScanner(Scanner.SCANNER_NONE)
                                                        .setStatus(ScanStatus.SCAN_STATUS_COMPLETE)
                                                        .build()),
                                        Named.as("map_unmatched_scan_task_to_completion_event"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT,
                                                "completion_event_for_unscannable_component"))))
                        .withName("-none"));

        // Based on the generated scan tasks, determine for which scanners we're expecting results.
        // For each scan key, materialize a collection of scanner identities in a table.
        final KTable<ScanKey, ExpectedScans> expectedScanResultsTable = scanTaskStream
                // Emit tombstone events for scan keys for which no events have been received
                // for >= 1h (stream time). Check every 5min (also stream time) for eligible keys.
                // This keeps the KTable from growing indefinitely.
                .processValues(new TombstoneEmittingProcessorSupplier<>(
                        "expected-scan-results-last-update-store",
                        scanKeySerde, Duration.ofMinutes(5), Duration.ofHours(1),
                        scanKey -> ScanTask.newBuilder()
                                .setKey(scanKey)
                                .setScanner(Scanner.SCANNER_NONE)
                                .setTombstone(true)
                                .build()
                ), Named.as("emit_expected_scan_results_table_tombstones"))
                .groupByKey(Grouped
                        .with(scanKeySerde, scanTaskSerde)
                        .withName("scan-task-by-scan-key"))
                .aggregate(() -> ExpectedScans.newBuilder().build(),
                        this::aggregateExpectedScanResults,
                        Named.as("aggregate_expected_scan_results"),
                        Materialized
                                .<ScanKey, ExpectedScans, KeyValueStore<Bytes, byte[]>>as("expected-scan-results-table")
                                .withKeySerde(scanKeySerde)
                                .withValueSerde(expectedScansSerde)
                                .withStoreType(Materialized.StoreType.IN_MEMORY));

        // Join the results we receive from scanners with the table of expected scan results.
        final KStream<ScanKey, Scans> completedScansStream = resultStream
                // Filter out completion events, otherwise we'll be running into an infinite loop.
                .filter((scanKey, result) -> ScanStatus.SCAN_STATUS_COMPLETE != result.getStatus(),
                        Named.as("filter_out_completion_events"))
                .join(expectedScanResultsTable, (result, expected) -> {
                    final var statuses = new HashMap<String, ScanStatus>();
                    expected.getScannersList().forEach(scanner -> statuses.put(scanner.name(), ScanStatus.SCAN_STATUS_PENDING));
                    statuses.put(result.getScanner().name(), result.getStatus());
                    return Scans.newBuilder().putAllStatuses(statuses).build();
                }, Joined
                        .with(scanKeySerde, scanResultSerde, expectedScansSerde)
                        .withName("join_results_with_expected_scan_results"));

        // Aggregate completed scans per scan key and materialize this data in a table.
        // Table values will include the reported status by each scanner, e.g.
        //   INTERNAL -> SUCCESSFUL
        //   OSSINDEX -> FAILED
        //   SNYK     -> PENDING
        final KTable<ScanKey, Scans> completedScansTable = completedScansStream
                // Emit tombstone events for ScanKeys for which no events have been received
                // for >= 1h (stream time). Check every 5min (also stream time) for eligible keys.
                // This keeps the KTable from growing indefinitely.
                .processValues(new TombstoneEmittingProcessorSupplier<>(
                        "completed-scans-table-last-update-store",
                        scanKeySerde, Duration.ofMinutes(5), Duration.ofHours(1),
                        scanKey -> Scans.newBuilder().setTombstone(true).build()
                ), Named.as("emit_completed_scans_table_tombstones"))
                .groupByKey(Grouped
                        .with(scanKeySerde, scansSerde)
                        .withName("completed-scans-by-scan-key"))
                .aggregate(
                        () -> Scans.newBuilder().build(),
                        this::aggregateCompletedScans,
                        Named.as("aggregate_completed_scans"),
                        Materialized
                                .<ScanKey, Scans, KeyValueStore<Bytes, byte[]>>as("completed-scans-table")
                                .withKeySerde(scanKeySerde)
                                .withValueSerde(scansSerde)
                                .withStoreType(Materialized.StoreType.IN_MEMORY)
                                .withCachingDisabled()); // Ensure all changes will be forwarded

        // Once all expected scans for a given scan key are completed (not PENDING),
        // emit a completion event for that scan key to the result stream.
        //
        // This allows downstream systems to determine when no further scan results
        // are to be expected.
        completedScansTable
                .toStream(Named.as("stream_completed_scans"))
                // We receive an event for every change of the aggregate here,
                // so suppress events that do not represent a completed scan.
                .filter((scanKey, completedScans) -> completedScans != null
                                && completedScans.getStatusesMap().values().stream().noneMatch(ScanStatus.SCAN_STATUS_PENDING::equals),
                        Named.as("filter_completed_scans"))
                .mapValues((scanKey, completedScans) -> ScanResult.newBuilder()
                                .setKey(scanKey)
                                .setScanner(Scanner.SCANNER_NONE)
                                .setStatus(ScanStatus.SCAN_STATUS_COMPLETE)
                                .build(),
                        Named.as("map_completed_scans_to_completion_event"))
                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                        .with(scanKeySerde, scanResultSerde)
                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "completion_event")));

        return streamsBuilder.build();
    }

    private List<ScanTask> generateScanTasks(final ScanKey scanKey, final ScanCommand scanCommand) {
        final var tasks = new ArrayList<ScanTask>();
        if (!scanCommand.hasComponent()) {
            return tasks;
        }

        final Component component = scanCommand.getComponent();
        if (internalScannerConfig.enabled() && (component.hasCpe() || component.hasPurl())) {
            tasks.add(ScanTask.newBuilder()
                    .setKey(scanKey)
                    .setScanner(Scanner.SCANNER_INTERNAL)
                    .setComponent(component)
                    .build());
        }
        if (ossIndexConfig.enabled() && component.hasPurl()) {
            tasks.add(ScanTask.newBuilder()
                    .setKey(scanKey)
                    .setScanner(Scanner.SCANNER_OSSINDEX)
                    .setComponent(component)
                    .build());
        }
        if (snykConfig.enabled() && component.hasPurl()) {
            tasks.add(ScanTask.newBuilder()
                    .setKey(scanKey)
                    .setScanner(Scanner.SCANNER_SNYK)
                    .setComponent(component)
                    .build());
        }
        if (tasks.isEmpty()) {
            tasks.add(ScanTask.newBuilder()
                    .setKey(scanKey)
                    .setScanner(Scanner.SCANNER_NONE)
                    .build());
        }

        return tasks;
    }

    private String selectComponentIdentifier(final ScanKey scanKey, final ScanTask scanTask) {
        if (!scanTask.hasComponent()) {
            return scanKey.getComponentUuid();
        }

        final Component component = scanTask.getComponent();
        if (component.hasPurl()) {
            try {
                return new PackageURL(component.getPurl()).getCoordinates();
            } catch (MalformedPackageURLException e) {
                LOGGER.warn("Unable to select PURL as component identifier for {}; Falling back to {}",
                        scanKey, scanKey.getComponentUuid(), e);
            }
        } else if (component.hasCpe()) {
            return component.getCpe();
        }

        return scanKey.getComponentUuid();
    }

    private <K> boolean shouldScanWithInternalScanner(final K key, final ScanTask scanTask) {
        return internalScannerConfig.enabled() && scanTask.getScanner() == Scanner.SCANNER_INTERNAL;
    }

    private <K> boolean shouldScanWithOssIndex(final K key, final ScanTask scanTask) {
        return ossIndexConfig.enabled() && scanTask.getScanner() == Scanner.SCANNER_OSSINDEX;
    }

    private <K> boolean shouldScanWithSnyk(final K key, final ScanTask scanTask) {
        return snykConfig.enabled() && scanTask.getScanner() == Scanner.SCANNER_SNYK;
    }

    private <K> ExpectedScans aggregateExpectedScanResults(final K key, final ScanTask scanTask, final ExpectedScans aggregate) {
        if (scanTask.hasTombstone() && scanTask.getTombstone()) {
            return null;
        }

        return ExpectedScans.newBuilder(aggregate)
                .addScanners(scanTask.getScanner())
                .build();
    }

    private <K> Scans aggregateCompletedScans(final K key, final Scans scans, final Scans aggregate) {
        if (scans.hasTombstone() && scans.getTombstone()) {
            return null;
        }

        final Map<String, ScanStatus> statuses;
        if (!aggregate.getStatusesMap().isEmpty()) {
            statuses = new HashMap<>(aggregate.getStatusesMap());
            scans.getStatusesMap().entrySet().stream()
                    .filter(entry -> ScanStatus.SCAN_STATUS_PENDING != entry.getValue())
                    .forEach(entry -> statuses.put(entry.getKey(), entry.getValue()));
        } else {
            statuses = scans.getStatusesMap();
        }

        return Scans.newBuilder()
                .putAllStatuses(statuses)
                .build();
    }

}
