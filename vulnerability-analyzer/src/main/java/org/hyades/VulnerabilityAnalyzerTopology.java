package org.hyades;

import io.quarkus.kafka.client.serialization.ObjectMapperSerde;
import org.hyades.common.KafkaTopic;
import org.hyades.config.InternalScannerConfig;
import org.hyades.config.OssIndexConfig;
import org.hyades.config.SnykConfig;
import org.hyades.model.*;
import org.hyades.processor.internal.InternalScannerProcessorSupplier;
import org.hyades.processor.misc.TombstoneEmittingProcessorSupplier;
import org.hyades.processor.ossindex.OssIndexProcessorSupplier;
import org.hyades.processor.snyk.SnykProcessorSupplier;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.utils.Bytes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Branched;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.Joined;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.kstream.Named;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.Repartitioned;
import org.apache.kafka.streams.state.KeyValueStore;
import org.hyades.serializers.ScanKeySerde;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import java.time.Duration;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.hyades.commonutil.KafkaStreamsUtil.processorNameConsume;
import static org.hyades.commonutil.KafkaStreamsUtil.processorNameProduce;

@ApplicationScoped
public class VulnerabilityAnalyzerTopology {

    private final InternalScannerConfig internalScannerConfig;
    private final OssIndexConfig ossIndexConfig;
    private final SnykConfig snykConfig;
    private final InternalScannerProcessorSupplier internalScannerProcessorSupplier;
    private final OssIndexProcessorSupplier ossIndexProcessorSupplier;
    private final SnykProcessorSupplier snykProcessorSupplier;

    @Inject
    public VulnerabilityAnalyzerTopology(final InternalScannerConfig internalScannerConfig,
                                         final OssIndexConfig ossIndexConfig,
                                         final SnykConfig snykConfig,
                                         final InternalScannerProcessorSupplier internalScannerProcessorSupplier,
                                         final OssIndexProcessorSupplier ossIndexProcessorSupplier,
                                         final SnykProcessorSupplier snykProcessorSupplier) {
        this.internalScannerConfig = internalScannerConfig;
        this.ossIndexConfig = ossIndexConfig;
        this.snykConfig = snykConfig;
        this.internalScannerProcessorSupplier = internalScannerProcessorSupplier;
        this.ossIndexProcessorSupplier = ossIndexProcessorSupplier;
        this.snykProcessorSupplier = snykProcessorSupplier;
    }

    @Produces
    public Topology topology() {
        final var streamsBuilder = new StreamsBuilder();

        final var componentSerde = new ObjectMapperSerde<>(Component.class);
        final var completedScansSerde = new ObjectMapperSerde<>(CompletedScans.class);
        final var expectedScanResultsSerde = new ObjectMapperSerde<>(ExpectedScanResults.class);
        final var scanKeySerde = new ScanKeySerde();
        final var scanResultSerde = new ObjectMapperSerde<>(VulnerabilityScanResult.class);
        final var scanTaskSerde = new ObjectMapperSerde<>(ScanTask.class);

        final KStream<VulnerabilityScanKey, Component> componentStream = streamsBuilder
                .stream(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), Consumed
                        .with(scanKeySerde, componentSerde)
                        .withName(processorNameConsume(KafkaTopic.VULN_ANALYSIS_COMPONENT)));

        final KStream<VulnerabilityScanKey, VulnerabilityScanResult> resultStream = streamsBuilder
                .stream(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Consumed
                        .with(scanKeySerde, scanResultSerde)
                        .withName(processorNameConsume(KafkaTopic.VULN_ANALYSIS_RESULT)));

        // For every incoming component, determine which scanners are enabled, and capable
        // of scanning it. Generate a scan task for each capable scanner.
        final KStream<VulnerabilityScanKey, ScanTask> scanTaskStream = componentStream
                .flatMapValues(this::generateScanTasks, Named.as("generate_scan_tasks"));

        // Route the generated scan tasks to the topics of the respective scanners.
        // Events are re-keyed from scan key to component identifier (CPE, PURL, etc.).
        // Keying by identifier will ensure that the same identifier will always
        // be scanned by the same stream task, allowing for efficient and reliable cache lookups.
        //
        // The priority of identifiers to use as key is as follows:
        //   1. PURL
        //   2. CPE
        //   3. (Others, TBD)
        //
        // The assumption is that PURL will cover most cases, and having one or the other outlier
        // where PURL and CPE refer to different components is acceptable in practice.
        //
        // Each scanner has its own topic. Because partitions are the means of enabling
        // parallelism in Kafka, and scanners work at different paces, utilizing the same
        // input topic for all scanners is not practical. Scanner topics are managed by
        // Kafka Streams and will be automatically created if they don't exist yet.
        scanTaskStream
                .selectKey(this::selectComponentIdentifier, Named.as("re-key_to_component_identifier"))
                .split(Named.as("applicable_scanner"))
                .branch(this::shouldScanWithInternalScanner, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-internal")
                                        .withNumberOfPartitions(internalScannerConfig.topicPartitions()))
                                .process(internalScannerProcessorSupplier, Named.as("scan_with_internal-scanner"))
                                .selectKey((identifier, scanResult) -> scanResult.key(),
                                        Named.as("re-key_internal-scanner_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "internal-scanner_result"))))
                        .withName("-internal"))
                .branch(this::shouldScanWithOssIndex, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-ossindex")
                                        .withNumberOfPartitions(ossIndexConfig.topicPartitions()))
                                .process(ossIndexProcessorSupplier, Named.as("scan_with_ossindex"))
                                .selectKey((identifier, scanResult) -> scanResult.key(),
                                        Named.as("re-key_ossindex_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "ossindex_result"))))
                        .withName("-ossindex"))
                .branch(this::shouldScanWithSnyk, Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .repartition(Repartitioned
                                        .with(Serdes.String(), scanTaskSerde)
                                        .withName("scan-task-snyk")
                                        .withNumberOfPartitions(snykConfig.topicPartitions()))
                                .process(snykProcessorSupplier, Named.as("scan_with_snyk"))
                                .selectKey((identifier, scanResult) -> scanResult.key(),
                                        Named.as("re-key_snyk_result_to_scan_key"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "snyk_result"))))
                        .withName("-snyk"))
                .defaultBranch(Branched
                        .<String, ScanTask>withConsumer(stream -> stream
                                .map((identifier, task) -> KeyValue.pair(task.vulnerabilityScanKey(),
                                                VulnerabilityScanResult.builder(task.vulnerabilityScanKey(), AnalyzerIdentity.NONE)
                                                        .withStatus(VulnerabilityScanStatus.COMPLETE)
                                                        .build()),
                                        Named.as("map_unmatched_scan_task_to_completion_event"))
                                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                                        .with(scanKeySerde, scanResultSerde)
                                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT,
                                                "completion_event_for_unscannable_component"))))
                        .withName("-none"));

        // Based on the generated scan tasks, determine for which scanners we're expecting results.
        // For each scan key, materialize a collection of scanner identities in a table.
        final KTable<VulnerabilityScanKey, ExpectedScanResults> expectedScanResultsTable = scanTaskStream
                // Emit tombstone events for scan keys for which no events have been received
                // for >= 1h (stream time). Check every 5min (also stream time) for eligible keys.
                // This keeps the KTable from growing indefinitely.
                .process(new TombstoneEmittingProcessorSupplier<>(
                        "expected-scan-results-last-update-store",
                        scanKeySerde, Duration.ofMinutes(5), Duration.ofHours(1),
                        ScanTask::asTombstone
                ), Named.as("emit_expected_scan_results_table_tombstones"))
                .groupByKey(Grouped
                        .with(scanKeySerde, scanTaskSerde)
                        .withName("scan-task-by-scan-key"))
                .aggregate(() -> new ExpectedScanResults(null),
                        this::aggregateExpectedScanResults,
                        Named.as("aggregate_expected_scan_results"),
                        Materialized
                                .<VulnerabilityScanKey, ExpectedScanResults, KeyValueStore<Bytes, byte[]>>as("expected-scan-results-table")
                                .withKeySerde(scanKeySerde)
                                .withValueSerde(expectedScanResultsSerde)
                                .withStoreType(Materialized.StoreType.IN_MEMORY));

        // Join the results we receive from scanners with the table of expected scan results.
        final KStream<VulnerabilityScanKey, CompletedScans> completedScansStream = resultStream
                // Filter out completion events, otherwise we'll be running into an infinite loop.
                .filter((scanKey, result) -> VulnerabilityScanStatus.COMPLETE != result.status(),
                        Named.as("filter_out_completion_events"))
                .join(expectedScanResultsTable, (result, expected) -> {
                    final var completed = new EnumMap<AnalyzerIdentity, VulnerabilityScanStatus>(AnalyzerIdentity.class);
                    expected.scanners().forEach(scanner -> completed.put(scanner, VulnerabilityScanStatus.PENDING));
                    completed.put(result.scanner(), result.status());
                    return new CompletedScans(completed, false);
                }, Joined
                        .with(scanKeySerde, scanResultSerde, expectedScanResultsSerde)
                        .withName("join_results_with_expected_scan_results"));

        // Aggregate completed scans per scan key and materialize this data in a table.
        // Table values will include the reported status by each scanner, e.g.
        //   INTERNAL -> SUCCESSFUL
        //   OSSINDEX -> FAILED
        //   SNYK     -> PENDING
        final KTable<VulnerabilityScanKey, CompletedScans> completedScansTable = completedScansStream
                // Emit tombstone events for ScanKeys for which no events have been received
                // for >= 1h (stream time). Check every 5min (also stream time) for eligible keys.
                // This keeps the KTable from growing indefinitely.
                .process(new TombstoneEmittingProcessorSupplier<>(
                        "completed-scans-table-last-update-store",
                        scanKeySerde, Duration.ofMinutes(5), Duration.ofHours(1),
                        CompletedScans::asTombstone
                ), Named.as("emit_completed_scans_table_tombstones"))
                .groupByKey(Grouped
                        .with(scanKeySerde, completedScansSerde)
                        .withName("completed-scans-by-scan-key"))
                .aggregate(
                        () -> new CompletedScans(null, false),
                        this::aggregateCompletedScans,
                        Named.as("aggregate_completed_scans"),
                        Materialized
                                .<VulnerabilityScanKey, CompletedScans, KeyValueStore<Bytes, byte[]>>as("completed-scans-table")
                                .withKeySerde(scanKeySerde)
                                .withValueSerde(completedScansSerde)
                                .withStoreType(Materialized.StoreType.IN_MEMORY)
                                .withCachingDisabled()); // Ensure all changes will be forwarded

        // Once all expected scans for a given scan key are completed (not PENDING),
        // emit a completion event for that scan key to the result stream.
        //
        // This allows downstream systems to determine when no further scan results
        // are to be expected.
        completedScansTable
                .toStream(Named.as("stream_completed_scans"))
                // We receive an event for every change of the aggregate here,
                // so suppress events that do not represent a completed scan.
                .filter((scanKey, completedScans) -> completedScans != null
                                && completedScans.completed().values().stream().noneMatch(VulnerabilityScanStatus.PENDING::equals),
                        Named.as("filter_completed_scans"))
                .mapValues((scanKey, completedScans) -> VulnerabilityScanResult.builder(scanKey, AnalyzerIdentity.NONE)
                                .withStatus(VulnerabilityScanStatus.COMPLETE).build(),
                        Named.as("map_completed_scans_to_completion_event"))
                .to(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), Produced
                        .with(scanKeySerde, scanResultSerde)
                        .withName(processorNameProduce(KafkaTopic.VULN_ANALYSIS_RESULT, "completion_event")));

        return streamsBuilder.build();
    }

    private List<ScanTask> generateScanTasks(final VulnerabilityScanKey vulnerabilityScanKey, final Component component) {
        final var tasks = new ArrayList<ScanTask>();

        if (internalScannerConfig.enabled()
                && (component.getCpe() != null || component.getPurl() != null)) {
            tasks.add(new ScanTask(vulnerabilityScanKey, AnalyzerIdentity.INTERNAL_ANALYZER, component, false));
        }

        if (ossIndexConfig.enabled() && component.getPurl() != null) {
            tasks.add(new ScanTask(vulnerabilityScanKey, AnalyzerIdentity.OSSINDEX_ANALYZER, component, false));
        }

        if (snykConfig.enabled() && component.getPurl() != null) {
            tasks.add(new ScanTask(vulnerabilityScanKey, AnalyzerIdentity.SNYK_ANALYZER, component, false));
        }

        if (tasks.isEmpty()) {
            tasks.add(new ScanTask(vulnerabilityScanKey, AnalyzerIdentity.NONE, null, false));
        }

        return tasks;
    }

    private String selectComponentIdentifier(final VulnerabilityScanKey vulnerabilityScanKey, final ScanTask scanTask) {
        if (scanTask.component() == null) {
            return vulnerabilityScanKey.component().toString();
        }

        if (scanTask.component().getPurl() != null) {
            return scanTask.component().getPurl().getCoordinates();
        } else if (scanTask.component().getCpe() != null) {
            return scanTask.component().getCpe();
        }

        return vulnerabilityScanKey.component().toString();
    }

    private <K> boolean shouldScanWithInternalScanner(final K key, final ScanTask scanTask) {
        return internalScannerConfig.enabled() && AnalyzerIdentity.INTERNAL_ANALYZER == scanTask.scanner();
    }

    private <K> boolean shouldScanWithOssIndex(final K key, final ScanTask scanTask) {
        return ossIndexConfig.enabled() && AnalyzerIdentity.OSSINDEX_ANALYZER == scanTask.scanner();
    }

    private <K> boolean shouldScanWithSnyk(final K key, final ScanTask scanTask) {
        return snykConfig.enabled() && AnalyzerIdentity.SNYK_ANALYZER == scanTask.scanner();
    }

    private <K> ExpectedScanResults aggregateExpectedScanResults(final K key, final ScanTask scanTask,
                                                                 final ExpectedScanResults aggregate) {
        if (scanTask.tombstone()) {
            return null;
        }

        final Set<AnalyzerIdentity> scanners;
        if (aggregate.scanners() != null) {
            scanners = aggregate.scanners();
            scanners.add(scanTask.scanner());
        } else {
            scanners = Set.of(scanTask.scanner());
        }

        return new ExpectedScanResults(scanners);
    }

    private <K> CompletedScans aggregateCompletedScans(final K key, final CompletedScans completedScans,
                                                       final CompletedScans aggregate) {
        if (completedScans.tombstone()) {
            return null;
        }

        final Map<AnalyzerIdentity, VulnerabilityScanStatus> completed;
        if (aggregate.completed() != null) {
            completed = aggregate.completed();
            completedScans.completed().entrySet().stream()
                    .filter(entry -> VulnerabilityScanStatus.PENDING != entry.getValue())
                    .forEach(entry -> completed.put(entry.getKey(), entry.getValue()));
        } else {
            completed = completedScans.completed();
        }

        return new CompletedScans(completed, false);
    }

}
