package org.hyades.client.ossindex;

import org.hyades.config.OssIndexConfig;
import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MultivaluedHashMap;
import javax.ws.rs.core.MultivaluedMap;
import java.util.Base64;
import java.util.Optional;

@ApplicationScoped
class AuthorizationClientHeaderFactory implements ClientHeadersFactory {

    private final OssIndexConfig config;

    @Inject
    AuthorizationClientHeaderFactory(final OssIndexConfig config) {
        this.config = config;
    }

    @Override
    public MultivaluedMap<String, String> update(final MultivaluedMap<String, String> incomingHeaders,
                                                 final MultivaluedMap<String, String> clientOutgoingHeaders) {
        final var headers = new MultivaluedHashMap<String, String>();
        final Optional<String> username = config.api().username();
        final Optional<String> token = config.api().token();

        if (username.isPresent() && token.isPresent()) {
            final String credentials = "%s:%s".formatted(username.get(), token.get());
            final String encodedCredentials = Base64.getEncoder().encodeToString(credentials.getBytes());
            headers.putSingle(HttpHeaders.AUTHORIZATION, "Basic %s".formatted(encodedCredentials));
        }

        return headers;
    }

}
