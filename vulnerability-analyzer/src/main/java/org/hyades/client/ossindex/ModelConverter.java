package org.hyades.client.ossindex;

import org.hyades.model.Cwe;
import org.hyades.proto.vuln.v1.Alias;
import org.hyades.proto.vuln.v1.Rating;
import org.hyades.proto.vuln.v1.Reference;
import org.hyades.proto.vuln.v1.Severity;
import org.hyades.proto.vuln.v1.Vulnerability;
import org.hyades.resolver.CweResolver;
import us.springett.cvss.Cvss;
import us.springett.cvss.CvssV2;
import us.springett.cvss.CvssV3;
import us.springett.cvss.Score;

import static org.hyades.commonutil.VulnerabilityUtil.normalizedCvssV2Score;
import static org.hyades.commonutil.VulnerabilityUtil.normalizedCvssV3Score;
import static org.hyades.proto.vuln.v1.ScoreMethod.SCORE_METHOD_CVSSV2;
import static org.hyades.proto.vuln.v1.ScoreMethod.SCORE_METHOD_CVSSV3;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_CRITICAL;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_HIGH;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_INFO;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_LOW;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_MEDIUM;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_UNSPECIFIED;
import static org.hyades.proto.vuln.v1.Source.SOURCE_NVD;
import static org.hyades.proto.vuln.v1.Source.SOURCE_OSSINDEX;

public final class ModelConverter {

    public static Vulnerability convert(final ComponentReportVulnerability reportedVuln, boolean isAliasSyncEnabled) {
        Vulnerability.Builder vulnBuilder = Vulnerability.newBuilder();
        vulnBuilder.setId(reportedVuln.id());
        if (vulnBuilder.getId().toLowerCase().startsWith("cve-")) {
            vulnBuilder.setSource(SOURCE_NVD);
        } else {
            vulnBuilder.setSource(SOURCE_OSSINDEX);
            if (isAliasSyncEnabled && reportedVuln.cve() != null) {
                vulnBuilder.addAliases(Alias.newBuilder()
                        .setId(reportedVuln.cve())
                        .setSource(SOURCE_NVD));
            }
        }
        vulnBuilder.setTitle(reportedVuln.title());
        vulnBuilder.setDescription(reportedVuln.description());
        if (reportedVuln.cwe() != null) {
            CweResolver cweResolver = CweResolver.getInstance();
            Cwe cwe = cweResolver.resolve(reportedVuln.cwe());
            if (cwe != null) {
                vulnBuilder.addCwes(cwe.getCweId());
            }
        }

        if (reportedVuln.reference() != null) {
            vulnBuilder.addReferences(Reference.newBuilder().setUrl(reportedVuln.reference()));
        }
        for (String externalReference : reportedVuln.externalReferences()) {
            vulnBuilder.addReferences(Reference.newBuilder().setUrl(externalReference));
        }

        final Rating rating = convertRating(reportedVuln.cvssVector());
        if (rating != null) {
            vulnBuilder.addRatings(rating);
        }

        return vulnBuilder.build();
    }

    private static Rating convertRating(final String cvssVector) {
        final Cvss cvss = Cvss.fromVector(cvssVector);
        if (cvss == null) {
            return null;
        }

        final Score score = cvss.calculateScore();
        if (cvss instanceof CvssV3) {
            return Rating.newBuilder()
                    .setSource(SOURCE_OSSINDEX)
                    .setMethod(SCORE_METHOD_CVSSV3)
                    .setScore(score.getBaseScore())
                    .setVector(cvss.getVector())
                    .setSeverity(convert(normalizedCvssV3Score(score.getBaseScore())))
                    .build();
        } else if (cvss instanceof CvssV2) {
            return Rating.newBuilder()
                    .setSource(SOURCE_OSSINDEX)
                    .setMethod(SCORE_METHOD_CVSSV2)
                    .setScore(score.getBaseScore())
                    .setVector(cvss.getVector())
                    .setSeverity(convert(normalizedCvssV2Score(score.getBaseScore())))
                    .build();
        }

        return null;
    }

    private static Severity convert(final org.hyades.model.Severity severity) {
        return switch (severity) {
            case CRITICAL -> SEVERITY_CRITICAL;
            case HIGH -> SEVERITY_HIGH;
            case MEDIUM -> SEVERITY_MEDIUM;
            case LOW -> SEVERITY_LOW;
            case INFO -> SEVERITY_INFO;
            default -> SEVERITY_UNSPECIFIED;
        };
    }

}
