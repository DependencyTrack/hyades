package org.hyades.client.snyk;

import com.google.protobuf.Timestamp;
import org.hyades.commonutil.JsonUtil;
import org.hyades.model.Cwe;
import org.hyades.proto.vuln.v1.Alias;
import org.hyades.proto.vuln.v1.Rating;
import org.hyades.proto.vuln.v1.Reference;
import org.hyades.proto.vuln.v1.Vulnerability;
import org.hyades.resolver.CweResolver;

import java.time.chrono.ChronoZonedDateTime;
import java.util.ArrayList;
import java.util.Objects;
import java.util.Optional;

import static org.hyades.proto.vuln.v1.ScoreMethod.SCORE_METHOD_CVSSV3;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_CRITICAL;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_HIGH;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_LOW;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_MEDIUM;
import static org.hyades.proto.vuln.v1.Severity.SEVERITY_UNSPECIFIED;
import static org.hyades.proto.vuln.v1.Source.SOURCE_GITHUB;
import static org.hyades.proto.vuln.v1.Source.SOURCE_NVD;
import static org.hyades.proto.vuln.v1.Source.SOURCE_SNYK;

public final class ModelConverter {

    private ModelConverter() {
    }

    public static Vulnerability convert(final CweResolver cweResolver, final SeveritySource severitySource, final PageData<Issue> pageData, final boolean isAliasSyncEnabled) {
        final Vulnerability.Builder vulnBuilder = Vulnerability.newBuilder();
        vulnBuilder.setId(pageData.id());
        vulnBuilder.setSource(SOURCE_SNYK);
        vulnBuilder.setDescription(pageData.attributes().description());
        Optional.ofNullable(pageData.attributes().createdAt())
                .map(JsonUtil::jsonStringToTimestamp)
                .map(ChronoZonedDateTime::toInstant)
                .map(instant -> Timestamp.newBuilder().setSeconds(instant.getEpochSecond()).build())
                .ifPresent(vulnBuilder::setCreated);
        Optional.ofNullable(pageData.attributes().updatedAt())
                .map(JsonUtil::jsonStringToTimestamp)
                .map(ChronoZonedDateTime::toInstant)
                .map(instant -> Timestamp.newBuilder().setSeconds(instant.getEpochSecond()).build())
                .ifPresent(vulnBuilder::setUpdated);
        if (pageData.attributes().problems() != null) {
            if(isAliasSyncEnabled){
                vulnBuilder.addAllAliases(pageData.attributes().problems().stream()
                        .map(ModelConverter::convert)
                        .filter(Objects::nonNull)
                        .toList());
            }
            pageData.attributes().problems().stream()
                    .map(problem -> convert(cweResolver, problem))
                    .filter(Objects::nonNull)
                    .forEach(vulnBuilder::addCwes);
        }
        if (pageData.attributes().severities() != null) {
            pageData.attributes().severities().stream()
                    .filter(severity -> severitySource.equals(severity.source()))
                    .filter(severity -> severity.score() != null && !severity.vector().isBlank())
                    .findFirst()
                    .ifPresent(severity -> vulnBuilder.addRatings(Rating.newBuilder()
                            .setSeverity(switch (severity.level()) {
                                case "CRITICAL" -> SEVERITY_CRITICAL;
                                case "HIGH" -> SEVERITY_HIGH;
                                case "MEDIUM" -> SEVERITY_MEDIUM;
                                case "LOW" -> SEVERITY_LOW;
                                default -> SEVERITY_UNSPECIFIED;
                            })
                            .setMethod(SCORE_METHOD_CVSSV3)
                            .setScore(severity.score())
                            .setVector(severity.vector())
                            .build())
                    );
        }
        if (pageData.attributes().slots() != null) {
            if (pageData.attributes().slots().references() != null) {
                pageData.attributes().slots().references().stream()
                        .map(reference -> Reference.newBuilder()
                                .setUrl(reference.url())
                                .setDisplayName(reference.title()))
                        .forEach(vulnBuilder::addReferences);
            }
            Optional.ofNullable(pageData.attributes().slots().publicationTime())
                    .map(JsonUtil::jsonStringToTimestamp)
                    .map(ChronoZonedDateTime::toInstant)
                    .map(instant -> Timestamp.newBuilder().setSeconds(instant.getEpochSecond()).build())
                    .ifPresent(vulnBuilder::setPublished);
        }
        if (pageData.attributes().coordinates() != null) {
            var recommendations = new ArrayList<String>();
            pageData.attributes().coordinates().forEach(coordinate -> {
                if (coordinate.remedies() != null) {
                    coordinate.remedies().forEach(remedy -> recommendations.add(remedy.description()));
                }
            });
            vulnBuilder.setRecommendation(String.join(System.lineSeparator(), recommendations));
        }
        return vulnBuilder.build();
    }

    private static Integer convert(final CweResolver cweResolver, final Problem problem) {
        if ("CWE".equals(problem.source())) {
            return Optional.ofNullable(cweResolver.resolve(problem.id()))
                    .map(Cwe::getCweId)
                    .orElse(null);
        }
        return null;
    }

    private static Alias convert(final Problem problem) {
        return switch (problem.source()) {
            case "CVE" -> Alias.newBuilder()
                    .setId(problem.id())
                    .setSource(SOURCE_NVD)
                    .build();
            case "GHSA" -> Alias.newBuilder()
                    .setId(problem.id())
                    .setSource(SOURCE_GITHUB)
                    .build();
            default -> null;
        };
    }

}
