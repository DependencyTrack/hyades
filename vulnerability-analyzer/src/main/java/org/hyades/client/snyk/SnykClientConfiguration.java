package org.hyades.client.snyk;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Tag;
import io.micrometer.core.instrument.binder.httpcomponents.MicrometerHttpRequestExecutor;
import io.micrometer.core.instrument.binder.httpcomponents.PoolingHttpClientConnectionManagerMetricsBinder;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.hyades.config.SnykConfig;
import org.hyades.util.RoundRobinAccessor;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Named;
import java.util.Set;
import java.util.function.Supplier;

class SnykClientConfiguration {

    @Produces
    @ApplicationScoped
    SnykService snykClient(@Named("snykHttpClient") final CloseableHttpClient httpClient,
                           @Named("snykObjectMapper") final ObjectMapper objectMapper,
                           @Named("snykTokenSupplier") final Supplier<String> tokenSupplier,
                           final SnykConfig config) {
        return new SnykService(
                httpClient,
                objectMapper,
                config.api().baseUrl().orElse(null),
                config.api().orgId().orElse(null),
                tokenSupplier, config.api().version().orElse(null));
    }

    @Produces
    @ApplicationScoped
    @Named("snykHttpClient")
    CloseableHttpClient httpClient(final MeterRegistry meterRegistry) {
        final var connectionManager = new PoolingHttpClientConnectionManager();
        new PoolingHttpClientConnectionManagerMetricsBinder(connectionManager, "snyk").bindTo(meterRegistry);

        return HttpClientBuilder.create()
                .setConnectionManager(connectionManager)
                .setDefaultRequestConfig(RequestConfig.copy(RequestConfig.DEFAULT)
                        .setConnectTimeout(3_000) // TODO: Make configurable?
                        .setSocketTimeout(3_000) // TODO: Make configurable?
                        .build())
                .setRequestExecutor(MicrometerHttpRequestExecutor.builder(meterRegistry)
                        .tags(Set.of(Tag.of("client", "snykHttpClient")))
                        .build())
                .disableAutomaticRetries() // Automatic retries are blocking
                .build();
    }

    @Produces
    @ApplicationScoped
    @Named("snykObjectMapper")
    ObjectMapper objectMapper() {
        return new ObjectMapper()
                .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)
                .setSerializationInclusion(JsonInclude.Include.NON_NULL);
    }

    @Produces
    @ApplicationScoped
    @Named("snykTokenSupplier")
    Supplier<String> tokenSupplier(final SnykConfig config) {
        if (!config.enabled()) {
            return () -> null;
        }

        return config.api().tokens()
                .filter(tokens -> !tokens.isEmpty())
                .<Supplier<String>>map(tokens -> {
                    if (tokens.size() == 1) {
                        // Avoid unnecessary overhead of coordinating list
                        // access when there's only a single token to use.
                        return () -> tokens.get(0);
                    } else {
                        return new RoundRobinAccessor<>(tokens)::get;
                    }
                })
                .orElseThrow(() -> new IllegalStateException("Snyk is enabled, but not API token was provided"));
    }

}
