package org.hyades.client.snyk;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.hyades.config.SnykConfig;
import org.hyades.util.RoundRobinAccessor;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Named;
import java.util.function.Supplier;

class SnykClientConfiguration {

    @Produces
    @ApplicationScoped
    @Named("snykObjectMapper")
    ObjectMapper objectMapper() {
        return new ObjectMapper()
                .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)
                .setSerializationInclusion(JsonInclude.Include.NON_NULL);

    }

    @Produces
    @ApplicationScoped
    @Named("snykTokenSupplier")
    Supplier<String> tokenSupplier(final SnykConfig config) {
        if (!config.enabled()) {
            return () -> null;
        }

        return config.api().tokens()
                .filter(tokens -> !tokens.isEmpty())
                .<Supplier<String>>map(tokens -> {
                    if (tokens.size() == 1) {
                        // Avoid unnecessary overhead of coordinating list
                        // access when there's only a single token to use.
                        return () -> tokens.get(0);
                    } else {
                        return new RoundRobinAccessor<>(tokens)::get;
                    }
                })
                .orElseThrow(() -> new IllegalStateException("Snyk is enabled, but not API token was provided"));
    }
}
