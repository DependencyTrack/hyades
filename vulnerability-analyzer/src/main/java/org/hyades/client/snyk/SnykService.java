package org.hyades.client.snyk;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.quarkus.cache.CacheResult;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.function.Supplier;

/**
 * Client for the Snyk REST API.
 * <p>
 * Note: Using the MicroProfile RestClient does not work, because Snyk expects the PURL
 * to be encoded differently than what the MP RestClient is doing (it expects ":" and "@"
 * to be encoded, which is normally not necessary for URL path segments).
 */
public class SnykService {

    private final CloseableHttpClient httpClient;
    private final ObjectMapper objectMapper;
    private final String apiBaseUrl;
    private final String apiOrgId;
    private final Supplier<String> apiTokenSupplier;
    private final String apiVersion;

    public SnykService(final CloseableHttpClient httpClient, final ObjectMapper objectMapper,
                       final String apiBaseUrl, final String apiOrgId, final Supplier<String> apiTokenSupplier,
                       final String apiVersion) {
        this.httpClient = httpClient;
        this.objectMapper = objectMapper;
        this.apiBaseUrl = apiBaseUrl;
        this.apiOrgId = apiOrgId;
        this.apiTokenSupplier = apiTokenSupplier;
        this.apiVersion = apiVersion;
    }

    @CacheResult(cacheName = "snyk")
    public Page<Issue> getIssues(final String coordinates) throws IOException {
        final String encodedPurl = URLEncoder.encode(coordinates, StandardCharsets.UTF_8);
        final var request = new HttpGet("%s/rest/orgs/%s/packages/%s/issues?version=%s".formatted(apiBaseUrl, apiOrgId, encodedPurl, apiVersion));
        request.setHeader(HttpHeaders.AUTHORIZATION, "token " + apiTokenSupplier.get());
        request.setHeader(HttpHeaders.ACCEPT, "application/vnd.api+json");

        try (final CloseableHttpResponse response = httpClient.execute(request)) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return objectMapper.readValue(response.getEntity().getContent(), new TypeReference<>() {
                });
            } else {
                throw new WebApplicationException(
                        "Unexpected response status: " + response.getStatusLine().getStatusCode(),
                        Response.status(response.getStatusLine().getStatusCode()).build());
            }
        }
    }
}
