package org.hyades.config;

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;

import jakarta.validation.constraints.Positive;
import java.time.Duration;
import java.util.Optional;
import java.util.OptionalInt;

public interface CircuitBreakerConfig {

    @Positive
    OptionalInt failureRateThreshold();

    @Positive
    OptionalInt slowCallRateThreshold();

    Optional<Duration> waitDurationInOpenState();

    Optional<Duration> slowCallDurationThreshold();

    @Positive
    OptionalInt permittedNumberOfCallsInHalfOpenState();

    @Positive
    OptionalInt minimumNumberOfCalls();

    Optional<SlidingWindowType> slidingWindowType();

    @Positive
    OptionalInt slidingWindowSize();

    static io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.Builder toConfigBuilder(final CircuitBreakerConfig config) {
        final var configBuilder = io.github.resilience4j.circuitbreaker.CircuitBreakerConfig
                .from(io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.ofDefaults());
        config.failureRateThreshold().ifPresent(configBuilder::failureRateThreshold);
        config.slowCallRateThreshold().ifPresent(configBuilder::slowCallRateThreshold);
        config.waitDurationInOpenState().ifPresent(configBuilder::waitDurationInOpenState);
        config.slowCallDurationThreshold().ifPresent(configBuilder::slowCallDurationThreshold);
        config.permittedNumberOfCallsInHalfOpenState().ifPresent(configBuilder::permittedNumberOfCallsInHalfOpenState);
        config.minimumNumberOfCalls().ifPresent(configBuilder::minimumNumberOfCalls);
        config.slidingWindowType().ifPresent(configBuilder::slidingWindowType);
        config.slidingWindowSize().ifPresent(configBuilder::slidingWindowSize);
        return configBuilder;
    }

}
