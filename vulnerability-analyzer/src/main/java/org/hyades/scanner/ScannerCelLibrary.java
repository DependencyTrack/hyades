package org.hyades.scanner;

import com.github.packageurl.MalformedPackageURLException;
import com.github.packageurl.PackageURL;
import com.google.api.expr.v1alpha1.Type;
import org.hyades.proto.vulnanalysis.v1.Component;
import org.projectnessie.cel.EnvOption;
import org.projectnessie.cel.Library;
import org.projectnessie.cel.ProgramOption;
import org.projectnessie.cel.checker.Decls;
import org.projectnessie.cel.common.types.Err;
import org.projectnessie.cel.common.types.StringT;
import org.projectnessie.cel.common.types.ref.Val;
import org.projectnessie.cel.interpreter.functions.Overload;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

class ScannerCelLibrary implements Library {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScannerCelLibrary.class);

    private static final String FUNC_PURL_COORDINATES = "purl_coordinates";
    private static final String FUNC_PURL_TYPE = "purl_type";
    private static final Type TYPE_COMPONENT = Decls.newObjectType(Component.getDescriptor().getFullName());
    private static final String VAR_COMPONENT = "component";

    @Override
    public List<EnvOption> getCompileOptions() {
        return List.of(
                EnvOption.declarations(
                        Decls.newVar(
                                VAR_COMPONENT,
                                TYPE_COMPONENT
                        ),
                        Decls.newFunction(
                                FUNC_PURL_COORDINATES,
                                Decls.newOverload(
                                        "purl_coordinates_string_string",
                                        List.of(Decls.String),
                                        Decls.String
                                )
                        ),
                        Decls.newFunction(
                                FUNC_PURL_TYPE,
                                Decls.newOverload(
                                        "purl_type_string_string",
                                        List.of(Decls.String),
                                        Decls.String
                                )
                        )
                ),
                EnvOption.types(
                        Component.getDefaultInstance()
                )
        );
    }

    @Override
    public List<ProgramOption> getProgramOptions() {
        return List.of(
                ProgramOption.functions(
                        Overload.unary(
                                FUNC_PURL_COORDINATES,
                                ScannerCelLibrary::purlCoordinatesFunc
                        ),
                        Overload.unary(
                                FUNC_PURL_TYPE,
                                ScannerCelLibrary::purlTypeFunc
                        )
                )
        );
    }

    private static Val purlCoordinatesFunc(final Val val) {
        if (val.value() instanceof final String purlStr) {
            try {
                return StringT.stringOf(new PackageURL(purlStr).getCoordinates());
            } catch (MalformedPackageURLException e) {
                LOGGER.warn("Failed to parse PURL from %s".formatted(purlStr), e);
                return StringT.stringOf("");
            }
        }

        return Err.maybeNoSuchOverloadErr(val);
    }

    private static Val purlTypeFunc(final Val val) {
        if (val.value() instanceof final String purlStr) {
            try {
                return StringT.stringOf(new PackageURL(purlStr).getType());
            } catch (MalformedPackageURLException e) {
                LOGGER.warn("Failed to parse PURL from %s".formatted(purlStr), e);
                return StringT.stringOf("");
            }
        }

        return Err.maybeNoSuchOverloadErr(val);
    }

}
