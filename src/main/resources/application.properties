## Quarkus
#
quarkus.http.port=8089

## Kafka
kafka.bootstrap.servers=localhost:9092
quarkus.kafka-streams.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-id=dtrack-vuln-analyzer
quarkus.kafka-streams.application-server=localhost:8089
quarkus.kafka-streams.topics=\
  component-analysis,\
  component-analysis-cpe,\
  component-analysis-purl,\
  component-analysis-purl-aggregate,\
  component-analysis-swid,\
  component-analysis-vuln,\
  component-vuln-analysis-result
quarkus.kafka.devservices.enabled=false
quarkus.log.category."org.apache.kafka".level=WARN
quarkus.kafka.retry-attempts=2
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.num.stream.threads=3

## OSS Index Scanner
#
scanner.ossindex.base.url=https://ossindex.sonatype.org
scanner.ossindex.enabled=true
scanner.ossindex.api.username=
scanner.ossindex.api.token=
scanner.ossindex.cache.validity.period=2H
org.acme.client.ossindex.OssIndexClient/mp-rest/url=${scanner.ossindex.base.url}

## Snyk Scanner
scanner.snyk.enabled=false
scanner.snyk.base.url=https://api.snyk.io
scanner.snyk.org.id=
scanner.snyk.token=
scanner.snyk.cache.validity.period=2H
scanner.snyk.ratelimit.timeout.duration=60
scanner.snyk.ratelimit.limit.for.period=1500
scanner.snyk.ratelimit.limit.refresh.period=60

notification.application.id="notification"
quarkus.datasource.db-kind=postgresql

# Always use quotes for keywords, column- and table names.
# e.g. SELECT "FOO"."BAR" FROM "BAZ". This matches what the API server does,
# and is required for compatibility with its schema.
quarkus.hibernate-orm.database.globally-quoted-identifiers=true

# Hibernate should only validate that the existing schema matches our entity classes,
# but it should never generate a schema by itself.
quarkus.hibernate-orm.database.generation=validate

# Use external Postgres DB for dev mode (./mvnw quarkus:dev), but let Quarkus
# take care of test container creation in the test profile.
# See https://quarkus.io/guides/databases-dev-services
%dev.quarkus.datasource.username=dtrack
%dev.quarkus.datasource.password=dtrack
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/dtrack

# Use Flyway only in test mode to populate the DB with the schema generated
# by the API server. In production or dev mode, this will be handled by the
# API server itself. See https://quarkus.io/guides/flyway
%test.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.locations=migrations/postgres

quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.physical_naming_strategy=org.hibernate.cfg.DefaultNamingStrategy
quarkus.hibernate-orm.active=true

##SMTP Mailer properties
quarkus.mailer.from=""
quarkus.mailer.host=""
quarkus.mailer.port=
quarkus.mailer.start-tls=DISABLED
quarkus.mailer.username="'
quarkus.mailer.password=""
quarkus.mailer.ssl=false
