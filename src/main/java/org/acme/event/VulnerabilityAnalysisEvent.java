package org.acme.event;

import alpine.event.framework.AbstractChainableEvent;
import org.acme.model.Component;
import org.acme.model.Project;

import javax.enterprise.context.ApplicationScoped;
import java.util.ArrayList;
import java.util.List;

/**
 * Defines a general purpose event to analyze components for vulnerabilities.
 * Additional logic in the event handler performs analysis on what specific
 * type of analysis should take place.
 *
 * @author Steve Springett
 * @since 3.0.0
 */
@ApplicationScoped
public class VulnerabilityAnalysisEvent extends AbstractChainableEvent {

    private List<Component> components = new ArrayList<>();
    private Project project;

    /**
     * Default constructed used to signal that a portfolio analysis
     * should be performed on all components.
     */
    public VulnerabilityAnalysisEvent() {

    }

    /**
     * Creates an event to analyze the specified components.
     *
     * @param components the components to analyze
     */
    public VulnerabilityAnalysisEvent(final List<Component> components) {
        this.components = components;
    }

    public void setComponents(final List<Component> components) {
        this.components = components;
    }

    /**
     * Creates an event to analyze the specified component.
     *
     * @param component the component to analyze
     */
    public void setComponent(final Component component) {
        this.components.add(component);
    }

    public VulnerabilityAnalysisEvent(final Component component) {
        this.components.add(component);
    }

    /**
     * Returns the list of components to analyze.
     *
     * @return the list of components to analyze
     */
    public List<Component> getComponents() {
        return this.components;
    }

    /**
     * Fluent method that sets the project these components are
     * optionally a part of and returns this instance.
     */
    public VulnerabilityAnalysisEvent project(final Project project) {
        this.project = project;
        return this;
    }

    /**
     * Returns the project these components are optionally a part of.
     */
    public Project getProject() {
        return project;
    }


}
