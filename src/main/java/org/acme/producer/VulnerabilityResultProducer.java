package org.acme.producer;

import org.acme.model.CacheKey;
import org.acme.model.ComponentAnalysisCache;
import org.acme.model.VulnerablityResult;
import org.acme.serde.CacheKeySerializer;
import org.acme.serde.ComponentAnalysisCacheSerializer;
import org.acme.serde.VulnerabilityResultSerializer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.common.serialization.UUIDSerializer;

import javax.enterprise.context.ApplicationScoped;
import java.util.Properties;
import java.util.UUID;
@ApplicationScoped
public class VulnerabilityResultProducer {

    private static final Producer<UUID, VulnerablityResult> producer;


    static {
        final var properties = new Properties();
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        properties.put(ProducerConfig.CLIENT_ID_CONFIG, "VulnerabilityResultProducer");
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, UUIDSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, VulnerabilityResultSerializer.class.getName());
        producer = new KafkaProducer<>(properties);
    }


    public void sendVulnCacheToKafka(UUID key, VulnerablityResult vulnerablityResult) {
        producer.send(new ProducerRecord<>("vuln-result", key, vulnerablityResult));

    }
}
