package org.acme.producer;

import org.acme.model.CacheKey;
import org.acme.model.ComponentAnalysisCache;
import org.acme.model.VulnerablityResult;
import org.acme.serde.CacheKeySerializer;
import org.acme.serde.ComponentAnalysisCacheSerializer;
import org.acme.serde.VulnerabilityResultSerializer;
import org.acme.tasks.scanners.AnalyzerIdentity;
import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.StringSerializer;
import org.apache.kafka.common.serialization.UUIDSerializer;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.jboss.logging.Logger;

import javax.enterprise.context.ApplicationScoped;
import java.util.Properties;
import java.util.UUID;

@ApplicationScoped
public class VulnerabilityResultProducer {
    @ConfigProperty(name = "topic.vuln-result.cache")
    String cacheTopic;
    Logger logger = Logger.getLogger("poc");

    private static final Producer<UUID, VulnerablityResult> producer;


    static {
        final var properties = new Properties();
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        properties.put(ProducerConfig.CLIENT_ID_CONFIG, "VulnerabilityResultProducer");
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, UUIDSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, VulnerabilityResultSerializer.class.getName());
        properties.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, false);
        producer = new KafkaProducer<>(properties);
    }


    public void sendVulnResultToDT(UUID key, VulnerablityResult vulnerablityResult) {
        producer.send(new ProducerRecord<>(cacheTopic, key, vulnerablityResult), new Callback() {
            public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                logger.info(VulnerabilityResultProducer.class);
                if (e == null) {
                    logger.info(vulnerablityResult.getIdentity());
                    if (vulnerablityResult.getIdentity().equals(AnalyzerIdentity.SNYK_ANALYZER)) {
                        logger.info(vulnerablityResult.getVulnerability().getVulnerableSoftware().size());
                        logger.info(vulnerablityResult.getVulnerability().getVulnerableSoftware().get(0));
                    }
                    logger.info("Successfully received the details as: \n" +
                            "Topic:" + recordMetadata.topic() + "\n" +
                            "Partition:" + recordMetadata.partition() + "\n" +
                            "Offset" + recordMetadata.offset() + "\n" +
                            "Timestamp" + recordMetadata.timestamp());
                } else {
                    logger.error("Can't produce,getting error", e);

                }
            }
        });

    }
}
