package org.acme.commonutil;

import org.acme.model.Vulnerability;
import org.acme.model.VulnerabilityAlias;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.AbstractMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

public class VulnerabilityUtilTest {

    @Test
    public void testGetUniqueAliases() {
        final var vuln = new Vulnerability();
        vuln.setVulnId("INTERNAL-001");
        vuln.setSource(Vulnerability.Source.INTERNAL);
        vuln.setAliases(List.of(
                createAlias(alias -> {
                    alias.setInternalId("INTERNAL-001");
                    alias.setGhsaId("GHSA-002");
                    alias.setSonatypeId("SONATYPE-003");
                }),
                createAlias(alias -> {
                    alias.setInternalId("INTERNAL-001");
                    alias.setOsvId("OSV-004");
                    alias.setSonatypeId("SONATYPE-003");
                })
        ));

        final Set<Map.Entry<Vulnerability.Source, String>> uniqueAliases = VulnerabilityUtil.getUniqueAliases(vuln);
        Assertions.assertEquals(3, uniqueAliases.size());
        Assertions.assertTrue((uniqueAliases).contains(new AbstractMap.SimpleEntry<>(Vulnerability.Source.GITHUB, "GHSA-002")));
        Assertions.assertTrue((uniqueAliases).contains(new AbstractMap.SimpleEntry<>(Vulnerability.Source.OSSINDEX, "SONATYPE-003")));
        Assertions.assertTrue((uniqueAliases).contains(new AbstractMap.SimpleEntry<>(Vulnerability.Source.OSV, "OSV-004")));
    }

    @Test
    public void testGetUniqueAliasesWhenVulnerabilityIsNull() {
        Assertions.assertTrue((VulnerabilityUtil.getUniqueAliases(null)).isEmpty());
    }

    @Test
    public void testGetUniqueAliasesWhenAliasesAreNull() {
        Assertions.assertTrue((VulnerabilityUtil.getUniqueAliases(new Vulnerability())).isEmpty());
    }

    private VulnerabilityAlias createAlias(final Consumer<VulnerabilityAlias> customizer) {
        final var alias = new VulnerabilityAlias();
        customizer.accept(alias);
        return alias;
    }

}