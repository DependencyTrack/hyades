# This file is part of Dependency-Track.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) OWASP Foundation. All Rights Reserved.
on:
  workflow_call:
    inputs:
      module:
        type: string
        required: true
        description: "Name of the Maven module to build"
      ref-name:
        type: string
        required: true
        description: "Short ref name of the branch or tag that triggered the workflow run"

permissions: { }

jobs:
  build-native-image:
    name: Build Native Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
        - name: amd64
          build-timeout: 15
        - name: arm64
          build-timeout: 75
      fail-fast: true
    steps:
    - name: Checkout Repository
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # tag=v4.1.7
    - name: Set up JDK
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # tag=v4.2.1
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    - name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # tag=v3.2.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # tag=v3.4.0
      with:
        install: true
    - name: Build Modules
      run: |-
        mvn -B --no-transfer-progress clean install -DskipTests
    - name: Build Native Image
      timeout-minutes: ${{ matrix.arch.build-timeout }}
      run: |-
        RESOURCES_INCLUDES=""
        RESOURCES_EXCLUDES=""
        if [[ "${{ matrix.arch.name }}" == "arm64" ]]; then
          # When depending on Kafka Streams, include RocksDB JNI library for aarch64.
          # Quarkus only includes the x64 library variant per default.
          # https://github.com/quarkusio/quarkus/issues/30545
          if grep -i 'kafka-streams' ${{ inputs.module }}/pom.xml > /dev/null; then
            RESOURCES_INCLUDES="librocksdbjni-linux-aarch64.so"
            RESOURCES_EXCLUDES="librocksdbjni-linux64.so"
          fi
        
          # When snappy compression is enabled, include the respective JNI library
          # for aarch64 when building for arm64. Quarkus only includes the x64 library variant per default.
          if grep -i 'quarkus.kafka.snappy.enabled=true' ${{ inputs.module }}/src/main/resources/application.properties > /dev/null; then
            RESOURCES_INCLUDES="$RESOURCES_INCLUDES,org/xerial/snappy/native/Linux/aarch64/libsnappyjava.so"
            RESOURCES_EXCLUDES="$RESOURCES_EXCLUDES,org/xerial/snappy/native/Linux/x86_64/libsnappyjava.so"
          fi
        fi
        echo "Including resources: ${RESOURCES_INCLUDES:-None}"
        echo "Excluding resources: ${RESOURCES_EXCLUDES:-None}"
        mvn -B --no-transfer-progress -pl ${{ inputs.module }} package -Dnative -DskipTests \
          -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1-java21 \
          -Dquarkus.native.container-build=true \
          -Dquarkus.native.container-runtime-options='--platform=linux/${{ matrix.arch.name }}' \
          -Dquarkus.native.resources.includes="$RESOURCES_INCLUDES" \
          -Dquarkus.native.resources.excludes="$RESOURCES_EXCLUDES"
    - name: Test Native Image
      if: ${{ matrix.arch.name == 'amd64' }}
      run: |-
        mvn -B --no-transfer-progress -pl ${{ inputs.module }} \
          test-compile failsafe:integration-test -Dnative
    - name: Upload Build Artifact
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # tag=v4.3.3
      with:
        name: native-image-${{ matrix.arch.name }}
        path: |-
          ${{ inputs.module }}/target/*-runner

  build-container-image:
    name: Build Container Image
    runs-on: ubuntu-latest
    permissions:
      packages: write # Required to push images to ghcr.io
    timeout-minutes: 5
    needs:
    - build-native-image
    steps:
    - name: Checkout Repository
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # tag=v4.1.7
    - name: Download amd64 Binary
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # tag=v4.1.8
      with:
        name: native-image-amd64
        path: ${{ inputs.module }}/target/amd64
    - name: Download arm64 Binary
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # tag=v4.1.8
      with:
        name: native-image-arm64
        path: ${{ inputs.module }}/target/arm64
    - name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # tag=v3.2.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # tag=v3.4.0
      with:
        install: true
    - name: Docker login
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # tag=v3.3.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Determine Container Tags
      id: determine-container-tags
      run: |-
        IMAGE_NAME="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/hyades-${{ inputs.module }}"
        REF_NAME="${{ inputs.ref-name }}"
        TAGS=""
        
        if [[ $REF_NAME == feature-* ]]; then
          TAGS="${IMAGE_NAME}:${REF_NAME,,}-native"
        else
          VERSION="$(yq -p=xml '.project.version' pom.xml)"
          TAGS="${IMAGE_NAME}:${VERSION}-native"
          if [[ $VERSION == *-SNAPSHOT ]]; then
            TAGS="${TAGS},${IMAGE_NAME}:snapshot-native"
          else
            TAGS="${TAGS},${IMAGE_NAME}:latest-native"
          fi
        fi
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
    - name: Build Container Image
      uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # tag=v6.5.0
      with:
        context: ./${{ inputs.module }}
        file: ./${{ inputs.module }}/src/main/docker/Dockerfile.native-multiarch
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.determine-container-tags.outputs.tags }}
