## Quarkus
#
quarkus.application.name=hyades-repository-meta-analyzer
quarkus.http.port=8091

## Logging
#
quarkus.log.console.json=false
quarkus.log.category."org.apache.kafka".level=WARN

## Kafka
#
%dev.kafka.bootstrap.servers=localhost:9092
api.topic.prefix=
quarkus.kafka-streams.application-id=${api.topic.prefix}hyades-repository-meta-analyzer
quarkus.kafka-streams.application-server=localhost:8091
quarkus.kafka-streams.topics=\
  ${api.topic.prefix}dtrack.repo-meta-analysis.component,\
  ${api.topic.prefix}dtrack.repo-meta-analysis.result
kafka.retry-attempts=2
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.num.stream.threads=3
kafka-streams.compression.type=snappy
quarkus.kafka.snappy.enabled=true
# Using the default value of 30s in order to make the property configurable via environment variables.
# Without this, Quarkus will interpret "KAFKA_STREAMS" as "kafka.streams", which fails its internal property
# prefix check, which is expecting a "kafka-streams" prefix.
# Overriding this property is required in cases where the Delete topic permission can not be granted to
# Kafka clients (e.g. in multi-tenant Kafka clusters).
kafka-streams.repartition.purge.interval.ms=30000

## Kafka Streams Exception Handling
#
kafka-streams.default.deserialization.exception.handler=org.dependencytrack.kstreams.exception.DeserializationExceptionHandler
kafka-streams.default.production.exception.handler=org.dependencytrack.kstreams.exception.ProductionExceptionHandler
kafka-streams.exception.thresholds.deserialization.count=5
kafka-streams.exception.thresholds.deserialization.interval=PT30M
kafka-streams.exception.thresholds.processing.count=50
kafka-streams.exception.thresholds.processing.interval=PT30M
kafka-streams.exception.thresholds.production.count=5
kafka-streams.exception.thresholds.production.interval=PT30M

## Dev Services for Kafka
#
quarkus.kafka.devservices.image-name=docker.redpanda.com/vectorized/redpanda:v23.3.3
quarkus.kafka.devservices.topic-partitions."dtrack.repo-meta-analysis.component"=3
quarkus.kafka.devservices.topic-partitions."dtrack.repo-meta-analysis.result"=3

## Secret Decryption
#
%test.secret.key.path=src/test/resources/secret.key

quarkus.datasource.db-kind=postgresql

# Always use quotes for keywords, column- and table names.
# e.g. SELECT "FOO"."BAR" FROM "BAZ". This matches what the API server does,
# and is required for compatibility with its schema.
quarkus.hibernate-orm.database.globally-quoted-identifiers=true

# Hibernate should only validate that the existing schema matches our entity classes,
# but it should never generate a schema by itself.
quarkus.hibernate-orm.database.generation=validate

# Use external Postgres DB for dev mode (./mvnw quarkus:dev), but let Quarkus
# take care of test container creation in the test profile.
# See https://quarkus.io/guides/databases-dev-services
%dev.quarkus.datasource.username=dtrack
%dev.quarkus.datasource.password=dtrack
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/dtrack
quarkus.datasource.devservices.init-script-path=migrations/postgres/V0.0.1__API-Server-4.8.2.sql

#%dev.quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.active=true

quarkus.cache.enabled=true
quarkus.cache.type=caffeine
quarkus.cache.caffeine."metaAnalyzer".expire-after-write=2H
quarkus.cache.caffeine."metaAnalyzer".metrics-enabled=true
quarkus.cache.caffeine."metaAnalyzer".initial-capacity=5

## Container Image
#
quarkus.container-image.registry=ghcr.io
quarkus.container-image.group=dependencytrack
