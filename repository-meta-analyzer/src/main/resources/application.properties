## Quarkus
#
quarkus.http.port=8091
# fast-jar (default) is causing issues with static field initialization,
# e.g. in CweImporter and CweResolver. Quarkus uses different ClassLoaders
# for the fast-jar deployment, but only one for the uber-jar.
# https://quarkus.io/guides/class-loading-reference
quarkus.package.type=uber-jar

## Kafka
#
kafka.bootstrap.servers=localhost:9092
quarkus.kafka-streams.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-id=dtrack-repository-meta-analyzer
quarkus.kafka-streams.application-server=localhost:8091
quarkus.kafka-streams.topics=\
  dtrack.repo-meta-analysis.component,\
  dtrack.repo-meta-analysis.result
quarkus.kafka.devservices.enabled=false
quarkus.log.category."org.apache.kafka".level=WARN
kafka.retry-attempts=2
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.num.stream.threads=3

## Secret Decryption
#
%test.secret.key.path=src/test/resources/secret.key

quarkus.datasource.db-kind=postgresql

# Always use quotes for keywords, column- and table names.
# e.g. SELECT "FOO"."BAR" FROM "BAZ". This matches what the API server does,
# and is required for compatibility with its schema.
quarkus.hibernate-orm.database.globally-quoted-identifiers=true

# Hibernate should only validate that the existing schema matches our entity classes,
# but it should never generate a schema by itself.
quarkus.hibernate-orm.database.generation=validate

# Use external Postgres DB for dev mode (./mvnw quarkus:dev), but let Quarkus
# take care of test container creation in the test profile.
# See https://quarkus.io/guides/databases-dev-services
%dev.quarkus.datasource.username=dtrack
%dev.quarkus.datasource.password=dtrack
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/dtrack

# Use Flyway only in test mode to populate the DB with the schema generated
# by the API server. In production or dev mode, this will be handled by the
# API server itself. See https://quarkus.io/guides/flyway
%test.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.locations=migrations/postgres

%dev.quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.active=true

quarkus.cache.enabled=true
quarkus.cache.type=caffeine
quarkus.cache.caffeine."metaAnalyzer".expire-after-write=2H
quarkus.cache.caffeine."metaAnalyzer".metrics-enabled=true
quarkus.cache.caffeine."metaAnalyzer".initial-capacity=5
#Changes for helm chart based deployment
quarkus.kubernetes-client.devservices.enabled=false
%prod.quarkus.kubernetes.replicas=1
quarkus.kubernetes.env.vars.KAFKA_BOOTSTRAP_SERVERS=test
quarkus.kubernetes.env.vars.QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS=test
quarkus.kubernetes.env.vars.QUARKUS_DATASOURCE_USERNAME=test
quarkus.kubernetes.env.vars.QUARKUS_DATASOURCE_PASSWORD=test
quarkus.kubernetes.env.vars.QUARKUS_DATASOURCE_JDBC_URL=test
quarkus.helm.values.image-name.property=image
quarkus.helm.values.image-name.value=ghcr.io/mehab/repository-meta-analyzer:1.0.0-snapshot