package org.hyades.vulnmirror.state;

import dev.failsafe.Failsafe;
import dev.failsafe.RetryPolicy;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.Serdes;
import org.cyclonedx.proto.v1_4.Bom;
import org.cyclonedx.proto.v1_4.Source;
import org.cyclonedx.proto.v1_4.Vulnerability;
import org.hyades.common.KafkaTopic;
import org.hyades.proto.KafkaProtobufSerde;
import org.hyades.vulnmirror.datasource.Datasource;
import org.junit.jupiter.api.Test;

import javax.inject.Inject;
import java.time.Duration;
import java.util.Objects;

import static org.assertj.core.api.Assertions.assertThat;

@QuarkusTest
@QuarkusTestResource(KafkaCompanionResource.class)
class VulnerabilityDigestStoreTest {

    @Inject
    VulnerabilityDigestStore digestStore;

    @InjectKafkaCompanion
    KafkaCompanion kafkaCompanion;

    @Test
    void testGet() {
        final Bom bov = Bom.newBuilder()
                .addVulnerabilities(Vulnerability.newBuilder()
                        .setId("CVE-1234")
                        .setSource(Source.newBuilder().setName("NVD")))
                .build();

        kafkaCompanion
                .produce(Serdes.String(), new KafkaProtobufSerde<>(Bom.parser()))
                .fromRecords(new ProducerRecord<>(KafkaTopic.VULNERABILITY.getName(), "NVD/CVE-1234", bov));

        final byte[] vulnDigest = Failsafe
                .with(RetryPolicy.builder()
                        .handleResultIf(Objects::isNull)
                        .withDelay(Duration.ofMillis(50))
                        .withMaxRetries(100)
                        .build())
                .get(() -> digestStore.get(Datasource.NVD, "CVE-1234"));
        assertThat(vulnDigest).asHexString().isEqualTo("79A14B6943F4B6579AB948A51A8F63E39D0599B7FBFAB8A8D2112EB39AA1900F");
    }

    @Test
    void testGetWhenNoDigestExists() {
        assertThat(digestStore.get(Datasource.NVD, "foobar")).isNull();
    }

}