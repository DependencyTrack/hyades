/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) OWASP Foundation. All Rights Reserved.
 */
package org.dependencytrack.vulnmirror.state;

import dev.failsafe.Failsafe;
import dev.failsafe.RetryPolicy;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import jakarta.inject.Inject;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.Serdes;
import org.cyclonedx.proto.v1_6.Bom;
import org.cyclonedx.proto.v1_6.Source;
import org.cyclonedx.proto.v1_6.Vulnerability;
import org.dependencytrack.common.KafkaTopic;
import org.dependencytrack.proto.KafkaProtobufSerde;
import org.dependencytrack.vulnmirror.datasource.Datasource;
import org.junit.jupiter.api.Test;

import java.time.Duration;
import java.util.Objects;

import static org.assertj.core.api.Assertions.assertThat;

@QuarkusTest
@QuarkusTestResource(KafkaCompanionResource.class)
class VulnerabilityDigestStoreTest {

    @Inject
    VulnerabilityDigestStore digestStore;

    @InjectKafkaCompanion
    KafkaCompanion kafkaCompanion;

    @Test
    void testGet() {
        final Bom bov = Bom.newBuilder()
                .addVulnerabilities(Vulnerability.newBuilder()
                        .setId("GHSA-1234")
                        .setSource(Source.newBuilder().setName("GITHUB")))
                .build();

        kafkaCompanion
                .produce(Serdes.String(), new KafkaProtobufSerde<>(Bom.parser()))
                .fromRecords(new ProducerRecord<>(KafkaTopic.NEW_VULNERABILITY.getName(), "OSV/GHSA-1234", bov));

        final byte[] vulnDigest = Failsafe
                .with(RetryPolicy.builder()
                        .handleResultIf(Objects::isNull)
                        .withDelay(Duration.ofMillis(50))
                        .withMaxRetries(100)
                        .build())
                .get(() -> digestStore.get(Datasource.OSV, "GHSA-1234"));
        assertThat(vulnDigest).asHexString().isEqualTo("70658A17B2FA1F1E6DF4FC2263781A1197392C31DC8DA0F6FF3A0B6F65C3EDE9");
    }

    @Test
    void testGetWhenNoDigestExists() {
        assertThat(digestStore.get(Datasource.OSV, "foobar")).isNull();
    }

}